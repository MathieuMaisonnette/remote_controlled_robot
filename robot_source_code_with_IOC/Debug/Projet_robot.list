
Projet_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009130  08009130  0000a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c0  080092c0  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  080092c0  080092c0  0000a2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c8  080092c8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c8  080092c8  0000a2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092cc  080092cc  0000a2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080092d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000060  08009330  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08009330  0000b45c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ee  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c07  00000000  00000000  0002177e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00024388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdf  00000000  00000000  000257d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291dc  00000000  00000000  000267b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171f1  00000000  00000000  0004f993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106aeb  00000000  00000000  00066b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d66f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  0016d6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00173644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009118 	.word	0x08009118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009118 	.word	0x08009118

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f001 f9d8 	bl	800192a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f9b1 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fc15 	bl	8000dac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000582:	f000 fa03 	bl	800098c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000586:	f000 fae1 	bl	8000b4c <MX_TIM2_Init>
  MX_TIM6_Init();
 800058a:	f000 fb43 	bl	8000c14 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800058e:	f000 fbdd 	bl	8000d4c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000592:	f000 fb75 	bl	8000c80 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000596:	f000 fba9 	bl	8000cec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	nominal_speed = 1000;
 800059a:	4b98      	ldr	r3, [pc, #608]	@ (80007fc <main+0x28c>)
 800059c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a0:	601a      	str	r2, [r3, #0]
	nominal_target_speed_counter = vmax_counter*nominal_speed/vmax;
 80005a2:	4b96      	ldr	r3, [pc, #600]	@ (80007fc <main+0x28c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80005aa:	fb02 f303 	mul.w	r3, r2, r3
 80005ae:	4a94      	ldr	r2, [pc, #592]	@ (8000800 <main+0x290>)
 80005b0:	fb82 1203 	smull	r1, r2, r2, r3
 80005b4:	441a      	add	r2, r3
 80005b6:	12d2      	asrs	r2, r2, #11
 80005b8:	17db      	asrs	r3, r3, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	4a91      	ldr	r2, [pc, #580]	@ (8000804 <main+0x294>)
 80005be:	6013      	str	r3, [r2, #0]


	//target_speed = 0;

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005c0:	2100      	movs	r1, #0
 80005c2:	4891      	ldr	r0, [pc, #580]	@ (8000808 <main+0x298>)
 80005c4:	f005 f8fa 	bl	80057bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80005c8:	210c      	movs	r1, #12
 80005ca:	488f      	ldr	r0, [pc, #572]	@ (8000808 <main+0x298>)
 80005cc:	f005 f8f6 	bl	80057bc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80005d0:	4b8d      	ldr	r3, [pc, #564]	@ (8000808 <main+0x298>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);
 80005d8:	4b8b      	ldr	r3, [pc, #556]	@ (8000808 <main+0x298>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2200      	movs	r2, #0
 80005de:	641a      	str	r2, [r3, #64]	@ 0x40
	//HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_SET);
	HAL_TIM_Base_Start_IT(&htim6);
 80005e0:	488a      	ldr	r0, [pc, #552]	@ (800080c <main+0x29c>)
 80005e2:	f005 f823 	bl	800562c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80005e6:	488a      	ldr	r0, [pc, #552]	@ (8000810 <main+0x2a0>)
 80005e8:	f005 f820 	bl	800562c <HAL_TIM_Base_Start_IT>
	//HAL_UART_Transmit_IT(&huart3, (uint8_t)tab, sizeof(tab));
	HAL_UART_Receive_IT(&huart3, &Rx_buffer, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4989      	ldr	r1, [pc, #548]	@ (8000814 <main+0x2a4>)
 80005f0:	4889      	ldr	r0, [pc, #548]	@ (8000818 <main+0x2a8>)
 80005f2:	f006 f8b1 	bl	8006758 <HAL_UART_Receive_IT>

	d_right = 100;
 80005f6:	4b89      	ldr	r3, [pc, #548]	@ (800081c <main+0x2ac>)
 80005f8:	2264      	movs	r2, #100	@ 0x64
 80005fa:	601a      	str	r2, [r3, #0]
	d_left = 100;//On initialise dd et dg à une valeur supérieure au seuil. Ils serons modifiés dès le premier lancement de l'ADC.
 80005fc:	4b88      	ldr	r3, [pc, #544]	@ (8000820 <main+0x2b0>)
 80005fe:	2264      	movs	r2, #100	@ 0x64
 8000600:	601a      	str	r2, [r3, #0]

	bool detection_ended = false;
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_IT(&hadc1);
  while (1)
  {
	  HAL_GPIO_WritePin(IR1_CMD_GPIO_Port, IR1_CMD_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060c:	4885      	ldr	r0, [pc, #532]	@ (8000824 <main+0x2b4>)
 800060e:	f003 fc45 	bl	8003e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IR4_CMD_GPIO_Port, IR4_CMD_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4882      	ldr	r0, [pc, #520]	@ (8000824 <main+0x2b4>)
 800061a:	f003 fc3f 	bl	8003e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IR2_CMD_GPIO_Port, IR2_CMD_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000624:	487f      	ldr	r0, [pc, #508]	@ (8000824 <main+0x2b4>)
 8000626:	f003 fc39 	bl	8003e9c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IR3_CMD_GPIO_Port, IR3_CMD_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000634:	f003 fc32 	bl	8003e9c <HAL_GPIO_WritePin>


	  if(GO)
 8000638:	4b7b      	ldr	r3, [pc, #492]	@ (8000828 <main+0x2b8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	f000 813b 	beq.w	80008b8 <main+0x348>
	  {
		  // Les leds seront tout le temps allumées pour éviter les perturbations
		  if(d_right < dist_detection || d_left < dist_detection) // mur détecté
 8000642:	4b76      	ldr	r3, [pc, #472]	@ (800081c <main+0x2ac>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b79      	ldr	r3, [pc, #484]	@ (800082c <main+0x2bc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	db05      	blt.n	800065a <main+0xea>
 800064e:	4b74      	ldr	r3, [pc, #464]	@ (8000820 <main+0x2b0>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b76      	ldr	r3, [pc, #472]	@ (800082c <main+0x2bc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	429a      	cmp	r2, r3
 8000658:	da04      	bge.n	8000664 <main+0xf4>
		  {
			  capteur_mur();
 800065a:	f000 fdf3 	bl	8001244 <capteur_mur>

			  //On mets brièvement la PWM à 0
			 // __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);//moteur gauche
			 //__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);//moteur droit

			  detection_ended = true;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e131      	b.n	80008c8 <main+0x358>
		  }
		  else if(period_elapsed || detection_ended)
 8000664:	4b72      	ldr	r3, [pc, #456]	@ (8000830 <main+0x2c0>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <main+0x102>
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0c9      	beq.n	8000606 <main+0x96>
		  {
			  period_elapsed = false;
 8000672:	4b6f      	ldr	r3, [pc, #444]	@ (8000830 <main+0x2c0>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			  detection_ended = false;
 8000678:	2300      	movs	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]

			switch (uart_direction)
 800067c:	4b6d      	ldr	r3, [pc, #436]	@ (8000834 <main+0x2c4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b42      	subs	r3, #66	@ 0x42
 8000682:	2b16      	cmp	r3, #22
 8000684:	f200 80dc 	bhi.w	8000840 <main+0x2d0>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <main+0x120>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	0800071b 	.word	0x0800071b
 8000694:	08000841 	.word	0x08000841
 8000698:	08000841 	.word	0x08000841
 800069c:	08000841 	.word	0x08000841
 80006a0:	080006ed 	.word	0x080006ed
 80006a4:	08000841 	.word	0x08000841
 80006a8:	08000841 	.word	0x08000841
 80006ac:	08000841 	.word	0x08000841
 80006b0:	08000841 	.word	0x08000841
 80006b4:	08000841 	.word	0x08000841
 80006b8:	0800074d 	.word	0x0800074d
 80006bc:	08000841 	.word	0x08000841
 80006c0:	08000841 	.word	0x08000841
 80006c4:	08000841 	.word	0x08000841
 80006c8:	08000841 	.word	0x08000841
 80006cc:	08000841 	.word	0x08000841
 80006d0:	0800077d 	.word	0x0800077d
 80006d4:	08000841 	.word	0x08000841
 80006d8:	08000841 	.word	0x08000841
 80006dc:	08000841 	.word	0x08000841
 80006e0:	08000841 	.word	0x08000841
 80006e4:	080007ad 	.word	0x080007ad
 80006e8:	080007d7 	.word	0x080007d7
			{
			   case 'F'://Front
			   {
				   speed_left = compute_speed(speed_left, nominal_speed);
 80006ec:	4b52      	ldr	r3, [pc, #328]	@ (8000838 <main+0x2c8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a42      	ldr	r2, [pc, #264]	@ (80007fc <main+0x28c>)
 80006f2:	6812      	ldr	r2, [r2, #0]
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fc3d 	bl	8000f76 <compute_speed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a4e      	ldr	r2, [pc, #312]	@ (8000838 <main+0x2c8>)
 8000700:	6013      	str	r3, [r2, #0]
				   speed_right = compute_speed(speed_right, nominal_speed);
 8000702:	4b4e      	ldr	r3, [pc, #312]	@ (800083c <main+0x2cc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a3d      	ldr	r2, [pc, #244]	@ (80007fc <main+0x28c>)
 8000708:	6812      	ldr	r2, [r2, #0]
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fc32 	bl	8000f76 <compute_speed>
 8000712:	4603      	mov	r3, r0
 8000714:	4a49      	ldr	r2, [pc, #292]	@ (800083c <main+0x2cc>)
 8000716:	6013      	str	r3, [r2, #0]
				  break;
 8000718:	e0a4      	b.n	8000864 <main+0x2f4>
			   }
			   case 'B': //back
			   {
				   speed_left = compute_speed(speed_left, -nominal_speed);
 800071a:	4b47      	ldr	r3, [pc, #284]	@ (8000838 <main+0x2c8>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <main+0x28c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	425b      	negs	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	4610      	mov	r0, r2
 8000728:	f000 fc25 	bl	8000f76 <compute_speed>
 800072c:	4603      	mov	r3, r0
 800072e:	4a42      	ldr	r2, [pc, #264]	@ (8000838 <main+0x2c8>)
 8000730:	6013      	str	r3, [r2, #0]
				   speed_right = compute_speed(speed_right, -nominal_speed);
 8000732:	4b42      	ldr	r3, [pc, #264]	@ (800083c <main+0x2cc>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <main+0x28c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	425b      	negs	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f000 fc19 	bl	8000f76 <compute_speed>
 8000744:	4603      	mov	r3, r0
 8000746:	4a3d      	ldr	r2, [pc, #244]	@ (800083c <main+0x2cc>)
 8000748:	6013      	str	r3, [r2, #0]

				   break;
 800074a:	e08b      	b.n	8000864 <main+0x2f4>
			   }
			   case 'L' ://left
			   {
				      speed_left = compute_speed(speed_left, +nominal_speed);
 800074c:	4b3a      	ldr	r3, [pc, #232]	@ (8000838 <main+0x2c8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a2a      	ldr	r2, [pc, #168]	@ (80007fc <main+0x28c>)
 8000752:	6812      	ldr	r2, [r2, #0]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fc0d 	bl	8000f76 <compute_speed>
 800075c:	4603      	mov	r3, r0
 800075e:	4a36      	ldr	r2, [pc, #216]	@ (8000838 <main+0x2c8>)
 8000760:	6013      	str	r3, [r2, #0]
					  speed_right = compute_speed(speed_right, -nominal_speed);
 8000762:	4b36      	ldr	r3, [pc, #216]	@ (800083c <main+0x2cc>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <main+0x28c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	425b      	negs	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f000 fc01 	bl	8000f76 <compute_speed>
 8000774:	4603      	mov	r3, r0
 8000776:	4a31      	ldr	r2, [pc, #196]	@ (800083c <main+0x2cc>)
 8000778:	6013      	str	r3, [r2, #0]



				   break;
 800077a:	e073      	b.n	8000864 <main+0x2f4>
			   }
			   case 'R' : //right
			   {
				     speed_left = compute_speed(speed_left, -nominal_speed);
 800077c:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <main+0x2c8>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <main+0x28c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	425b      	negs	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	4610      	mov	r0, r2
 800078a:	f000 fbf4 	bl	8000f76 <compute_speed>
 800078e:	4603      	mov	r3, r0
 8000790:	4a29      	ldr	r2, [pc, #164]	@ (8000838 <main+0x2c8>)
 8000792:	6013      	str	r3, [r2, #0]
				     speed_right = compute_speed(speed_right, +nominal_speed);
 8000794:	4b29      	ldr	r3, [pc, #164]	@ (800083c <main+0x2cc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a18      	ldr	r2, [pc, #96]	@ (80007fc <main+0x28c>)
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fbe9 	bl	8000f76 <compute_speed>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a25      	ldr	r2, [pc, #148]	@ (800083c <main+0x2cc>)
 80007a8:	6013      	str	r3, [r2, #0]

				    break;
 80007aa:	e05b      	b.n	8000864 <main+0x2f4>
			   }
			   case 'W' ://Appel de phare, mode super_vitesse
			   {
				   speed_left = compute_speed(speed_left, vmax);
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <main+0x2c8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f640 21dc 	movw	r1, #2780	@ 0xadc
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fbde 	bl	8000f76 <compute_speed>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <main+0x2c8>)
 80007be:	6013      	str	r3, [r2, #0]
				   speed_right = compute_speed(speed_right, vmax);
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <main+0x2cc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f640 21dc 	movw	r1, #2780	@ 0xadc
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fbd4 	bl	8000f76 <compute_speed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a1a      	ldr	r2, [pc, #104]	@ (800083c <main+0x2cc>)
 80007d2:	6013      	str	r3, [r2, #0]
				   break;
 80007d4:	e046      	b.n	8000864 <main+0x2f4>
			   }
			   case 'X' ://Warning : stop
			   {
				   speed_left = compute_speed(speed_left, 0);
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <main+0x2c8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fbca 	bl	8000f76 <compute_speed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <main+0x2c8>)
 80007e6:	6013      	str	r3, [r2, #0]
				   speed_right = compute_speed(speed_right, 0);
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <main+0x2cc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fbc1 	bl	8000f76 <compute_speed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <main+0x2cc>)
 80007f8:	6013      	str	r3, [r2, #0]
				  break;
 80007fa:	e033      	b.n	8000864 <main+0x2f4>
 80007fc:	200002f4 	.word	0x200002f4
 8000800:	bc97c21f 	.word	0xbc97c21f
 8000804:	20000300 	.word	0x20000300
 8000808:	200000e0 	.word	0x200000e0
 800080c:	2000012c 	.word	0x2000012c
 8000810:	20000178 	.word	0x20000178
 8000814:	200002e8 	.word	0x200002e8
 8000818:	2000024c 	.word	0x2000024c
 800081c:	200002ec 	.word	0x200002ec
 8000820:	200002f0 	.word	0x200002f0
 8000824:	48000400 	.word	0x48000400
 8000828:	200002e0 	.word	0x200002e0
 800082c:	20000000 	.word	0x20000000
 8000830:	20000304 	.word	0x20000304
 8000834:	200002e9 	.word	0x200002e9
 8000838:	200002f8 	.word	0x200002f8
 800083c:	200002fc 	.word	0x200002fc
			   }
			   default :
			   {
				   speed_left = compute_speed(speed_left, 0);
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <main+0x35c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fb95 	bl	8000f76 <compute_speed>
 800084c:	4603      	mov	r3, r0
 800084e:	4a1f      	ldr	r2, [pc, #124]	@ (80008cc <main+0x35c>)
 8000850:	6013      	str	r3, [r2, #0]
				   speed_right = compute_speed(speed_right, 0);
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <main+0x360>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fb8c 	bl	8000f76 <compute_speed>
 800085e:	4603      	mov	r3, r0
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <main+0x360>)
 8000862:	6013      	str	r3, [r2, #0]
			   }
			}

			// on applique sur la PWM et sur le choix de la direction la vitesse calculée précedemment
			 HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, get_direction(speed_left));//moteur droit
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <main+0x35c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fbed 	bl	8001048 <get_direction>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000876:	4817      	ldr	r0, [pc, #92]	@ (80008d4 <main+0x364>)
 8000878:	f003 fb10 	bl	8003e9c <HAL_GPIO_WritePin>
		     HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, get_direction(speed_right));//moteur droit
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <main+0x360>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fbe1 	bl	8001048 <get_direction>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	2104      	movs	r1, #4
 800088c:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <main+0x368>)
 800088e:	f003 fb05 	bl	8003e9c <HAL_GPIO_WritePin>
		     __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, speed_to_ARR(speed_left));//moteur gauche
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <main+0x35c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fbb8 	bl	800100c <speed_to_ARR>
 800089c:	4602      	mov	r2, r0
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <main+0x36c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	635a      	str	r2, [r3, #52]	@ 0x34
		     __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, speed_to_ARR(speed_right));//moteur droit
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <main+0x360>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fbaf 	bl	800100c <speed_to_ARR>
 80008ae:	4602      	mov	r2, r0
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <main+0x36c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b6:	e6a6      	b.n	8000606 <main+0x96>
}
	  }
	  else
	  {
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <main+0x36c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
		  	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <main+0x36c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2200      	movs	r2, #0
 80008c6:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_GPIO_WritePin(IR1_CMD_GPIO_Port, IR1_CMD_Pin, GPIO_PIN_SET);
 80008c8:	e69d      	b.n	8000606 <main+0x96>
 80008ca:	bf00      	nop
 80008cc:	200002f8 	.word	0x200002f8
 80008d0:	200002fc 	.word	0x200002fc
 80008d4:	48000800 	.word	0x48000800
 80008d8:	48000400 	.word	0x48000400
 80008dc:	200000e0 	.word	0x200000e0

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	@ 0x58
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	@ 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f007 fa4e 	bl	8007d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000902:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000906:	f003 fb17 	bl	8003f38 <HAL_PWREx_ControlVoltageScaling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000910:	f000 fd24 	bl	800135c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000914:	f003 faf2 	bl	8003efc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <SystemClock_Config+0xa8>)
 800091a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800091e:	4a1a      	ldr	r2, [pc, #104]	@ (8000988 <SystemClock_Config+0xa8>)
 8000920:	f023 0318 	bic.w	r3, r3, #24
 8000924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000928:	2314      	movs	r3, #20
 800092a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	@ 0x60
 800093a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fb4d 	bl	8003fe4 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000950:	f000 fd04 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f003 ff15 	bl	800479c <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000978:	f000 fcf0 	bl	800135c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800097c:	f004 fc1c 	bl	80051b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000980:	bf00      	nop
 8000982:	3758      	adds	r7, #88	@ 0x58
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000

0800098c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b090      	sub	sp, #64	@ 0x40
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000992:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009c0:	4b5a      	ldr	r3, [pc, #360]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009c2:	4a5b      	ldr	r2, [pc, #364]	@ (8000b30 <MX_ADC1_Init+0x1a4>)
 80009c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80009c6:	4b59      	ldr	r3, [pc, #356]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009c8:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 80009cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ce:	4b57      	ldr	r3, [pc, #348]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b55      	ldr	r3, [pc, #340]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009da:	4b54      	ldr	r3, [pc, #336]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e0:	4b52      	ldr	r3, [pc, #328]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009e6:	4b51      	ldr	r3, [pc, #324]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ec:	4b4f      	ldr	r3, [pc, #316]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80009f2:	4b4e      	ldr	r3, [pc, #312]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009f4:	2205      	movs	r2, #5
 80009f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f8:	4b4c      	ldr	r3, [pc, #304]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a00:	4b4a      	ldr	r3, [pc, #296]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a06:	4b49      	ldr	r3, [pc, #292]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a0c:	4b47      	ldr	r3, [pc, #284]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a14:	4b45      	ldr	r3, [pc, #276]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a24:	4841      	ldr	r0, [pc, #260]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a26:	f001 fac3 	bl	8001fb0 <HAL_ADC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000a30:	f000 fc94 	bl	800135c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	483b      	ldr	r0, [pc, #236]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a40:	f002 fe42 	bl	80036c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000a4a:	f000 fc87 	bl	800135c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000a4e:	4b39      	ldr	r3, [pc, #228]	@ (8000b34 <MX_ADC1_Init+0x1a8>)
 8000a50:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000a52:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8000a56:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_14;
 8000a58:	4b37      	ldr	r3, [pc, #220]	@ (8000b38 <MX_ADC1_Init+0x1ac>)
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.ITMode = ENABLE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.HighThreshold = 4095;
 8000a62:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.LowThreshold = 3723;
 8000a68:	f640 638b 	movw	r3, #3723	@ 0xe8b
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	482d      	ldr	r0, [pc, #180]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000a76:	f002 fb3d 	bl	80030f4 <HAL_ADC_AnalogWDGConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000a80:	f000 fc6c 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a84:	4b2d      	ldr	r3, [pc, #180]	@ (8000b3c <MX_ADC1_Init+0x1b0>)
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a90:	237f      	movs	r3, #127	@ 0x7f
 8000a92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a94:	2304      	movs	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4822      	ldr	r0, [pc, #136]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000aa2:	f001 ff35 	bl	8002910 <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000aac:	f000 fc56 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <MX_ADC1_Init+0x1b4>)
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	481b      	ldr	r0, [pc, #108]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000abe:	f001 ff27 	bl	8002910 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000ac8:	f000 fc48 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <MX_ADC1_Init+0x1b8>)
 8000ace:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4814      	ldr	r0, [pc, #80]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000ada:	f001 ff19 	bl	8002910 <HAL_ADC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8000ae4:	f000 fc3a 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_ADC1_Init+0x1bc>)
 8000aea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aec:	2318      	movs	r3, #24
 8000aee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000af6:	f001 ff0b 	bl	8002910 <HAL_ADC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000b00:	f000 fc2c 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_ADC1_Init+0x1ac>)
 8000b06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	@ (8000b2c <MX_ADC1_Init+0x1a0>)
 8000b14:	f001 fefc 	bl	8002910 <HAL_ADC_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000b1e:	f000 fc1d 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3740      	adds	r7, #64	@ 0x40
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000007c 	.word	0x2000007c
 8000b30:	50040000 	.word	0x50040000
 8000b34:	7dc00000 	.word	0x7dc00000
 8000b38:	3ac04000 	.word	0x3ac04000
 8000b3c:	0c900008 	.word	0x0c900008
 8000b40:	10c00010 	.word	0x10c00010
 8000b44:	43210000 	.word	0x43210000
 8000b48:	36902000 	.word	0x36902000

08000b4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b70:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000b86:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b98:	481d      	ldr	r0, [pc, #116]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000b9a:	f004 fdb7 	bl	800570c <HAL_TIM_PWM_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f000 fbda 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4816      	ldr	r0, [pc, #88]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000bb8:	f005 fcda 	bl	8006570 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000bc2:	f000 fbcb 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc6:	2360      	movs	r3, #96	@ 0x60
 8000bc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000bde:	f004 fff5 	bl	8005bcc <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000be8:	f000 fbb8 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	220c      	movs	r2, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000bf4:	f004 ffea 	bl	8005bcc <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000bfe:	f000 fbad 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c02:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <MX_TIM2_Init+0xc4>)
 8000c04:	f000 fcc2 	bl	800158c <HAL_TIM_MspPostInit>

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	@ 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000e0 	.word	0x200000e0

08000c14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <MX_TIM6_Init+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 13-1;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c2c:	220c      	movs	r2, #12
 8000c2e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 61538-1;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c38:	f24f 0261 	movw	r2, #61537	@ 0xf061
 8000c3c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c46:	f004 fc99 	bl	800557c <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c50:	f000 fb84 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_TIM6_Init+0x64>)
 8000c62:	f005 fc85 	bl	8006570 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c6c:	f000 fb76 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000012c 	.word	0x2000012c
 8000c7c:	40001000 	.word	0x40001000

08000c80 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_TIM7_Init+0x64>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_TIM7_Init+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1-1;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_TIM7_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_TIM7_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 40000;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_TIM7_Init+0x64>)
 8000ca4:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000ca8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_TIM7_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_TIM7_Init+0x64>)
 8000cb2:	f004 fc63 	bl	800557c <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000cbc:	f000 fb4e 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_TIM7_Init+0x64>)
 8000cce:	f005 fc4f 	bl	8006570 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fb40 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000178 	.word	0x20000178
 8000ce8:	40001400 	.word	0x40001400

08000cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	@ (8000d48 <MX_USART2_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_USART2_UART_Init+0x58>)
 8000d30:	f005 fcc4 	bl	80066bc <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 fb0f 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001c4 	.word	0x200001c4
 8000d48:	40004400 	.word	0x40004400

08000d4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d52:	4a15      	ldr	r2, [pc, #84]	@ (8000da8 <MX_USART3_UART_Init+0x5c>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d7e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d82:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d92:	f005 fc93 	bl	80066bc <HAL_UART_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000d9c:	f000 fade 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000024c 	.word	0x2000024c
 8000da8:	40004800 	.word	0x40004800

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	4a44      	ldr	r2, [pc, #272]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dce:	4b42      	ldr	r3, [pc, #264]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dda:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dde:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a38      	ldr	r2, [pc, #224]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a32      	ldr	r2, [pc, #200]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <MX_GPIO_Init+0x12c>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alert_batt_Pin|IR3_CMD_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2c:	f003 f836 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|IR1_CMD_Pin|IR4_CMD_Pin|IR2_CMD_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f24d 0104 	movw	r1, #53252	@ 0xd004
 8000e36:	4829      	ldr	r0, [pc, #164]	@ (8000edc <MX_GPIO_Init+0x130>)
 8000e38:	f003 f830 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e42:	4827      	ldr	r0, [pc, #156]	@ (8000ee0 <MX_GPIO_Init+0x134>)
 8000e44:	f003 f82a 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BP_Pin */
  GPIO_InitStruct.Pin = BP_Pin;
 8000e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BP_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4820      	ldr	r0, [pc, #128]	@ (8000ee0 <MX_GPIO_Init+0x134>)
 8000e60:	f002 fe72 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Alert_batt_Pin IR3_CMD_Pin */
  GPIO_InitStruct.Pin = Alert_batt_Pin|IR3_CMD_Pin;
 8000e64:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e80:	f002 fe62 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin IR1_CMD_Pin IR4_CMD_Pin IR2_CMD_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|IR1_CMD_Pin|IR4_CMD_Pin|IR2_CMD_Pin;
 8000e84:	f24d 0304 	movw	r3, #53252	@ 0xd004
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480f      	ldr	r0, [pc, #60]	@ (8000edc <MX_GPIO_Init+0x130>)
 8000e9e:	f002 fe53 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 8000ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <MX_GPIO_Init+0x134>)
 8000ebc:	f002 fe44 	bl	8003b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2028      	movs	r0, #40	@ 0x28
 8000ec6:	f002 fd8a 	bl	80039de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eca:	2028      	movs	r0, #40	@ 0x28
 8000ecc:	f002 fda3 	bl	8003a16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	48000800 	.word	0x48000800

08000ee4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//l'origine de l'interruption est donnée
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a08      	ldr	r2, [pc, #32]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d102      	bne.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		/*Si nous avions voulu allumer les leds infra, ce serait ici */
		HAL_ADC_Start_IT(&hadc1);
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ef8:	f001 f9aa 	bl	8002250 <HAL_ADC_Start_IT>
	}
	if(htim->Instance == TIM7)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d102      	bne.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		period_elapsed = true;
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40001000 	.word	0x40001000
 8000f18:	2000007c 	.word	0x2000007c
 8000f1c:	40001400 	.word	0x40001400
 8000f20:	20000304 	.word	0x20000304

08000f24 <adc_value_to_dist>:

int adc_value_to_dist(float a, float b, int p)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f32:	6078      	str	r0, [r7, #4]
	//int dist = (int)((1.0f/a)*log(b/((float)p))); // regression exponentielle
	int dist = powf(b/(float)p, 1/a);// regression "puissance"
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f46:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8000f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8000f52:	eef0 0a47 	vmov.f32	s1, s14
 8000f56:	eeb0 0a66 	vmov.f32	s0, s13
 8000f5a:	f007 fd13 	bl	8008984 <powf>
 8000f5e:	eef0 7a40 	vmov.f32	s15, s0
 8000f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f66:	ee17 3a90 	vmov	r3, s15
 8000f6a:	617b      	str	r3, [r7, #20]
	return dist;
 8000f6c:	697b      	ldr	r3, [r7, #20]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <compute_speed>:



int compute_speed(int currentSpeed, int speedTarget)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
	int nextSpeed;
	int diff = abs(speedTarget - currentSpeed);
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bfb8      	it	lt
 8000f8a:	425b      	neglt	r3, r3
 8000f8c:	60bb      	str	r3, [r7, #8]
		if(speedTarget > currentSpeed)
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dd16      	ble.n	8000fc4 <compute_speed+0x4e>
		{
			if(speedTarget <= 0)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dc09      	bgt.n	8000fb0 <compute_speed+0x3a>
			{
				if(diff > max_accel) diff = max_accel;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b0a      	cmp	r3, #10
 8000fa0:	dd01      	ble.n	8000fa6 <compute_speed+0x30>
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	60bb      	str	r3, [r7, #8]
				nextSpeed = currentSpeed + diff;
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e026      	b.n	8000ffe <compute_speed+0x88>
			}
			else
			{
				if(diff > max_accel) diff = max_accel;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b0a      	cmp	r3, #10
 8000fb4:	dd01      	ble.n	8000fba <compute_speed+0x44>
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	60bb      	str	r3, [r7, #8]

				nextSpeed = currentSpeed + diff;
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e01c      	b.n	8000ffe <compute_speed+0x88>
			}
		}
		else if(speedTarget < currentSpeed)
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	da16      	bge.n	8000ffa <compute_speed+0x84>
		{
			if(speedTarget < 0)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	da09      	bge.n	8000fe6 <compute_speed+0x70>
			{
				if(diff > max_accel)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2b0a      	cmp	r3, #10
 8000fd6:	dd01      	ble.n	8000fdc <compute_speed+0x66>
					diff = max_accel;
 8000fd8:	230a      	movs	r3, #10
 8000fda:	60bb      	str	r3, [r7, #8]
				nextSpeed = currentSpeed - diff;
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e00b      	b.n	8000ffe <compute_speed+0x88>
			}
			else
			{
				if(diff > max_accel)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b0a      	cmp	r3, #10
 8000fea:	dd01      	ble.n	8000ff0 <compute_speed+0x7a>
					diff = max_accel;
 8000fec:	230a      	movs	r3, #10
 8000fee:	60bb      	str	r3, [r7, #8]
				nextSpeed = currentSpeed - diff;
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e001      	b.n	8000ffe <compute_speed+0x88>
			}
		}
		else
		{
			nextSpeed = currentSpeed;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

		/*if(abs(nextSpeed) > maxSpeed) //necessaire si on veut une vitess
		{
			nextSpeed = nextSpeed/abs(nextSpeed) * maxSpeed;
		}*/
		return nextSpeed;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <speed_to_ARR>:


int speed_to_ARR(int speed)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	int nominal_target_speed_counter = vmax_counter*abs(speed)/vmax;//en valeur absolue
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	bfb8      	it	lt
 800101a:	425b      	neglt	r3, r3
 800101c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <speed_to_ARR+0x38>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	441a      	add	r2, r3
 800102c:	12d2      	asrs	r2, r2, #11
 800102e:	17db      	asrs	r3, r3, #31
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	60fb      	str	r3, [r7, #12]
	return nominal_target_speed_counter;
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	bc97c21f 	.word	0xbc97c21f

08001048 <get_direction>:

bool get_direction(int speed)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    return speed > 0 ? 1 : 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	bfcc      	ite	gt
 8001056:	2301      	movgt	r3, #1
 8001058:	2300      	movle	r3, #0
 800105a:	b2db      	uxtb	r3, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
		//sprintf(msg, "Tension batterie = %d, vitesse droite = %d, vitesse gauche = %d\r\n",Batt_value, speed_right, speed_left);
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);

	  if(cnt_adc_scan == 0)//gauche
 8001070:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d113      	bne.n	80010a2 <HAL_ADC_ConvCpltCallback+0x3a>
		  {
			  FR_value = HAL_ADC_GetValue(&hadc1);
 800107a:	4830      	ldr	r0, [pc, #192]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd4>)
 800107c:	f001 fa16 	bl	80024ac <HAL_ADC_GetValue>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001086:	801a      	strh	r2, [r3, #0]
			  d_right = adc_value_to_dist(0.942,4937.5, FR_value);//TODO ici modifier coeffs
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <HAL_ADC_ConvCpltCallback+0xd8>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8001144 <HAL_ADC_ConvCpltCallback+0xdc>
 8001094:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001148 <HAL_ADC_ConvCpltCallback+0xe0>
 8001098:	f7ff ff44 	bl	8000f24 <adc_value_to_dist>
 800109c:	4603      	mov	r3, r0
 800109e:	4a2b      	ldr	r2, [pc, #172]	@ (800114c <HAL_ADC_ConvCpltCallback+0xe4>)
 80010a0:	6013      	str	r3, [r2, #0]


		  }
		if(cnt_adc_scan == 1)//droite
 80010a2:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d113      	bne.n	80010d4 <HAL_ADC_ConvCpltCallback+0x6c>
		  {
			FL_value = HAL_ADC_GetValue(&hadc1);
 80010ac:	4823      	ldr	r0, [pc, #140]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd4>)
 80010ae:	f001 f9fd 	bl	80024ac <HAL_ADC_GetValue>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	4b26      	ldr	r3, [pc, #152]	@ (8001150 <HAL_ADC_ConvCpltCallback+0xe8>)
 80010b8:	801a      	strh	r2, [r3, #0]
			d_left = adc_value_to_dist(0.942,4937.5, FL_value); // TODO ici modifier coeffs
 80010ba:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <HAL_ADC_ConvCpltCallback+0xe8>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001144 <HAL_ADC_ConvCpltCallback+0xdc>
 80010c6:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001148 <HAL_ADC_ConvCpltCallback+0xe0>
 80010ca:	f7ff ff2b 	bl	8000f24 <adc_value_to_dist>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <HAL_ADC_ConvCpltCallback+0xec>)
 80010d2:	6013      	str	r3, [r2, #0]
		  }
		if(cnt_adc_scan == 2)
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d106      	bne.n	80010ec <HAL_ADC_ConvCpltCallback+0x84>
		  {
			  BL_value = HAL_ADC_GetValue(&hadc1);
 80010de:	4817      	ldr	r0, [pc, #92]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd4>)
 80010e0:	f001 f9e4 	bl	80024ac <HAL_ADC_GetValue>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_ADC_ConvCpltCallback+0xf0>)
 80010ea:	801a      	strh	r2, [r3, #0]
		  }
		  if(cnt_adc_scan == 3)
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d106      	bne.n	8001104 <HAL_ADC_ConvCpltCallback+0x9c>
		  {
			  BR_value = HAL_ADC_GetValue(&hadc1);
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd4>)
 80010f8:	f001 f9d8 	bl	80024ac <HAL_ADC_GetValue>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001102:	801a      	strh	r2, [r3, #0]
		  }
		  if(cnt_adc_scan == 4)
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b04      	cmp	r3, #4
 800110c:	d109      	bne.n	8001122 <HAL_ADC_ConvCpltCallback+0xba>
		  {
			  Batt_value = HAL_ADC_GetValue(&hadc1);//Ce get_value n'est pas nécessaire,
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001110:	f001 f9cc 	bl	80024ac <HAL_ADC_GetValue>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_ADC_ConvCpltCallback+0xf8>)
 800111a:	801a      	strh	r2, [r3, #0]
			  //nous le récupérons quand même à des fins de déboguage puisque nous
			  //faisons déjà un scan
			  cnt_adc_scan=-1;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 800111e:	22ff      	movs	r2, #255	@ 0xff
 8001120:	701a      	strb	r2, [r3, #0]
		  }
		cnt_adc_scan = cnt_adc_scan+1;
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b02      	ldr	r3, [pc, #8]	@ (8001138 <HAL_ADC_ConvCpltCallback+0xd0>)
 800112e:	701a      	strb	r2, [r3, #0]


}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200002d6 	.word	0x200002d6
 800113c:	2000007c 	.word	0x2000007c
 8001140:	200002dc 	.word	0x200002dc
 8001144:	459a4c00 	.word	0x459a4c00
 8001148:	3f7126e9 	.word	0x3f7126e9
 800114c:	200002ec 	.word	0x200002ec
 8001150:	200002d8 	.word	0x200002d8
 8001154:	200002f0 	.word	0x200002f0
 8001158:	200002da 	.word	0x200002da
 800115c:	200002de 	.word	0x200002de
 8001160:	200002d4 	.word	0x200002d4

08001164 <HAL_ADC_LevelOutOfWindowCallback>:


void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(Alert_batt_GPIO_Port, Alert_batt_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001174:	f002 fe92 	bl	8003e9c <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_GPIO_EXTI_Callback>:

//inversion du booléen GO lors d'un appui sur le bouton bleu
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
	uint32_t actual_time = HAL_GetTick();
 800118a:	f000 fc37 	bl	80019fc <HAL_GetTick>
 800118e:	60f8      	str	r0, [r7, #12]

	if (GPIO_Pin == BP_Pin  && actual_time - last_trigger_bp > 7)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001196:	d117      	bne.n	80011c8 <HAL_GPIO_EXTI_Callback+0x48>
 8001198:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <HAL_GPIO_EXTI_Callback+0x50>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	d911      	bls.n	80011c8 <HAL_GPIO_EXTI_Callback+0x48>
	{
		GO = !GO;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80011c0:	701a      	strb	r2, [r3, #0]
		last_trigger_bp = actual_time;
 80011c2:	4a03      	ldr	r2, [pc, #12]	@ (80011d0 <HAL_GPIO_EXTI_Callback+0x50>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6013      	str	r3, [r2, #0]
	}
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000308 	.word	0x20000308
 80011d4:	200002e0 	.word	0x200002e0

080011d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a11      	ldr	r2, [pc, #68]	@ (800122c <HAL_UART_RxCpltCallback+0x54>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d11c      	bne.n	8001224 <HAL_UART_RxCpltCallback+0x4c>
	{
		if(flag_uart % 2 ==0)
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_UART_RxCpltCallback+0x58>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d108      	bne.n	8001208 <HAL_UART_RxCpltCallback+0x30>
		{
			if(Rx_buffer != 'S')
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_UART_RxCpltCallback+0x5c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b53      	cmp	r3, #83	@ 0x53
 80011fc:	d004      	beq.n	8001208 <HAL_UART_RxCpltCallback+0x30>
				sscanf(&Rx_buffer, "%c",&uart_direction);
 80011fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <HAL_UART_RxCpltCallback+0x60>)
 8001200:	490e      	ldr	r1, [pc, #56]	@ (800123c <HAL_UART_RxCpltCallback+0x64>)
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <HAL_UART_RxCpltCallback+0x5c>)
 8001204:	f006 fd98 	bl	8007d38 <siscanf>
		}

		HAL_UART_Receive_IT(&huart3, &Rx_buffer, 1);//on relance après réception
 8001208:	2201      	movs	r2, #1
 800120a:	490a      	ldr	r1, [pc, #40]	@ (8001234 <HAL_UART_RxCpltCallback+0x5c>)
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <HAL_UART_RxCpltCallback+0x68>)
 800120e:	f005 faa3 	bl	8006758 <HAL_UART_Receive_IT>
		UNUSED(huart);
		if(Rx_buffer != 'D'){
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_UART_RxCpltCallback+0x5c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b44      	cmp	r3, #68	@ 0x44
 8001218:	d004      	beq.n	8001224 <HAL_UART_RxCpltCallback+0x4c>
			//si on se déconnecte et reconnecte il envoie un D pour indiquer qu'il
			//y a eu une connexion. Ce D ne doit donc pas être pris en compte comme une commande
			flag_uart++;
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_UART_RxCpltCallback+0x58>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a03      	ldr	r2, [pc, #12]	@ (8001230 <HAL_UART_RxCpltCallback+0x58>)
 8001222:	6013      	str	r3, [r2, #0]
		}

	}
	//uint8_t *coucou;
 //sscanf(Rx_buffer, "%hhu", coucou );
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40004800 	.word	0x40004800
 8001230:	200002e4 	.word	0x200002e4
 8001234:	200002e8 	.word	0x200002e8
 8001238:	200002e9 	.word	0x200002e9
 800123c:	08009130 	.word	0x08009130
 8001240:	2000024c 	.word	0x2000024c

08001244 <capteur_mur>:

void capteur_mur()//d1 = d_left et d2 = d_right
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	bool avoidance_ended = false;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
	int diff;
	while(!avoidance_ended && GO)
 800124e:	e066      	b.n	800131e <capteur_mur+0xda>
	{
		diff = d_left - d_right;//on recalcule à chaque fois
 8001250:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <capteur_mur+0xf8>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b3a      	ldr	r3, [pc, #232]	@ (8001340 <capteur_mur+0xfc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	603b      	str	r3, [r7, #0]
		if(d_left <= dist_detection && d_right <= dist_detection)//bloqué dans un coin
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <capteur_mur+0xf8>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <capteur_mur+0x100>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	dc1b      	bgt.n	80012a0 <capteur_mur+0x5c>
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <capteur_mur+0xfc>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b35      	ldr	r3, [pc, #212]	@ (8001344 <capteur_mur+0x100>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	dc15      	bgt.n	80012a0 <capteur_mur+0x5c>
		{
			   HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, 0);//droit
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800127a:	4833      	ldr	r0, [pc, #204]	@ (8001348 <capteur_mur+0x104>)
 800127c:	f002 fe0e 	bl	8003e9c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, 0);//gauche
 8001280:	2200      	movs	r2, #0
 8001282:	2104      	movs	r1, #4
 8001284:	4831      	ldr	r0, [pc, #196]	@ (800134c <capteur_mur+0x108>)
 8001286:	f002 fe09 	bl	8003e9c <HAL_GPIO_WritePin>
			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, nominal_target_speed_counter);//moteur gauche
 800128a:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <capteur_mur+0x10c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <capteur_mur+0x110>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	635a      	str	r2, [r3, #52]	@ 0x34
			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, nominal_target_speed_counter);//moteur droit
 8001294:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <capteur_mur+0x10c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <capteur_mur+0x110>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	641a      	str	r2, [r3, #64]	@ 0x40
 800129e:	e030      	b.n	8001302 <capteur_mur+0xbe>
		}
		else if(diff >= 0)//mur à droite, on tourne à gauche
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db15      	blt.n	80012d2 <capteur_mur+0x8e>
			//Si le mur est en face on choisit d'aller à gauche
		{
			   HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, 1);//droit
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ac:	4826      	ldr	r0, [pc, #152]	@ (8001348 <capteur_mur+0x104>)
 80012ae:	f002 fdf5 	bl	8003e9c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, 0);//gauche
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	4825      	ldr	r0, [pc, #148]	@ (800134c <capteur_mur+0x108>)
 80012b8:	f002 fdf0 	bl	8003e9c <HAL_GPIO_WritePin>
			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, nominal_target_speed_counter);//moteur gauche
 80012bc:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <capteur_mur+0x10c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <capteur_mur+0x110>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, nominal_target_speed_counter);//moteur droit
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <capteur_mur+0x10c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <capteur_mur+0x110>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80012d0:	e017      	b.n	8001302 <capteur_mur+0xbe>
		}
		else if(diff < 0) //mur à gauche on tourne à droite
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da14      	bge.n	8001302 <capteur_mur+0xbe>
		{
			   HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, 0);//droit
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012de:	481a      	ldr	r0, [pc, #104]	@ (8001348 <capteur_mur+0x104>)
 80012e0:	f002 fddc 	bl	8003e9c <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, 1);//gauche
 80012e4:	2201      	movs	r2, #1
 80012e6:	2104      	movs	r1, #4
 80012e8:	4818      	ldr	r0, [pc, #96]	@ (800134c <capteur_mur+0x108>)
 80012ea:	f002 fdd7 	bl	8003e9c <HAL_GPIO_WritePin>
			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, nominal_target_speed_counter);//moteur gauche
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <capteur_mur+0x10c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <capteur_mur+0x110>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34
			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, nominal_target_speed_counter);//moteur droit
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <capteur_mur+0x10c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <capteur_mur+0x110>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		if(d_right > dist_detection && d_left > dist_detection)
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <capteur_mur+0xfc>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <capteur_mur+0x100>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	dd07      	ble.n	800131e <capteur_mur+0xda>
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <capteur_mur+0xf8>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <capteur_mur+0x100>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	dd01      	ble.n	800131e <capteur_mur+0xda>
		 	avoidance_ended = true;
 800131a:	2301      	movs	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
	while(!avoidance_ended && GO)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f083 0301 	eor.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <capteur_mur+0xee>
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <capteur_mur+0x114>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d18e      	bne.n	8001250 <capteur_mur+0xc>
	}
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200002f0 	.word	0x200002f0
 8001340:	200002ec 	.word	0x200002ec
 8001344:	20000000 	.word	0x20000000
 8001348:	48000800 	.word	0x48000800
 800134c:	48000400 	.word	0x48000400
 8001350:	20000300 	.word	0x20000300
 8001354:	200000e0 	.word	0x200000e0
 8001358:	200002e0 	.word	0x200002e0

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <Error_Handler+0x8>

08001368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_MspInit+0x44>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001372:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <HAL_MspInit+0x44>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6613      	str	r3, [r2, #96]	@ 0x60
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_MspInit+0x44>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_MspInit+0x44>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	6593      	str	r3, [r2, #88]	@ 0x58
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0ac      	sub	sp, #176	@ 0xb0
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2288      	movs	r2, #136	@ 0x88
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 fcdd 	bl	8007d90 <memset>
  if(hadc->Instance==ADC1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a38      	ldr	r2, [pc, #224]	@ (80014bc <HAL_ADC_MspInit+0x10c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d169      	bne.n	80014b4 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80013ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80013f6:	2310      	movs	r3, #16
 80013f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013fa:	2307      	movs	r3, #7
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001402:	2304      	movs	r3, #4
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800140a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fbe7 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800141c:	f7ff ff9e 	bl	800135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001420:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001424:	4a26      	ldr	r2, [pc, #152]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001426:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800142a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142c:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	4a20      	ldr	r2, [pc, #128]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a1a      	ldr	r2, [pc, #104]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = IR1_IN_Pin|IR2_IN_Pin|IR4_IN_Pin|Tension_batt_Pin;
 8001468:	233c      	movs	r3, #60	@ 0x3c
 800146a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800146e:	230b      	movs	r3, #11
 8001470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800147e:	4619      	mov	r1, r3
 8001480:	4810      	ldr	r0, [pc, #64]	@ (80014c4 <HAL_ADC_MspInit+0x114>)
 8001482:	f002 fb61 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR3_IN_Pin;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800148c:	230b      	movs	r3, #11
 800148e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(IR3_IN_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800149c:	4619      	mov	r1, r3
 800149e:	480a      	ldr	r0, [pc, #40]	@ (80014c8 <HAL_ADC_MspInit+0x118>)
 80014a0:	f002 fb52 	bl	8003b48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2012      	movs	r0, #18
 80014aa:	f002 fa98 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014ae:	2012      	movs	r0, #18
 80014b0:	f002 fab1 	bl	8003a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	37b0      	adds	r7, #176	@ 0xb0
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	50040000 	.word	0x50040000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400

080014cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014dc:	d10b      	bne.n	80014f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_TIM_PWM_MspInit+0x38>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <HAL_TIM_PWM_MspInit+0x38>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_TIM_PWM_MspInit+0x38>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1a      	ldr	r2, [pc, #104]	@ (8001580 <HAL_TIM_Base_MspInit+0x78>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d114      	bne.n	8001544 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_TIM_Base_MspInit+0x7c>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <HAL_TIM_Base_MspInit+0x7c>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6593      	str	r3, [r2, #88]	@ 0x58
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_TIM_Base_MspInit+0x7c>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2036      	movs	r0, #54	@ 0x36
 8001538:	f002 fa51 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800153c:	2036      	movs	r0, #54	@ 0x36
 800153e:	f002 fa6a 	bl	8003a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001542:	e018      	b.n	8001576 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0f      	ldr	r2, [pc, #60]	@ (8001588 <HAL_TIM_Base_MspInit+0x80>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d113      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_TIM_Base_MspInit+0x7c>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <HAL_TIM_Base_MspInit+0x7c>)
 8001554:	f043 0320 	orr.w	r3, r3, #32
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_TIM_Base_MspInit+0x7c>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2037      	movs	r0, #55	@ 0x37
 800156c:	f002 fa37 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001570:	2037      	movs	r0, #55	@ 0x37
 8001572:	f002 fa50 	bl	8003a16 <HAL_NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40001000 	.word	0x40001000
 8001584:	40021000 	.word	0x40021000
 8001588:	40001400 	.word	0x40001400

0800158c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015ac:	d13a      	bne.n	8001624 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_TIM_MspPostInit+0xa0>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <HAL_TIM_MspPostInit+0xa0>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_TIM_MspPostInit+0xa0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_TIM_MspPostInit+0xa0>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a18      	ldr	r2, [pc, #96]	@ (800162c <HAL_TIM_MspPostInit+0xa0>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <HAL_TIM_MspPostInit+0xa0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMD_Pin;
 80015de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f0:	2301      	movs	r3, #1
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWMD_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	@ (8001630 <HAL_TIM_MspPostInit+0xa4>)
 80015fc:	f002 faa4 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWMG_Pin;
 8001600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWMG_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f002 fa92 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	@ 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0ae      	sub	sp, #184	@ 0xb8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	2288      	movs	r2, #136	@ 0x88
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f006 fb9b 	bl	8007d90 <memset>
  if(huart->Instance==USART2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a46      	ldr	r2, [pc, #280]	@ (8001778 <HAL_UART_MspInit+0x144>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d13c      	bne.n	80016de <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001664:	2302      	movs	r3, #2
 8001666:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fab7 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800167c:	f7ff fe6e 	bl	800135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001680:	4b3e      	ldr	r3, [pc, #248]	@ (800177c <HAL_UART_MspInit+0x148>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	4a3d      	ldr	r2, [pc, #244]	@ (800177c <HAL_UART_MspInit+0x148>)
 8001686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168a:	6593      	str	r3, [r2, #88]	@ 0x58
 800168c:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <HAL_UART_MspInit+0x148>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b38      	ldr	r3, [pc, #224]	@ (800177c <HAL_UART_MspInit+0x148>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169c:	4a37      	ldr	r2, [pc, #220]	@ (800177c <HAL_UART_MspInit+0x148>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <HAL_UART_MspInit+0x148>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016b0:	230c      	movs	r3, #12
 80016b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c8:	2307      	movs	r3, #7
 80016ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d8:	f002 fa36 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016dc:	e048      	b.n	8001770 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a27      	ldr	r2, [pc, #156]	@ (8001780 <HAL_UART_MspInit+0x14c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d143      	bne.n	8001770 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016e8:	2304      	movs	r3, #4
 80016ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fa75 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001700:	f7ff fe2c 	bl	800135c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <HAL_UART_MspInit+0x148>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <HAL_UART_MspInit+0x148>)
 800170a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001710:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <HAL_UART_MspInit+0x148>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_UART_MspInit+0x148>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001720:	4a16      	ldr	r2, [pc, #88]	@ (800177c <HAL_UART_MspInit+0x148>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_UART_MspInit+0x148>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001734:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800174e:	2307      	movs	r3, #7
 8001750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001758:	4619      	mov	r1, r3
 800175a:	480a      	ldr	r0, [pc, #40]	@ (8001784 <HAL_UART_MspInit+0x150>)
 800175c:	f002 f9f4 	bl	8003b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2027      	movs	r0, #39	@ 0x27
 8001766:	f002 f93a 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800176a:	2027      	movs	r0, #39	@ 0x27
 800176c:	f002 f953 	bl	8003a16 <HAL_NVIC_EnableIRQ>
}
 8001770:	bf00      	nop
 8001772:	37b8      	adds	r7, #184	@ 0xb8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40004400 	.word	0x40004400
 800177c:	40021000 	.word	0x40021000
 8001780:	40004800 	.word	0x40004800
 8001784:	48000800 	.word	0x48000800

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <NMI_Handler+0x4>

08001790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <MemManage_Handler+0x4>

080017a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <UsageFault_Handler+0x4>

080017b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017de:	f000 f8f9 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <ADC1_2_IRQHandler+0x10>)
 80017ee:	f000 fe6b 	bl	80024c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000007c 	.word	0x2000007c

080017fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <USART3_IRQHandler+0x10>)
 8001802:	f004 fff5 	bl	80067f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000024c 	.word	0x2000024c

08001810 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BP_Pin);
 8001814:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001818:	f002 fb58 	bl	8003ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <TIM6_DAC_IRQHandler+0x10>)
 8001826:	f004 f8cf 	bl	80059c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000012c 	.word	0x2000012c

08001834 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <TIM7_IRQHandler+0x10>)
 800183a:	f004 f8c5 	bl	80059c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000178 	.word	0x20000178

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f006 fa92 	bl	8007da0 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20018000 	.word	0x20018000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	2000030c 	.word	0x2000030c
 80018b0:	20000460 	.word	0x20000460

080018b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001910 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018dc:	f7ff ffea 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	@ (8001918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <LoopForever+0xe>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001924 <LoopForever+0x16>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001906:	f006 fa51 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190a:	f7fe fe31 	bl	8000570 <main>

0800190e <LoopForever>:

LoopForever:
    b LoopForever
 800190e:	e7fe      	b.n	800190e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001910:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800191c:	080092d0 	.word	0x080092d0
  ldr r2, =_sbss
 8001920:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001924:	2000045c 	.word	0x2000045c

08001928 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC3_IRQHandler>

0800192a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001934:	2003      	movs	r0, #3
 8001936:	f002 f847 	bl	80039c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f80e 	bl	800195c <HAL_InitTick>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	e001      	b.n	8001950 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800194c:	f7ff fd0c 	bl	8001368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001950:	79fb      	ldrb	r3, [r7, #7]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <HAL_InitTick+0x6c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d023      	beq.n	80019b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <HAL_InitTick+0x70>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <HAL_InitTick+0x6c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f002 f853 	bl	8003a32 <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d809      	bhi.n	80019ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f002 f81d 	bl	80039de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a4:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <HAL_InitTick+0x74>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e007      	b.n	80019bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e004      	b.n	80019bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	e001      	b.n	80019bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	20000004 	.word	0x20000004
 80019d0:	20000008 	.word	0x20000008

080019d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	20000310 	.word	0x20000310

080019fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000310 	.word	0x20000310

08001a14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3360      	adds	r3, #96	@ 0x60
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <LL_ADC_SetOffset+0x44>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	03fff000 	.word	0x03fff000

08001ac4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3360      	adds	r3, #96	@ 0x60
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3360      	adds	r3, #96	@ 0x60
 8001b00:	461a      	mov	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3330      	adds	r3, #48	@ 0x30
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	211f      	movs	r1, #31
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	f003 011f 	and.w	r1, r3, #31
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 031f 	and.w	r3, r3, #31
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	431a      	orrs	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b087      	sub	sp, #28
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3314      	adds	r3, #20
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	0e5b      	lsrs	r3, r3, #25
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	4413      	add	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	0d1b      	lsrs	r3, r3, #20
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2107      	movs	r1, #7
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	401a      	ands	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	0d1b      	lsrs	r3, r3, #20
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0318 	and.w	r3, r3, #24
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c44:	40d9      	lsrs	r1, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	400b      	ands	r3, r1
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	0007ffff 	.word	0x0007ffff

08001c68 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	330c      	adds	r3, #12
 8001c78:	4618      	mov	r0, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0d1b      	lsrs	r3, r3, #20
 8001c7e:	f003 0103 	and.w	r1, r3, #3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0201 	and.w	r2, r3, #1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4403      	add	r3, r0
 8001c96:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
 8001ca2:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	401a      	ands	r2, r3
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	400b      	ands	r3, r1
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b087      	sub	sp, #28
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3320      	adds	r3, #32
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	0d1b      	lsrs	r3, r3, #20
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	4413      	add	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	0419      	lsls	r1, r3, #16
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001cfa:	bf00      	nop
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 031f 	and.w	r3, r3, #31
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6093      	str	r3, [r2, #8]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d76:	d101      	bne.n	8001d7c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d9e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dc6:	d101      	bne.n	8001dcc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <LL_ADC_IsEnabled+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_ADC_IsEnabled+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d101      	bne.n	8001e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d101      	bne.n	8001e8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2280      	movs	r2, #128	@ 0x80
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	605a      	str	r2, [r3, #4]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	605a      	str	r2, [r3, #4]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	605a      	str	r2, [r3, #4]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e130      	b.n	800222c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff f9e9 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff feb6 	bl	8001d62 <LL_ADC_IsDeepPowerDownEnabled>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe9c 	bl	8001d3e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fed1 	bl	8001db2 <LL_ADC_IsInternalRegulatorEnabled>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff feb5 	bl	8001d8a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002020:	4b84      	ldr	r3, [pc, #528]	@ (8002234 <HAL_ADC_Init+0x284>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	4a84      	ldr	r2, [pc, #528]	@ (8002238 <HAL_ADC_Init+0x288>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002034:	e002      	b.n	800203c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3b01      	subs	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff feb3 	bl	8001db2 <LL_ADC_IsInternalRegulatorEnabled>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff feec 	bl	8001e50 <LL_ADC_REG_IsConversionOngoing>
 8002078:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80c9 	bne.w	800221a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80c5 	bne.w	800221a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002098:	f043 0202 	orr.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff feac 	bl	8001e02 <LL_ADC_IsEnabled>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d115      	bne.n	80020dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b0:	4862      	ldr	r0, [pc, #392]	@ (800223c <HAL_ADC_Init+0x28c>)
 80020b2:	f7ff fea6 	bl	8001e02 <LL_ADC_IsEnabled>
 80020b6:	4604      	mov	r4, r0
 80020b8:	4861      	ldr	r0, [pc, #388]	@ (8002240 <HAL_ADC_Init+0x290>)
 80020ba:	f7ff fea2 	bl	8001e02 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	431c      	orrs	r4, r3
 80020c2:	4860      	ldr	r0, [pc, #384]	@ (8002244 <HAL_ADC_Init+0x294>)
 80020c4:	f7ff fe9d 	bl	8001e02 <LL_ADC_IsEnabled>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4323      	orrs	r3, r4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4619      	mov	r1, r3
 80020d6:	485c      	ldr	r0, [pc, #368]	@ (8002248 <HAL_ADC_Init+0x298>)
 80020d8:	f7ff fc9c 	bl	8001a14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e5b      	ldrb	r3, [r3, #25]
 80020e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d106      	bne.n	8002118 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	3b01      	subs	r3, #1
 8002110:	045b      	lsls	r3, r3, #17
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d009      	beq.n	8002134 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b44      	ldr	r3, [pc, #272]	@ (800224c <HAL_ADC_Init+0x29c>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	69b9      	ldr	r1, [r7, #24]
 8002144:	430b      	orrs	r3, r1
 8002146:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fe92 	bl	8001e76 <LL_ADC_INJ_IsConversionOngoing>
 8002152:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d13d      	bne.n	80021d6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d13a      	bne.n	80021d6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002164:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800216c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800217c:	f023 0302 	bic.w	r3, r3, #2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	69b9      	ldr	r1, [r7, #24]
 8002186:	430b      	orrs	r3, r1
 8002188:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002190:	2b01      	cmp	r3, #1
 8002192:	d118      	bne.n	80021c6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021b6:	430a      	orrs	r2, r1
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	611a      	str	r2, [r3, #16]
 80021c4:	e007      	b.n	80021d6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10c      	bne.n	80021f8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	f023 010f 	bic.w	r1, r3, #15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f6:	e007      	b.n	8002208 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 020f 	bic.w	r2, r2, #15
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	f023 0303 	bic.w	r3, r3, #3
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	@ 0x54
 8002218:	e007      	b.n	800222a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	f043 0210 	orr.w	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800222a:	7ffb      	ldrb	r3, [r7, #31]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3724      	adds	r7, #36	@ 0x24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd90      	pop	{r4, r7, pc}
 8002234:	20000004 	.word	0x20000004
 8002238:	053e2d63 	.word	0x053e2d63
 800223c:	50040000 	.word	0x50040000
 8002240:	50040100 	.word	0x50040100
 8002244:	50040200 	.word	0x50040200
 8002248:	50040300 	.word	0x50040300
 800224c:	fff0c007 	.word	0xfff0c007

08002250 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002258:	4891      	ldr	r0, [pc, #580]	@ (80024a0 <HAL_ADC_Start_IT+0x250>)
 800225a:	f7ff fd54 	bl	8001d06 <LL_ADC_GetMultimode>
 800225e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fdf3 	bl	8001e50 <LL_ADC_REG_IsConversionOngoing>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 8110 	bne.w	8002492 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Start_IT+0x30>
 800227c:	2302      	movs	r3, #2
 800227e:	e10b      	b.n	8002498 <HAL_ADC_Start_IT+0x248>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 f93f 	bl	800350c <ADC_Enable>
 800228e:	4603      	mov	r3, r0
 8002290:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 80f7 	bne.w	8002488 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7c      	ldr	r2, [pc, #496]	@ (80024a4 <HAL_ADC_Start_IT+0x254>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d002      	beq.n	80022be <HAL_ADC_Start_IT+0x6e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	e000      	b.n	80022c0 <HAL_ADC_Start_IT+0x70>
 80022be:	4b7a      	ldr	r3, [pc, #488]	@ (80024a8 <HAL_ADC_Start_IT+0x258>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d002      	beq.n	80022ce <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f023 0206 	bic.w	r2, r3, #6
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f2:	e002      	b.n	80022fa <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	221c      	movs	r2, #28
 8002300:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 021c 	bic.w	r2, r2, #28
 8002318:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d108      	bne.n	8002334 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0208 	orr.w	r2, r2, #8
 8002330:	605a      	str	r2, [r3, #4]
          break;
 8002332:	e008      	b.n	8002346 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0204 	orr.w	r2, r2, #4
 8002342:	605a      	str	r2, [r3, #4]
          break;
 8002344:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0210 	orr.w	r2, r2, #16
 800235c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a50      	ldr	r2, [pc, #320]	@ (80024a4 <HAL_ADC_Start_IT+0x254>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d002      	beq.n	800236e <HAL_ADC_Start_IT+0x11e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	e000      	b.n	8002370 <HAL_ADC_Start_IT+0x120>
 800236e:	4b4e      	ldr	r3, [pc, #312]	@ (80024a8 <HAL_ADC_Start_IT+0x258>)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	4293      	cmp	r3, r2
 8002376:	d008      	beq.n	800238a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d002      	beq.n	800238a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b09      	cmp	r3, #9
 8002388:	d13a      	bne.n	8002400 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d02d      	beq.n	80023f4 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d110      	bne.n	80023d2 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0220 	bic.w	r2, r2, #32
 80023be:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023ce:	605a      	str	r2, [r3, #4]
              break;
 80023d0:	e010      	b.n	80023f4 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023e0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0220 	orr.w	r2, r2, #32
 80023f0:	605a      	str	r2, [r3, #4]
              break;
 80023f2:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fd15 	bl	8001e28 <LL_ADC_REG_StartConversion>
 80023fe:	e04a      	b.n	8002496 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <HAL_ADC_Start_IT+0x254>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d002      	beq.n	800241c <HAL_ADC_Start_IT+0x1cc>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e000      	b.n	800241e <HAL_ADC_Start_IT+0x1ce>
 800241c:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <HAL_ADC_Start_IT+0x258>)
 800241e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d034      	beq.n	8002496 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002434:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d110      	bne.n	8002466 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0220 	bic.w	r2, r2, #32
 8002452:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002462:	605a      	str	r2, [r3, #4]
              break;
 8002464:	e017      	b.n	8002496 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002474:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	605a      	str	r2, [r3, #4]
              break;
 8002486:	e006      	b.n	8002496 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002490:	e001      	b.n	8002496 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002492:	2302      	movs	r3, #2
 8002494:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002496:	7dfb      	ldrb	r3, [r7, #23]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	50040300 	.word	0x50040300
 80024a4:	50040100 	.word	0x50040100
 80024a8:	50040000 	.word	0x50040000

080024ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e4:	4882      	ldr	r0, [pc, #520]	@ (80026f0 <HAL_ADC_IRQHandler+0x228>)
 80024e6:	f7ff fc0e 	bl	8001d06 <LL_ADC_GetMultimode>
 80024ea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <HAL_ADC_IRQHandler+0x5e>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002510:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f001 f8cb 	bl	80036b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_ADC_IRQHandler+0x72>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8083 	beq.w	800264c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d07d      	beq.n	800264c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002560:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fada 	bl	8001b26 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d062      	beq.n	800263e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5d      	ldr	r2, [pc, #372]	@ (80026f4 <HAL_ADC_IRQHandler+0x22c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d002      	beq.n	8002588 <HAL_ADC_IRQHandler+0xc0>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e000      	b.n	800258a <HAL_ADC_IRQHandler+0xc2>
 8002588:	4b5b      	ldr	r3, [pc, #364]	@ (80026f8 <HAL_ADC_IRQHandler+0x230>)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4293      	cmp	r3, r2
 8002590:	d008      	beq.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d002      	beq.n	80025a4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	d104      	bne.n	80025ae <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	e00c      	b.n	80025c8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a50      	ldr	r2, [pc, #320]	@ (80026f4 <HAL_ADC_IRQHandler+0x22c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d002      	beq.n	80025be <HAL_ADC_IRQHandler+0xf6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_IRQHandler+0xf8>
 80025be:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <HAL_ADC_IRQHandler+0x230>)
 80025c0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d135      	bne.n	800263e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d12e      	bne.n	800263e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fc33 	bl	8001e50 <LL_ADC_REG_IsConversionOngoing>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11a      	bne.n	8002626 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 020c 	bic.w	r2, r2, #12
 80025fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d112      	bne.n	800263e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
 8002624:	e00b      	b.n	800263e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fd12 	bl	8001068 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	220c      	movs	r2, #12
 800264a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_ADC_IRQHandler+0x198>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 809f 	beq.w	80027aa <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8099 	beq.w	80027aa <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fa85 	bl	8001ba4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800269a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fa40 	bl	8001b26 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026a6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <HAL_ADC_IRQHandler+0x22c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d002      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x1f0>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e000      	b.n	80026ba <HAL_ADC_IRQHandler+0x1f2>
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <HAL_ADC_IRQHandler+0x230>)
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	4293      	cmp	r3, r2
 80026c0:	d008      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d002      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b07      	cmp	r3, #7
 80026d2:	d104      	bne.n	80026de <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	e013      	b.n	8002706 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <HAL_ADC_IRQHandler+0x22c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_ADC_IRQHandler+0x234>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e007      	b.n	80026fe <HAL_ADC_IRQHandler+0x236>
 80026ee:	bf00      	nop
 80026f0:	50040300 	.word	0x50040300
 80026f4:	50040100 	.word	0x50040100
 80026f8:	50040000 	.word	0x50040000
 80026fc:	4b7d      	ldr	r3, [pc, #500]	@ (80028f4 <HAL_ADC_IRQHandler+0x42c>)
 80026fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d047      	beq.n	800279c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_ADC_IRQHandler+0x25e>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03f      	beq.n	800279c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d13a      	bne.n	800279c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002730:	2b40      	cmp	r3, #64	@ 0x40
 8002732:	d133      	bne.n	800279c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d12e      	bne.n	800279c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fb97 	bl	8001e76 <LL_ADC_INJ_IsConversionOngoing>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11a      	bne.n	8002784 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800275c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d112      	bne.n	800279c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
 8002782:	e00b      	b.n	800279c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f043 0210 	orr.w	r2, r3, #16
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 ff61 	bl	8003664 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2260      	movs	r2, #96	@ 0x60
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d011      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x310>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00c      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fcca 	bl	8001164 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <HAL_ADC_IRQHandler+0x340>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 ff47 	bl	800368c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <HAL_ADC_IRQHandler+0x370>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002820:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 ff39 	bl	80036a0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	d036      	beq.n	80028b0 <HAL_ADC_IRQHandler+0x3e8>
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d031      	beq.n	80028b0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002854:	2301      	movs	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
 8002858:	e014      	b.n	8002884 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002860:	4825      	ldr	r0, [pc, #148]	@ (80028f8 <HAL_ADC_IRQHandler+0x430>)
 8002862:	f7ff fa5e 	bl	8001d22 <LL_ADC_GetMultiDMATransfer>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800286c:	2301      	movs	r3, #1
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002870:	e008      	b.n	8002884 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002880:	2301      	movs	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	2b01      	cmp	r3, #1
 8002888:	d10e      	bne.n	80028a8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	f043 0202 	orr.w	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f82a 	bl	80028fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2210      	movs	r2, #16
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d018      	beq.n	80028ec <HAL_ADC_IRQHandler+0x424>
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d4:	f043 0208 	orr.w	r2, r3, #8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fec6 	bl	8003678 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	@ 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	50040000 	.word	0x50040000
 80028f8:	50040300 	.word	0x50040300

080028fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0b6      	sub	sp, #216	@ 0xd8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x22>
 800292e:	2302      	movs	r3, #2
 8002930:	e3c9      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x7b6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fa86 	bl	8001e50 <LL_ADC_REG_IsConversionOngoing>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 83aa 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d824      	bhi.n	80029a6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	3b02      	subs	r3, #2
 8002962:	2b03      	cmp	r3, #3
 8002964:	d81b      	bhi.n	800299e <HAL_ADC_ConfigChannel+0x8e>
 8002966:	a201      	add	r2, pc, #4	@ (adr r2, 800296c <HAL_ADC_ConfigChannel+0x5c>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	0800297d 	.word	0x0800297d
 8002970:	08002985 	.word	0x08002985
 8002974:	0800298d 	.word	0x0800298d
 8002978:	08002995 	.word	0x08002995
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800297c:	230c      	movs	r3, #12
 800297e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002982:	e010      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002984:	2312      	movs	r3, #18
 8002986:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800298a:	e00c      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800298c:	2318      	movs	r3, #24
 800298e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002992:	e008      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002994:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800299c:	e003      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800299e:	2306      	movs	r3, #6
 80029a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029a4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80029b4:	f7ff f8ca 	bl	8001b4c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fa47 	bl	8001e50 <LL_ADC_REG_IsConversionOngoing>
 80029c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fa53 	bl	8001e76 <LL_ADC_INJ_IsConversionOngoing>
 80029d0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 81a4 	bne.w	8002d26 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 819f 	bne.w	8002d26 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6819      	ldr	r1, [r3, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	461a      	mov	r2, r3
 80029f6:	f7ff f8e8 	bl	8001bca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d00a      	beq.n	8002a32 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6919      	ldr	r1, [r3, #16]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a2c:	f7ff f826 	bl	8001a7c <LL_ADC_SetOffset>
 8002a30:	e179      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f843 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x14e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f838 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	0e9b      	lsrs	r3, r3, #26
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	e01e      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x18c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f82d 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e004      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1a4>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	e018      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x1d6>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e004      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d106      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fffc 	bl	8001af0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe ffe0 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x214>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe ffd5 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	f003 021f 	and.w	r2, r3, #31
 8002b22:	e01e      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x252>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe ffca 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e004      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x26a>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0e9b      	lsrs	r3, r3, #26
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	e018      	b.n	8002bac <HAL_ADC_ConfigChannel+0x29c>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e004      	b.n	8002bac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d106      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe ff99 	bl	8001af0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ff7d 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x2da>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2102      	movs	r1, #2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe ff72 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	e01e      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x318>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe ff67 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e004      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x330>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	e014      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x35a>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e004      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d106      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2102      	movs	r1, #2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ff3a 	bl	8001af0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2103      	movs	r1, #3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe ff1e 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x398>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2103      	movs	r1, #3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ff13 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	f003 021f 	and.w	r2, r3, #31
 8002ca6:	e017      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x3c8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2103      	movs	r1, #3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ff08 	bl	8001ac4 <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	e003      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x3e0>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	e011      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x404>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002cfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d00:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d106      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2103      	movs	r1, #3
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fee5 	bl	8001af0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f869 	bl	8001e02 <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 8140 	bne.w	8002fb8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f7fe ff6b 	bl	8001c20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4a8f      	ldr	r2, [pc, #572]	@ (8002f8c <HAL_ADC_ConfigChannel+0x67c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	f040 8131 	bne.w	8002fb8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10b      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x46e>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	bf94      	ite	ls
 8002d76:	2301      	movls	r3, #1
 8002d78:	2300      	movhi	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	e019      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x4a2>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e003      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d079      	beq.n	8002eaa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x4c2>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dd0:	e015      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x4ee>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002dea:	2320      	movs	r3, #32
 8002dec:	e003      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	069b      	lsls	r3, r3, #26
 8002dfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x50e>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	e017      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x53e>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e003      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	ea42 0103 	orr.w	r1, r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x564>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	3301      	adds	r3, #1
 8002e66:	f003 021f 	and.w	r2, r3, #31
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	051b      	lsls	r3, r3, #20
 8002e72:	e018      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x596>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	e003      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f003 021f 	and.w	r2, r3, #31
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	e081      	b.n	8002fae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x5b6>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	0e9b      	lsrs	r3, r3, #26
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	069b      	lsls	r3, r3, #26
 8002ec0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ec4:	e015      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x5e2>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ede:	2320      	movs	r3, #32
 8002ee0:	e003      	b.n	8002eea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	069b      	lsls	r3, r3, #26
 8002eee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x602>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0e9b      	lsrs	r3, r3, #26
 8002f04:	3301      	adds	r3, #1
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	e017      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x632>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	61bb      	str	r3, [r7, #24]
  return result;
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e003      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	ea42 0103 	orr.w	r1, r2, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x65e>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f003 021f 	and.w	r2, r3, #31
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	3b1e      	subs	r3, #30
 8002f66:	051b      	lsls	r3, r3, #20
 8002f68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f6c:	e01e      	b.n	8002fac <HAL_ADC_ConfigChannel+0x69c>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	60fb      	str	r3, [r7, #12]
  return result;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e006      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x688>
 8002f8a:	bf00      	nop
 8002f8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f003 021f 	and.w	r2, r3, #31
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b1e      	subs	r3, #30
 8002fa6:	051b      	lsls	r3, r3, #20
 8002fa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fe fe09 	bl	8001bca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b44      	ldr	r3, [pc, #272]	@ (80030d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d07a      	beq.n	80030ba <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fc4:	4843      	ldr	r0, [pc, #268]	@ (80030d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fc6:	f7fe fd4b 	bl	8001a60 <LL_ADC_GetCommonPathInternalCh>
 8002fca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a41      	ldr	r2, [pc, #260]	@ (80030d8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d12c      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d126      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80030dc <HAL_ADC_ConfigChannel+0x7cc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x6e8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80030e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d15d      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ffc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003000:	4619      	mov	r1, r3
 8003002:	4834      	ldr	r0, [pc, #208]	@ (80030d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003004:	f7fe fd19 	bl	8001a3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003008:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	4a36      	ldr	r2, [pc, #216]	@ (80030e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	099b      	lsrs	r3, r3, #6
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003022:	e002      	b.n	800302a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	3b01      	subs	r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f9      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003030:	e040      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2d      	ldr	r2, [pc, #180]	@ (80030ec <HAL_ADC_ConfigChannel+0x7dc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d118      	bne.n	800306e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800303c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d112      	bne.n	800306e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a23      	ldr	r2, [pc, #140]	@ (80030dc <HAL_ADC_ConfigChannel+0x7cc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_ADC_ConfigChannel+0x74c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a22      	ldr	r2, [pc, #136]	@ (80030e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d12d      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800305c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003060:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003064:	4619      	mov	r1, r3
 8003066:	481b      	ldr	r0, [pc, #108]	@ (80030d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003068:	f7fe fce7 	bl	8001a3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800306c:	e024      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d120      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800307c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11a      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <HAL_ADC_ConfigChannel+0x7cc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d115      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800308e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003092:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003096:	4619      	mov	r1, r3
 8003098:	480e      	ldr	r0, [pc, #56]	@ (80030d4 <HAL_ADC_ConfigChannel+0x7c4>)
 800309a:	f7fe fcce 	bl	8001a3a <LL_ADC_SetCommonPathInternalCh>
 800309e:	e00c      	b.n	80030ba <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030b2:	e002      	b.n	80030ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	37d8      	adds	r7, #216	@ 0xd8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	80080000 	.word	0x80080000
 80030d4:	50040300 	.word	0x50040300
 80030d8:	c7520000 	.word	0xc7520000
 80030dc:	50040000 	.word	0x50040000
 80030e0:	50040200 	.word	0x50040200
 80030e4:	20000004 	.word	0x20000004
 80030e8:	053e2d63 	.word	0x053e2d63
 80030ec:	cb840000 	.word	0xcb840000
 80030f0:	80000001 	.word	0x80000001

080030f4 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	@ 0x38
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800310c:	d003      	beq.n	8003116 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003112:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_ADC_AnalogWDGConfig+0x30>
 8003120:	2302      	movs	r3, #2
 8003122:	e1ec      	b.n	80034fe <HAL_ADC_AnalogWDGConfig+0x40a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fe8d 	bl	8001e50 <LL_ADC_REG_IsConversionOngoing>
 8003136:	6338      	str	r0, [r7, #48]	@ 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fe9a 	bl	8001e76 <LL_ADC_INJ_IsConversionOngoing>
 8003142:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 81ca 	bne.w	80034e0 <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 81c6 	bne.w	80034e0 <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a9b      	ldr	r2, [pc, #620]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	f040 80a2 	bne.w	80032a4 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8003168:	d034      	beq.n	80031d4 <HAL_ADC_AnalogWDGConfig+0xe0>
 800316a:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800316e:	d856      	bhi.n	800321e <HAL_ADC_AnalogWDGConfig+0x12a>
 8003170:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003174:	d04b      	beq.n	800320e <HAL_ADC_AnalogWDGConfig+0x11a>
 8003176:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800317a:	d850      	bhi.n	800321e <HAL_ADC_AnalogWDGConfig+0x12a>
 800317c:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8003180:	d01b      	beq.n	80031ba <HAL_ADC_AnalogWDGConfig+0xc6>
 8003182:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8003186:	d84a      	bhi.n	800321e <HAL_ADC_AnalogWDGConfig+0x12a>
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800318c:	d037      	beq.n	80031fe <HAL_ADC_AnalogWDGConfig+0x10a>
 800318e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003192:	d844      	bhi.n	800321e <HAL_ADC_AnalogWDGConfig+0x12a>
 8003194:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003198:	d029      	beq.n	80031ee <HAL_ADC_AnalogWDGConfig+0xfa>
 800319a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800319e:	d13e      	bne.n	800321e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80031ac:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80031b0:	461a      	mov	r2, r3
 80031b2:	4985      	ldr	r1, [pc, #532]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80031b4:	f7fe fd58 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80031b8:	e039      	b.n	800322e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80031c6:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 80031ca:	461a      	mov	r2, r3
 80031cc:	497e      	ldr	r1, [pc, #504]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80031ce:	f7fe fd4b 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80031d2:	e02c      	b.n	800322e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80031e0:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80031e4:	461a      	mov	r2, r3
 80031e6:	4978      	ldr	r1, [pc, #480]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80031e8:	f7fe fd3e 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80031ec:	e01f      	b.n	800322e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a76      	ldr	r2, [pc, #472]	@ (80033cc <HAL_ADC_AnalogWDGConfig+0x2d8>)
 80031f4:	4974      	ldr	r1, [pc, #464]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fd36 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80031fc:	e017      	b.n	800322e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a73      	ldr	r2, [pc, #460]	@ (80033d0 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8003204:	4970      	ldr	r1, [pc, #448]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fd2e 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800320c:	e00f      	b.n	800322e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a70      	ldr	r2, [pc, #448]	@ (80033d4 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8003214:	496c      	ldr	r1, [pc, #432]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fd26 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800321c:	e007      	b.n	800322e <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2200      	movs	r2, #0
 8003224:	4968      	ldr	r1, [pc, #416]	@ (80033c8 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fd1e 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800322c:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800326a:	f7fe fd2a 	bl	8001cc2 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmp_awd_low_threshold_shifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003272:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fe0c 	bl	8001e9c <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	7b1b      	ldrb	r3, [r3, #12]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fe2c 	bl	8001eee <LL_ADC_EnableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8003296:	e12c      	b.n	80034f2 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fe56 	bl	8001f4e <LL_ADC_DisableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80032a2:	e126      	b.n	80034f2 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80032ac:	d01d      	beq.n	80032ea <HAL_ADC_AnalogWDGConfig+0x1f6>
 80032ae:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80032b2:	f200 8093 	bhi.w	80033dc <HAL_ADC_AnalogWDGConfig+0x2e8>
 80032b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032ba:	d07b      	beq.n	80033b4 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80032bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032c0:	f200 808c 	bhi.w	80033dc <HAL_ADC_AnalogWDGConfig+0x2e8>
 80032c4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80032c8:	d00f      	beq.n	80032ea <HAL_ADC_AnalogWDGConfig+0x1f6>
 80032ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80032ce:	f200 8085 	bhi.w	80033dc <HAL_ADC_AnalogWDGConfig+0x2e8>
 80032d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d6:	d06d      	beq.n	80033b4 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032dc:	d87e      	bhi.n	80033dc <HAL_ADC_AnalogWDGConfig+0x2e8>
 80032de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032e2:	d067      	beq.n	80033b4 <HAL_ADC_AnalogWDGConfig+0x2c0>
 80032e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032e8:	d178      	bne.n	80033dc <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3a      	ldr	r2, [pc, #232]	@ (80033d8 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d12f      	bne.n	8003354 <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <HAL_ADC_AnalogWDGConfig+0x21e>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2201      	movs	r2, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	e016      	b.n	8003340 <HAL_ADC_AnalogWDGConfig+0x24c>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	61bb      	str	r3, [r7, #24]
  return result;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e003      	b.n	8003336 <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2201      	movs	r2, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8003352:	e04c      	b.n	80033ee <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR,
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <HAL_ADC_AnalogWDGConfig+0x27e>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2201      	movs	r2, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	e016      	b.n	80033a0 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	60fb      	str	r3, [r7, #12]
  return result;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e003      	b.n	8003396 <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2201      	movs	r2, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80033b2:	e01c      	b.n	80033ee <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80033bc:	4a05      	ldr	r2, [pc, #20]	@ (80033d4 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fe fc52 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80033c4:	e013      	b.n	80033ee <HAL_ADC_AnalogWDGConfig+0x2fa>
 80033c6:	bf00      	nop
 80033c8:	7dc00000 	.word	0x7dc00000
 80033cc:	0087ffff 	.word	0x0087ffff
 80033d0:	0107ffff 	.word	0x0107ffff
 80033d4:	0187ffff 	.word	0x0187ffff
 80033d8:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fe fc3e 	bl	8001c68 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80033ec:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0318 	and.w	r3, r3, #24
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	d00f      	beq.n	800341c <HAL_ADC_AnalogWDGConfig+0x328>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	f1c3 0302 	rsb	r3, r3, #2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	f003 031e 	and.w	r3, r3, #30
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	e002      	b.n	8003422 <HAL_ADC_AnalogWDGConfig+0x32e>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
      tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0318 	and.w	r3, r3, #24
 800342e:	2b18      	cmp	r3, #24
 8003430:	d00f      	beq.n	8003452 <HAL_ADC_AnalogWDGConfig+0x35e>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	f1c3 0302 	rsb	r3, r3, #2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	f003 031e 	and.w	r3, r3, #30
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	e002      	b.n	8003458 <HAL_ADC_AnalogWDGConfig+0x364>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003466:	f7fe fc2c 	bl	8001cc2 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmp_awd_low_threshold_shifted);

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a26      	ldr	r2, [pc, #152]	@ (8003508 <HAL_ADC_AnalogWDGConfig+0x414>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d11a      	bne.n	80034aa <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fd16 	bl	8001eb6 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	7b1b      	ldrb	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fd39 	bl	8001f0e <LL_ADC_EnableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800349c:	e029      	b.n	80034f2 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fd63 	bl	8001f6e <LL_ADC_DisableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80034a8:	e023      	b.n	80034f2 <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fd09 	bl	8001ed2 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	7b1b      	ldrb	r3, [r3, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fd2e 	bl	8001f2e <LL_ADC_EnableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80034d2:	e00e      	b.n	80034f2 <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe fd58 	bl	8001f8e <LL_ADC_DisableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80034de:	e008      	b.n	80034f2 <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3738      	adds	r7, #56	@ 0x38
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	0017ffff 	.word	0x0017ffff

0800350c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003514:	2300      	movs	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe fc70 	bl	8001e02 <LL_ADC_IsEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d169      	bne.n	80035fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	4b36      	ldr	r3, [pc, #216]	@ (8003608 <ADC_Enable+0xfc>)
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	f043 0210 	orr.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e055      	b.n	80035fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fc3f 	bl	8001dda <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800355c:	482b      	ldr	r0, [pc, #172]	@ (800360c <ADC_Enable+0x100>)
 800355e:	f7fe fa7f 	bl	8001a60 <LL_ADC_GetCommonPathInternalCh>
 8003562:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <ADC_Enable+0x104>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	4a28      	ldr	r2, [pc, #160]	@ (8003614 <ADC_Enable+0x108>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003586:	e002      	b.n	800358e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3b01      	subs	r3, #1
 800358c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f9      	bne.n	8003588 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003594:	f7fe fa32 	bl	80019fc <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800359a:	e028      	b.n	80035ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fc2e 	bl	8001e02 <LL_ADC_IsEnabled>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fc12 	bl	8001dda <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035b6:	f7fe fa21 	bl	80019fc <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d914      	bls.n	80035ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d00d      	beq.n	80035ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	f043 0210 	orr.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e007      	b.n	80035fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d1cf      	bne.n	800359c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	8000003f 	.word	0x8000003f
 800360c:	50040300 	.word	0x50040300
 8003610:	20000004 	.word	0x20000004
 8003614:	053e2d63 	.word	0x053e2d63

08003618 <LL_ADC_IsEnabled>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <LL_ADC_IsEnabled+0x18>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <LL_ADC_IsEnabled+0x1a>
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_ADC_REG_IsConversionOngoing>:
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b04      	cmp	r3, #4
 8003650:	d101      	bne.n	8003656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b09f      	sub	sp, #124	@ 0x7c
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e093      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036ee:	2300      	movs	r3, #0
 80036f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036f2:	2300      	movs	r3, #0
 80036f4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a47      	ldr	r2, [pc, #284]	@ (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d102      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003700:	4b46      	ldr	r3, [pc, #280]	@ (800381c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	e001      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e072      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff87 	bl	800363e <LL_ADC_REG_IsConversionOngoing>
 8003730:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff81 	bl	800363e <LL_ADC_REG_IsConversionOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d154      	bne.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003744:	2b00      	cmp	r3, #0
 8003746:	d151      	bne.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003748:	4b35      	ldr	r3, [pc, #212]	@ (8003820 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800374a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02c      	beq.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003766:	035b      	lsls	r3, r3, #13
 8003768:	430b      	orrs	r3, r1
 800376a:	431a      	orrs	r2, r3
 800376c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800376e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003770:	4829      	ldr	r0, [pc, #164]	@ (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003772:	f7ff ff51 	bl	8003618 <LL_ADC_IsEnabled>
 8003776:	4604      	mov	r4, r0
 8003778:	4828      	ldr	r0, [pc, #160]	@ (800381c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800377a:	f7ff ff4d 	bl	8003618 <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	431c      	orrs	r4, r3
 8003782:	4828      	ldr	r0, [pc, #160]	@ (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003784:	f7ff ff48 	bl	8003618 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	4323      	orrs	r3, r4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d137      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003798:	f023 030f 	bic.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	6811      	ldr	r1, [r2, #0]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6892      	ldr	r2, [r2, #8]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037aa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037ac:	e028      	b.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ba:	4817      	ldr	r0, [pc, #92]	@ (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037bc:	f7ff ff2c 	bl	8003618 <LL_ADC_IsEnabled>
 80037c0:	4604      	mov	r4, r0
 80037c2:	4816      	ldr	r0, [pc, #88]	@ (800381c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037c4:	f7ff ff28 	bl	8003618 <LL_ADC_IsEnabled>
 80037c8:	4603      	mov	r3, r0
 80037ca:	431c      	orrs	r4, r3
 80037cc:	4815      	ldr	r0, [pc, #84]	@ (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037ce:	f7ff ff23 	bl	8003618 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4323      	orrs	r3, r4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d112      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037e2:	f023 030f 	bic.w	r3, r3, #15
 80037e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037ea:	e009      	b.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80037fe:	e000      	b.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003800:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800380a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800380e:	4618      	mov	r0, r3
 8003810:	377c      	adds	r7, #124	@ 0x7c
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}
 8003816:	bf00      	nop
 8003818:	50040000 	.word	0x50040000
 800381c:	50040100 	.word	0x50040100
 8003820:	50040300 	.word	0x50040300
 8003824:	50040200 	.word	0x50040200

08003828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003838:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <__NVIC_SetPriorityGrouping+0x44>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003844:	4013      	ands	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385a:	4a04      	ldr	r2, [pc, #16]	@ (800386c <__NVIC_SetPriorityGrouping+0x44>)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	60d3      	str	r3, [r2, #12]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <__NVIC_GetPriorityGrouping+0x18>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f003 0307 	and.w	r3, r3, #7
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	2b00      	cmp	r3, #0
 800389c:	db0b      	blt.n	80038b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	f003 021f 	and.w	r2, r3, #31
 80038a4:	4907      	ldr	r1, [pc, #28]	@ (80038c4 <__NVIC_EnableIRQ+0x38>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2001      	movs	r0, #1
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000e100 	.word	0xe000e100

080038c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	db0a      	blt.n	80038f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	490c      	ldr	r1, [pc, #48]	@ (8003914 <__NVIC_SetPriority+0x4c>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	0112      	lsls	r2, r2, #4
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	440b      	add	r3, r1
 80038ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f0:	e00a      	b.n	8003908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4908      	ldr	r1, [pc, #32]	@ (8003918 <__NVIC_SetPriority+0x50>)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3b04      	subs	r3, #4
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	440b      	add	r3, r1
 8003906:	761a      	strb	r2, [r3, #24]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000e100 	.word	0xe000e100
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	@ 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f1c3 0307 	rsb	r3, r3, #7
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf28      	it	cs
 800393a:	2304      	movcs	r3, #4
 800393c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3304      	adds	r3, #4
 8003942:	2b06      	cmp	r3, #6
 8003944:	d902      	bls.n	800394c <NVIC_EncodePriority+0x30>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3b03      	subs	r3, #3
 800394a:	e000      	b.n	800394e <NVIC_EncodePriority+0x32>
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	401a      	ands	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43d9      	mvns	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	4313      	orrs	r3, r2
         );
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	@ 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003994:	d301      	bcc.n	800399a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003996:	2301      	movs	r3, #1
 8003998:	e00f      	b.n	80039ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399a:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <SysTick_Config+0x40>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a2:	210f      	movs	r1, #15
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	f7ff ff8e 	bl	80038c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <SysTick_Config+0x40>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b2:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <SysTick_Config+0x40>)
 80039b4:	2207      	movs	r2, #7
 80039b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	e000e010 	.word	0xe000e010

080039c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff29 	bl	8003828 <__NVIC_SetPriorityGrouping>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	4603      	mov	r3, r0
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039f0:	f7ff ff3e 	bl	8003870 <__NVIC_GetPriorityGrouping>
 80039f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7ff ff8e 	bl	800391c <NVIC_EncodePriority>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff5d 	bl	80038c8 <__NVIC_SetPriority>
}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff31 	bl	800388c <__NVIC_EnableIRQ>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ffa2 	bl	8003984 <SysTick_Config>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d008      	beq.n	8003a74 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2204      	movs	r2, #4
 8003a66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e022      	b.n	8003aba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 020e 	bic.w	r2, r2, #14
 8003a82:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	f003 021c 	and.w	r2, r3, #28
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d005      	beq.n	8003aea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e029      	b.n	8003b3e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 020e 	bic.w	r2, r2, #14
 8003af8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f003 021c 	and.w	r2, r3, #28
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
    }
  }
  return status;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b56:	e17f      	b.n	8003e58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	4013      	ands	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8171 	beq.w	8003e52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d005      	beq.n	8003b88 <HAL_GPIO_Init+0x40>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d130      	bne.n	8003bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 0201 	and.w	r2, r3, #1
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d118      	bne.n	8003c28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f003 0201 	and.w	r2, r3, #1
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d017      	beq.n	8003c64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d123      	bne.n	8003cb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	08da      	lsrs	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3208      	adds	r2, #8
 8003c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	220f      	movs	r2, #15
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	6939      	ldr	r1, [r7, #16]
 8003cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0203 	and.w	r2, r3, #3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80ac 	beq.w	8003e52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8003e78 <HAL_GPIO_Init+0x330>)
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfe:	4a5e      	ldr	r2, [pc, #376]	@ (8003e78 <HAL_GPIO_Init+0x330>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d06:	4b5c      	ldr	r3, [pc, #368]	@ (8003e78 <HAL_GPIO_Init+0x330>)
 8003d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d12:	4a5a      	ldr	r2, [pc, #360]	@ (8003e7c <HAL_GPIO_Init+0x334>)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	220f      	movs	r2, #15
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d3c:	d025      	beq.n	8003d8a <HAL_GPIO_Init+0x242>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4f      	ldr	r2, [pc, #316]	@ (8003e80 <HAL_GPIO_Init+0x338>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <HAL_GPIO_Init+0x23e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4e      	ldr	r2, [pc, #312]	@ (8003e84 <HAL_GPIO_Init+0x33c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d019      	beq.n	8003d82 <HAL_GPIO_Init+0x23a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4d      	ldr	r2, [pc, #308]	@ (8003e88 <HAL_GPIO_Init+0x340>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_GPIO_Init+0x236>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a4c      	ldr	r2, [pc, #304]	@ (8003e8c <HAL_GPIO_Init+0x344>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00d      	beq.n	8003d7a <HAL_GPIO_Init+0x232>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a4b      	ldr	r2, [pc, #300]	@ (8003e90 <HAL_GPIO_Init+0x348>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <HAL_GPIO_Init+0x22e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4a      	ldr	r2, [pc, #296]	@ (8003e94 <HAL_GPIO_Init+0x34c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_GPIO_Init+0x22a>
 8003d6e:	2306      	movs	r3, #6
 8003d70:	e00c      	b.n	8003d8c <HAL_GPIO_Init+0x244>
 8003d72:	2307      	movs	r3, #7
 8003d74:	e00a      	b.n	8003d8c <HAL_GPIO_Init+0x244>
 8003d76:	2305      	movs	r3, #5
 8003d78:	e008      	b.n	8003d8c <HAL_GPIO_Init+0x244>
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	e006      	b.n	8003d8c <HAL_GPIO_Init+0x244>
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e004      	b.n	8003d8c <HAL_GPIO_Init+0x244>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e002      	b.n	8003d8c <HAL_GPIO_Init+0x244>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_GPIO_Init+0x244>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	f002 0203 	and.w	r2, r2, #3
 8003d92:	0092      	lsls	r2, r2, #2
 8003d94:	4093      	lsls	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d9c:	4937      	ldr	r1, [pc, #220]	@ (8003e7c <HAL_GPIO_Init+0x334>)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	3302      	adds	r3, #2
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003daa:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dce:	4a32      	ldr	r2, [pc, #200]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dd4:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dfe:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e22:	4a1d      	ldr	r2, [pc, #116]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e4c:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <HAL_GPIO_Init+0x350>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3301      	adds	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f47f ae78 	bne.w	8003b58 <HAL_GPIO_Init+0x10>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	48000400 	.word	0x48000400
 8003e84:	48000800 	.word	0x48000800
 8003e88:	48000c00 	.word	0x48000c00
 8003e8c:	48001000 	.word	0x48001000
 8003e90:	48001400 	.word	0x48001400
 8003e94:	48001800 	.word	0x48001800
 8003e98:	40010400 	.word	0x40010400

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eac:	787b      	ldrb	r3, [r7, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eb8:	e002      	b.n	8003ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ee2:	4a05      	ldr	r2, [pc, #20]	@ (8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd f948 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40010400 	.word	0x40010400

08003efc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f00:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0a:	6013      	str	r3, [r2, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40007000 	.word	0x40007000

08003f1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f20:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40007000 	.word	0x40007000

08003f38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f46:	d130      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f48:	4b23      	ldr	r3, [pc, #140]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f54:	d038      	beq.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f56:	4b20      	ldr	r3, [pc, #128]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f66:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2232      	movs	r2, #50	@ 0x32
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0c9b      	lsrs	r3, r3, #18
 8003f78:	3301      	adds	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f7c:	e002      	b.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f84:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f90:	d102      	bne.n	8003f98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f2      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f98:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa4:	d110      	bne.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e00f      	b.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003faa:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb6:	d007      	beq.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fb8:	4b07      	ldr	r3, [pc, #28]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fc0:	4a05      	ldr	r2, [pc, #20]	@ (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	20000004 	.word	0x20000004
 8003fe0:	431bde83 	.word	0x431bde83

08003fe4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e3ca      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff6:	4b97      	ldr	r3, [pc, #604]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004000:	4b94      	ldr	r3, [pc, #592]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80e4 	beq.w	80041e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_RCC_OscConfig+0x4a>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b0c      	cmp	r3, #12
 8004022:	f040 808b 	bne.w	800413c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 8087 	bne.w	800413c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800402e:	4b89      	ldr	r3, [pc, #548]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x62>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e3a2      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	4b82      	ldr	r3, [pc, #520]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <HAL_RCC_OscConfig+0x7c>
 8004056:	4b7f      	ldr	r3, [pc, #508]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800405e:	e005      	b.n	800406c <HAL_RCC_OscConfig+0x88>
 8004060:	4b7c      	ldr	r3, [pc, #496]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800406c:	4293      	cmp	r3, r2
 800406e:	d223      	bcs.n	80040b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fd55 	bl	8004b24 <RCC_SetFlashLatencyFromMSIRange>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e383      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004084:	4b73      	ldr	r3, [pc, #460]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a72      	ldr	r2, [pc, #456]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800408a:	f043 0308 	orr.w	r3, r3, #8
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b70      	ldr	r3, [pc, #448]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	496d      	ldr	r1, [pc, #436]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	4968      	ldr	r1, [pc, #416]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
 80040b6:	e025      	b.n	8004104 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040b8:	4b66      	ldr	r3, [pc, #408]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a65      	ldr	r2, [pc, #404]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040be:	f043 0308 	orr.w	r3, r3, #8
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b63      	ldr	r3, [pc, #396]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	4960      	ldr	r1, [pc, #384]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	495b      	ldr	r1, [pc, #364]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fd15 	bl	8004b24 <RCC_SetFlashLatencyFromMSIRange>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e343      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004104:	f000 fc4a 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b52      	ldr	r3, [pc, #328]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	4950      	ldr	r1, [pc, #320]	@ (8004258 <HAL_RCC_OscConfig+0x274>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	4a4e      	ldr	r2, [pc, #312]	@ (800425c <HAL_RCC_OscConfig+0x278>)
 8004122:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004124:	4b4e      	ldr	r3, [pc, #312]	@ (8004260 <HAL_RCC_OscConfig+0x27c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd fc17 	bl	800195c <HAL_InitTick>
 800412e:	4603      	mov	r3, r0
 8004130:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d052      	beq.n	80041de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	e327      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d032      	beq.n	80041aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004144:	4b43      	ldr	r3, [pc, #268]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a42      	ldr	r2, [pc, #264]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004150:	f7fd fc54 	bl	80019fc <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004158:	f7fd fc50 	bl	80019fc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e310      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416a:	4b3a      	ldr	r3, [pc, #232]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004176:	4b37      	ldr	r3, [pc, #220]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a36      	ldr	r2, [pc, #216]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800417c:	f043 0308 	orr.w	r3, r3, #8
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b34      	ldr	r3, [pc, #208]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4931      	ldr	r1, [pc, #196]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004194:	4b2f      	ldr	r3, [pc, #188]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	492c      	ldr	r1, [pc, #176]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
 80041a8:	e01a      	b.n	80041e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a29      	ldr	r2, [pc, #164]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041b6:	f7fd fc21 	bl	80019fc <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041be:	f7fd fc1d 	bl	80019fc <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e2dd      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d0:	4b20      	ldr	r3, [pc, #128]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x1da>
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d074      	beq.n	80042d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x21a>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d10e      	bne.n	8004216 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d10b      	bne.n	8004216 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d064      	beq.n	80042d4 <HAL_RCC_OscConfig+0x2f0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d160      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e2ba      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x24a>
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0b      	ldr	r2, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e026      	b.n	800427c <HAL_RCC_OscConfig+0x298>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004236:	d115      	bne.n	8004264 <HAL_RCC_OscConfig+0x280>
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a05      	ldr	r2, [pc, #20]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800423e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b03      	ldr	r3, [pc, #12]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a02      	ldr	r2, [pc, #8]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800424a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	e014      	b.n	800427c <HAL_RCC_OscConfig+0x298>
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	08009140 	.word	0x08009140
 800425c:	20000004 	.word	0x20000004
 8004260:	20000008 	.word	0x20000008
 8004264:	4ba0      	ldr	r3, [pc, #640]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a9f      	ldr	r2, [pc, #636]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b9d      	ldr	r3, [pc, #628]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a9c      	ldr	r2, [pc, #624]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd fbba 	bl	80019fc <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fbb6 	bl	80019fc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	@ 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e276      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429e:	4b92      	ldr	r3, [pc, #584]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x2a8>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fba6 	bl	80019fc <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd fba2 	bl	80019fc <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	@ 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e262      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c6:	4b88      	ldr	r3, [pc, #544]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2d0>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d060      	beq.n	80043a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_OscConfig+0x310>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d119      	bne.n	8004322 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d116      	bne.n	8004322 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f4:	4b7c      	ldr	r3, [pc, #496]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_OscConfig+0x328>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e23f      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430c:	4b76      	ldr	r3, [pc, #472]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4973      	ldr	r1, [pc, #460]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004320:	e040      	b.n	80043a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d023      	beq.n	8004372 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800432a:	4b6f      	ldr	r3, [pc, #444]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6e      	ldr	r2, [pc, #440]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fb61 	bl	80019fc <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433e:	f7fd fb5d 	bl	80019fc <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e21d      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004350:	4b65      	ldr	r3, [pc, #404]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b62      	ldr	r3, [pc, #392]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	495f      	ldr	r1, [pc, #380]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
 8004370:	e018      	b.n	80043a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b5d      	ldr	r3, [pc, #372]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a5c      	ldr	r2, [pc, #368]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800437c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7fd fb3d 	bl	80019fc <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fd fb39 	bl	80019fc <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1f9      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004398:	4b53      	ldr	r3, [pc, #332]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03c      	beq.n	800442a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b8:	4b4b      	ldr	r3, [pc, #300]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043be:	4a4a      	ldr	r2, [pc, #296]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fd fb18 	bl	80019fc <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d0:	f7fd fb14 	bl	80019fc <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e1d4      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e2:	4b41      	ldr	r3, [pc, #260]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ef      	beq.n	80043d0 <HAL_RCC_OscConfig+0x3ec>
 80043f0:	e01b      	b.n	800442a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f2:	4b3d      	ldr	r3, [pc, #244]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f8:	4a3b      	ldr	r2, [pc, #236]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fafb 	bl	80019fc <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440a:	f7fd faf7 	bl	80019fc <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1b7      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441c:	4b32      	ldr	r3, [pc, #200]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ef      	bne.n	800440a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a6 	beq.w	8004584 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004438:	2300      	movs	r3, #0
 800443a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800443c:	4b2a      	ldr	r3, [pc, #168]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004448:	4b27      	ldr	r3, [pc, #156]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444c:	4a26      	ldr	r2, [pc, #152]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	@ 0x58
 8004454:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004460:	2301      	movs	r3, #1
 8004462:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004464:	4b21      	ldr	r3, [pc, #132]	@ (80044ec <HAL_RCC_OscConfig+0x508>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d118      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004470:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <HAL_RCC_OscConfig+0x508>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1d      	ldr	r2, [pc, #116]	@ (80044ec <HAL_RCC_OscConfig+0x508>)
 8004476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800447a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447c:	f7fd fabe 	bl	80019fc <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004484:	f7fd faba 	bl	80019fc <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e17a      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <HAL_RCC_OscConfig+0x508>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d108      	bne.n	80044bc <HAL_RCC_OscConfig+0x4d8>
 80044aa:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b0:	4a0d      	ldr	r2, [pc, #52]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ba:	e029      	b.n	8004510 <HAL_RCC_OscConfig+0x52c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d115      	bne.n	80044f0 <HAL_RCC_OscConfig+0x50c>
 80044c4:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ca:	4a07      	ldr	r2, [pc, #28]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044d4:	4b04      	ldr	r3, [pc, #16]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044da:	4a03      	ldr	r2, [pc, #12]	@ (80044e8 <HAL_RCC_OscConfig+0x504>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044e4:	e014      	b.n	8004510 <HAL_RCC_OscConfig+0x52c>
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40007000 	.word	0x40007000
 80044f0:	4b9c      	ldr	r3, [pc, #624]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f6:	4a9b      	ldr	r2, [pc, #620]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004500:	4b98      	ldr	r3, [pc, #608]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a97      	ldr	r2, [pc, #604]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d016      	beq.n	8004546 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fd fa70 	bl	80019fc <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd fa6c 	bl	80019fc <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e12a      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	4b8b      	ldr	r3, [pc, #556]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ed      	beq.n	8004520 <HAL_RCC_OscConfig+0x53c>
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fd fa59 	bl	80019fc <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800454c:	e00a      	b.n	8004564 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fd fa55 	bl	80019fc <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e113      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004564:	4b7f      	ldr	r3, [pc, #508]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ed      	bne.n	800454e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004572:	7ffb      	ldrb	r3, [r7, #31]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004578:	4b7a      	ldr	r3, [pc, #488]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	4a79      	ldr	r2, [pc, #484]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004582:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80fe 	beq.w	800478a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	2b02      	cmp	r3, #2
 8004594:	f040 80d0 	bne.w	8004738 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004598:	4b72      	ldr	r3, [pc, #456]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f003 0203 	and.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d130      	bne.n	800460e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	3b01      	subs	r3, #1
 80045b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d127      	bne.n	800460e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d11f      	bne.n	800460e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045d8:	2a07      	cmp	r2, #7
 80045da:	bf14      	ite	ne
 80045dc:	2201      	movne	r2, #1
 80045de:	2200      	moveq	r2, #0
 80045e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d113      	bne.n	800460e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	3b01      	subs	r3, #1
 80045f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d109      	bne.n	800460e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	3b01      	subs	r3, #1
 8004608:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d06e      	beq.n	80046ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d069      	beq.n	80046e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004614:	4b53      	ldr	r3, [pc, #332]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004620:	4b50      	ldr	r3, [pc, #320]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0ad      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004630:	4b4c      	ldr	r3, [pc, #304]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a4b      	ldr	r2, [pc, #300]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800463a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800463c:	f7fd f9de 	bl	80019fc <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd f9da 	bl	80019fc <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e09a      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004656:	4b43      	ldr	r3, [pc, #268]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004662:	4b40      	ldr	r3, [pc, #256]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	4b40      	ldr	r3, [pc, #256]	@ (8004768 <HAL_RCC_OscConfig+0x784>)
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004672:	3a01      	subs	r2, #1
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	4311      	orrs	r1, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800467c:	0212      	lsls	r2, r2, #8
 800467e:	4311      	orrs	r1, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004684:	0852      	lsrs	r2, r2, #1
 8004686:	3a01      	subs	r2, #1
 8004688:	0552      	lsls	r2, r2, #21
 800468a:	4311      	orrs	r1, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004690:	0852      	lsrs	r2, r2, #1
 8004692:	3a01      	subs	r2, #1
 8004694:	0652      	lsls	r2, r2, #25
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800469c:	0912      	lsrs	r2, r2, #4
 800469e:	0452      	lsls	r2, r2, #17
 80046a0:	430a      	orrs	r2, r1
 80046a2:	4930      	ldr	r1, [pc, #192]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c0:	f7fd f99c 	bl	80019fc <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd f998 	bl	80019fc <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e058      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046da:	4b22      	ldr	r3, [pc, #136]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046e6:	e050      	b.n	800478a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e04f      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d148      	bne.n	800478a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 80046fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004702:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004704:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a16      	ldr	r2, [pc, #88]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 800470a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800470e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004710:	f7fd f974 	bl	80019fc <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004718:	f7fd f970 	bl	80019fc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e030      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472a:	4b0e      	ldr	r3, [pc, #56]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x734>
 8004736:	e028      	b.n	800478a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d023      	beq.n	8004786 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a08      	ldr	r2, [pc, #32]	@ (8004764 <HAL_RCC_OscConfig+0x780>)
 8004744:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd f957 	bl	80019fc <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004750:	e00c      	b.n	800476c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004752:	f7fd f953 	bl	80019fc <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d905      	bls.n	800476c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e013      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
 8004764:	40021000 	.word	0x40021000
 8004768:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476c:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_RCC_OscConfig+0x7b0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ec      	bne.n	8004752 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004778:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCC_OscConfig+0x7b0>)
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	4905      	ldr	r1, [pc, #20]	@ (8004794 <HAL_RCC_OscConfig+0x7b0>)
 800477e:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <HAL_RCC_OscConfig+0x7b4>)
 8004780:	4013      	ands	r3, r2
 8004782:	60cb      	str	r3, [r1, #12]
 8004784:	e001      	b.n	800478a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	feeefffc 	.word	0xfeeefffc

0800479c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0e7      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b75      	ldr	r3, [pc, #468]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b72      	ldr	r3, [pc, #456]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 0207 	bic.w	r2, r3, #7
 80047c6:	4970      	ldr	r1, [pc, #448]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0cf      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	4b66      	ldr	r3, [pc, #408]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d908      	bls.n	800480e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047fc:	4b63      	ldr	r3, [pc, #396]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4960      	ldr	r1, [pc, #384]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04c      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004822:	4b5a      	ldr	r3, [pc, #360]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d121      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0a6      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800483a:	4b54      	ldr	r3, [pc, #336]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e09a      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004852:	4b4e      	ldr	r3, [pc, #312]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e08e      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004862:	4b4a      	ldr	r3, [pc, #296]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e086      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004872:	4b46      	ldr	r3, [pc, #280]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4943      	ldr	r1, [pc, #268]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fd f8ba 	bl	80019fc <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fd f8b6 	bl	80019fc <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e06e      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	4b3a      	ldr	r3, [pc, #232]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 020c 	and.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1eb      	bne.n	800488c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4b31      	ldr	r3, [pc, #196]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d208      	bcs.n	80048e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b2e      	ldr	r3, [pc, #184]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	492b      	ldr	r1, [pc, #172]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048e2:	4b29      	ldr	r3, [pc, #164]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d210      	bcs.n	8004912 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f0:	4b25      	ldr	r3, [pc, #148]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 0207 	bic.w	r2, r3, #7
 80048f8:	4923      	ldr	r1, [pc, #140]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004900:	4b21      	ldr	r3, [pc, #132]	@ (8004988 <HAL_RCC_ClockConfig+0x1ec>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e036      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491e:	4b1b      	ldr	r3, [pc, #108]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	4918      	ldr	r1, [pc, #96]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800493c:	4b13      	ldr	r3, [pc, #76]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4910      	ldr	r1, [pc, #64]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004950:	f000 f824 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b0d      	ldr	r3, [pc, #52]	@ (800498c <HAL_RCC_ClockConfig+0x1f0>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	490b      	ldr	r1, [pc, #44]	@ (8004990 <HAL_RCC_ClockConfig+0x1f4>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	4a09      	ldr	r2, [pc, #36]	@ (8004994 <HAL_RCC_ClockConfig+0x1f8>)
 800496e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004970:	4b09      	ldr	r3, [pc, #36]	@ (8004998 <HAL_RCC_ClockConfig+0x1fc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fff1 	bl	800195c <HAL_InitTick>
 800497a:	4603      	mov	r3, r0
 800497c:	72fb      	strb	r3, [r7, #11]

  return status;
 800497e:	7afb      	ldrb	r3, [r7, #11]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40022000 	.word	0x40022000
 800498c:	40021000 	.word	0x40021000
 8004990:	08009140 	.word	0x08009140
 8004994:	20000004 	.word	0x20000004
 8004998:	20000008 	.word	0x20000008

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	@ 0x24
 80049a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049aa:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b4:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x34>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d121      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d11e      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049d0:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049dc:	4b31      	ldr	r3, [pc, #196]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e005      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049ec:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049f8:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10d      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d102      	bne.n	8004a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a14:	4b25      	ldr	r3, [pc, #148]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e004      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a20:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d134      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d003      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0xac>
 8004a40:	e005      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a42:	4b1a      	ldr	r3, [pc, #104]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x110>)
 8004a44:	617b      	str	r3, [r7, #20]
      break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a48:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	617b      	str	r3, [r7, #20]
      break;
 8004a52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	fb03 f202 	mul.w	r2, r3, r2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	0e5b      	lsrs	r3, r3, #25
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	3301      	adds	r3, #1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a94:	69bb      	ldr	r3, [r7, #24]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	@ 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08009158 	.word	0x08009158
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	@ (8004ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000004 	.word	0x20000004

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ad0:	f7ff fff0 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4904      	ldr	r1, [pc, #16]	@ (8004af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	08009150 	.word	0x08009150

08004af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004afc:	f7ff ffda 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0adb      	lsrs	r3, r3, #11
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4904      	ldr	r1, [pc, #16]	@ (8004b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	08009150 	.word	0x08009150

08004b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b30:	4b2a      	ldr	r3, [pc, #168]	@ (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b3c:	f7ff f9ee 	bl	8003f1c <HAL_PWREx_GetVoltageRange>
 8004b40:	6178      	str	r0, [r7, #20]
 8004b42:	e014      	b.n	8004b6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b44:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b48:	4a24      	ldr	r2, [pc, #144]	@ (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b50:	4b22      	ldr	r3, [pc, #136]	@ (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b5c:	f7ff f9de 	bl	8003f1c <HAL_PWREx_GetVoltageRange>
 8004b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b62:	4b1e      	ldr	r3, [pc, #120]	@ (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b66:	4a1d      	ldr	r2, [pc, #116]	@ (8004bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b74:	d10b      	bne.n	8004b8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b80      	cmp	r3, #128	@ 0x80
 8004b7a:	d919      	bls.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b80:	d902      	bls.n	8004b88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b82:	2302      	movs	r3, #2
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e013      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b88:	2301      	movs	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	e010      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b80      	cmp	r3, #128	@ 0x80
 8004b92:	d902      	bls.n	8004b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b94:	2303      	movs	r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	e00a      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b80      	cmp	r3, #128	@ 0x80
 8004b9e:	d102      	bne.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e004      	b.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b70      	cmp	r3, #112	@ 0x70
 8004baa:	d101      	bne.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bac:	2301      	movs	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 0207 	bic.w	r2, r3, #7
 8004bb8:	4909      	ldr	r1, [pc, #36]	@ (8004be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bc0:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d001      	beq.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40022000 	.word	0x40022000

08004be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bec:	2300      	movs	r3, #0
 8004bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d041      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c08:	d02a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c0e:	d824      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c14:	d008      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c1a:	d81e      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c24:	d010      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c26:	e018      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c28:	4b86      	ldr	r3, [pc, #536]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a85      	ldr	r2, [pc, #532]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c34:	e015      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 facb 	bl	80051d8 <RCCEx_PLLSAI1_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c46:	e00c      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3320      	adds	r3, #32
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fbb6 	bl	80053c0 <RCCEx_PLLSAI2_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c58:	e003      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c5e:	e000      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c68:	4b76      	ldr	r3, [pc, #472]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c76:	4973      	ldr	r1, [pc, #460]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004c7e:	e001      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d041      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c98:	d02a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c9e:	d824      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004caa:	d81e      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cb4:	d010      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cb6:	e018      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cb8:	4b62      	ldr	r3, [pc, #392]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a61      	ldr	r2, [pc, #388]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cc4:	e015      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fa83 	bl	80051d8 <RCCEx_PLLSAI1_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cd6:	e00c      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3320      	adds	r3, #32
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fb6e 	bl	80053c0 <RCCEx_PLLSAI2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	74fb      	strb	r3, [r7, #19]
      break;
 8004cee:	e000      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cf8:	4b52      	ldr	r3, [pc, #328]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d06:	494f      	ldr	r1, [pc, #316]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d0e:	e001      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80a0 	beq.w	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d26:	4b47      	ldr	r3, [pc, #284]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00d      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	4a40      	ldr	r2, [pc, #256]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d48:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d54:	2301      	movs	r3, #1
 8004d56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d58:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d64:	f7fc fe4a 	bl	80019fc <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d6a:	e009      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6c:	f7fc fe46 	bl	80019fc <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d902      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d7e:	e005      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d80:	4b31      	ldr	r3, [pc, #196]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ef      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d8c:	7cfb      	ldrb	r3, [r7, #19]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d15c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d92:	4b2c      	ldr	r3, [pc, #176]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01f      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d019      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004db0:	4b24      	ldr	r3, [pc, #144]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dbc:	4b21      	ldr	r3, [pc, #132]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc2:	4a20      	ldr	r2, [pc, #128]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ddc:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fc fe05 	bl	80019fc <HAL_GetTick>
 8004df2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df4:	e00b      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fc fe01 	bl	80019fc <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d902      	bls.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	74fb      	strb	r3, [r7, #19]
            break;
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ec      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e22:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	4904      	ldr	r1, [pc, #16]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e3a:	e009      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	74bb      	strb	r3, [r7, #18]
 8004e40:	e006      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e50:	7c7b      	ldrb	r3, [r7, #17]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d105      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e56:	4b9e      	ldr	r3, [pc, #632]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5a:	4a9d      	ldr	r2, [pc, #628]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e6e:	4b98      	ldr	r3, [pc, #608]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	f023 0203 	bic.w	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7c:	4994      	ldr	r1, [pc, #592]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e90:	4b8f      	ldr	r3, [pc, #572]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	f023 020c 	bic.w	r2, r3, #12
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9e:	498c      	ldr	r1, [pc, #560]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eb2:	4b87      	ldr	r3, [pc, #540]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	4983      	ldr	r1, [pc, #524]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee2:	497b      	ldr	r1, [pc, #492]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f04:	4972      	ldr	r1, [pc, #456]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f18:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f26:	496a      	ldr	r1, [pc, #424]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3a:	4b65      	ldr	r3, [pc, #404]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f48:	4961      	ldr	r1, [pc, #388]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f6a:	4959      	ldr	r1, [pc, #356]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f7e:	4b54      	ldr	r3, [pc, #336]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8c:	4950      	ldr	r1, [pc, #320]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fae:	4948      	ldr	r1, [pc, #288]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fc2:	4b43      	ldr	r3, [pc, #268]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd0:	493f      	ldr	r1, [pc, #252]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d028      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff2:	4937      	ldr	r1, [pc, #220]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005002:	d106      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005004:	4b32      	ldr	r3, [pc, #200]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a31      	ldr	r2, [pc, #196]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800500e:	60d3      	str	r3, [r2, #12]
 8005010:	e011      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005016:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800501a:	d10c      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f8d8 	bl	80051d8 <RCCEx_PLLSAI1_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d028      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005042:	4b23      	ldr	r3, [pc, #140]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005050:	491f      	ldr	r1, [pc, #124]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005060:	d106      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	4a1a      	ldr	r2, [pc, #104]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005068:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800506c:	60d3      	str	r3, [r2, #12]
 800506e:	e011      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2101      	movs	r1, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f8a9 	bl	80051d8 <RCCEx_PLLSAI1_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02b      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050a0:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ae:	4908      	ldr	r1, [pc, #32]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050be:	d109      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c0:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4a02      	ldr	r2, [pc, #8]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ca:	60d3      	str	r3, [r2, #12]
 80050cc:	e014      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f877 	bl	80051d8 <RCCEx_PLLSAI1_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02f      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005104:	4b2b      	ldr	r3, [pc, #172]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005112:	4928      	ldr	r1, [pc, #160]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800511e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005122:	d10d      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	2102      	movs	r1, #2
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f854 	bl	80051d8 <RCCEx_PLLSAI1_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d014      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800513a:	7cfb      	ldrb	r3, [r7, #19]
 800513c:	74bb      	strb	r3, [r7, #18]
 800513e:	e011      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005148:	d10c      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3320      	adds	r3, #32
 800514e:	2102      	movs	r1, #2
 8005150:	4618      	mov	r0, r3
 8005152:	f000 f935 	bl	80053c0 <RCCEx_PLLSAI2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800515a:	7cfb      	ldrb	r3, [r7, #19]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005170:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800517e:	490d      	ldr	r1, [pc, #52]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005192:	4b08      	ldr	r3, [pc, #32]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005198:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a2:	4904      	ldr	r1, [pc, #16]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000

080051b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000

080051d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051e6:	4b75      	ldr	r3, [pc, #468]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d018      	beq.n	8005224 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051f2:	4b72      	ldr	r3, [pc, #456]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0203 	and.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d10d      	bne.n	800521e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
       ||
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800520a:	4b6c      	ldr	r3, [pc, #432]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	091b      	lsrs	r3, r3, #4
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
       ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d047      	beq.n	80052ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e044      	b.n	80052ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d018      	beq.n	800525e <RCCEx_PLLSAI1_Config+0x86>
 800522c:	2b03      	cmp	r3, #3
 800522e:	d825      	bhi.n	800527c <RCCEx_PLLSAI1_Config+0xa4>
 8005230:	2b01      	cmp	r3, #1
 8005232:	d002      	beq.n	800523a <RCCEx_PLLSAI1_Config+0x62>
 8005234:	2b02      	cmp	r3, #2
 8005236:	d009      	beq.n	800524c <RCCEx_PLLSAI1_Config+0x74>
 8005238:	e020      	b.n	800527c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800523a:	4b60      	ldr	r3, [pc, #384]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11d      	bne.n	8005282 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800524a:	e01a      	b.n	8005282 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800524c:	4b5b      	ldr	r3, [pc, #364]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d116      	bne.n	8005286 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525c:	e013      	b.n	8005286 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800525e:	4b57      	ldr	r3, [pc, #348]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800526a:	4b54      	ldr	r3, [pc, #336]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800527a:	e006      	b.n	800528a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
      break;
 8005280:	e004      	b.n	800528c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005282:	bf00      	nop
 8005284:	e002      	b.n	800528c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005286:	bf00      	nop
 8005288:	e000      	b.n	800528c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800528a:	bf00      	nop
    }

    if(status == HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10d      	bne.n	80052ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005292:	4b4a      	ldr	r3, [pc, #296]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6819      	ldr	r1, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	430b      	orrs	r3, r1
 80052a8:	4944      	ldr	r1, [pc, #272]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d17d      	bne.n	80053b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052b4:	4b41      	ldr	r3, [pc, #260]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a40      	ldr	r2, [pc, #256]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c0:	f7fc fb9c 	bl	80019fc <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052c6:	e009      	b.n	80052dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052c8:	f7fc fb98 	bl	80019fc <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d902      	bls.n	80052dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	73fb      	strb	r3, [r7, #15]
        break;
 80052da:	e005      	b.n	80052e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052dc:	4b37      	ldr	r3, [pc, #220]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1ef      	bne.n	80052c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d160      	bne.n	80053b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d111      	bne.n	8005318 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052f4:	4b31      	ldr	r3, [pc, #196]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80052fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6892      	ldr	r2, [r2, #8]
 8005304:	0211      	lsls	r1, r2, #8
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68d2      	ldr	r2, [r2, #12]
 800530a:	0912      	lsrs	r2, r2, #4
 800530c:	0452      	lsls	r2, r2, #17
 800530e:	430a      	orrs	r2, r1
 8005310:	492a      	ldr	r1, [pc, #168]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	610b      	str	r3, [r1, #16]
 8005316:	e027      	b.n	8005368 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d112      	bne.n	8005344 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800531e:	4b27      	ldr	r3, [pc, #156]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005326:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6892      	ldr	r2, [r2, #8]
 800532e:	0211      	lsls	r1, r2, #8
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6912      	ldr	r2, [r2, #16]
 8005334:	0852      	lsrs	r2, r2, #1
 8005336:	3a01      	subs	r2, #1
 8005338:	0552      	lsls	r2, r2, #21
 800533a:	430a      	orrs	r2, r1
 800533c:	491f      	ldr	r1, [pc, #124]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800533e:	4313      	orrs	r3, r2
 8005340:	610b      	str	r3, [r1, #16]
 8005342:	e011      	b.n	8005368 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005344:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800534c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6892      	ldr	r2, [r2, #8]
 8005354:	0211      	lsls	r1, r2, #8
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6952      	ldr	r2, [r2, #20]
 800535a:	0852      	lsrs	r2, r2, #1
 800535c:	3a01      	subs	r2, #1
 800535e:	0652      	lsls	r2, r2, #25
 8005360:	430a      	orrs	r2, r1
 8005362:	4916      	ldr	r1, [pc, #88]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005364:	4313      	orrs	r3, r2
 8005366:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005368:	4b14      	ldr	r3, [pc, #80]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800536e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005372:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005374:	f7fc fb42 	bl	80019fc <HAL_GetTick>
 8005378:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800537a:	e009      	b.n	8005390 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800537c:	f7fc fb3e 	bl	80019fc <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d902      	bls.n	8005390 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	73fb      	strb	r3, [r7, #15]
          break;
 800538e:	e005      	b.n	800539c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005390:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ef      	beq.n	800537c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053a2:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	4904      	ldr	r1, [pc, #16]	@ (80053bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40021000 	.word	0x40021000

080053c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d018      	beq.n	800540c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053da:	4b67      	ldr	r3, [pc, #412]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0203 	and.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d10d      	bne.n	8005406 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
       ||
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053f2:	4b61      	ldr	r3, [pc, #388]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
       ||
 8005402:	429a      	cmp	r2, r3
 8005404:	d047      	beq.n	8005496 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
 800540a:	e044      	b.n	8005496 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d018      	beq.n	8005446 <RCCEx_PLLSAI2_Config+0x86>
 8005414:	2b03      	cmp	r3, #3
 8005416:	d825      	bhi.n	8005464 <RCCEx_PLLSAI2_Config+0xa4>
 8005418:	2b01      	cmp	r3, #1
 800541a:	d002      	beq.n	8005422 <RCCEx_PLLSAI2_Config+0x62>
 800541c:	2b02      	cmp	r3, #2
 800541e:	d009      	beq.n	8005434 <RCCEx_PLLSAI2_Config+0x74>
 8005420:	e020      	b.n	8005464 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005422:	4b55      	ldr	r3, [pc, #340]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d11d      	bne.n	800546a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005432:	e01a      	b.n	800546a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005434:	4b50      	ldr	r3, [pc, #320]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543c:	2b00      	cmp	r3, #0
 800543e:	d116      	bne.n	800546e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005444:	e013      	b.n	800546e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005446:	4b4c      	ldr	r3, [pc, #304]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005452:	4b49      	ldr	r3, [pc, #292]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005462:	e006      	b.n	8005472 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
      break;
 8005468:	e004      	b.n	8005474 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005472:	bf00      	nop
    }

    if(status == HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10d      	bne.n	8005496 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800547a:	4b3f      	ldr	r3, [pc, #252]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6819      	ldr	r1, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	3b01      	subs	r3, #1
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	430b      	orrs	r3, r1
 8005490:	4939      	ldr	r1, [pc, #228]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005492:	4313      	orrs	r3, r2
 8005494:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d167      	bne.n	800556c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800549c:	4b36      	ldr	r3, [pc, #216]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a35      	ldr	r2, [pc, #212]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a8:	f7fc faa8 	bl	80019fc <HAL_GetTick>
 80054ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054ae:	e009      	b.n	80054c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b0:	f7fc faa4 	bl	80019fc <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d902      	bls.n	80054c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	73fb      	strb	r3, [r7, #15]
        break;
 80054c2:	e005      	b.n	80054d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ef      	bne.n	80054b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d14a      	bne.n	800556c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d111      	bne.n	8005500 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054dc:	4b26      	ldr	r3, [pc, #152]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80054e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6892      	ldr	r2, [r2, #8]
 80054ec:	0211      	lsls	r1, r2, #8
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68d2      	ldr	r2, [r2, #12]
 80054f2:	0912      	lsrs	r2, r2, #4
 80054f4:	0452      	lsls	r2, r2, #17
 80054f6:	430a      	orrs	r2, r1
 80054f8:	491f      	ldr	r1, [pc, #124]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	614b      	str	r3, [r1, #20]
 80054fe:	e011      	b.n	8005524 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005500:	4b1d      	ldr	r3, [pc, #116]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005508:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6892      	ldr	r2, [r2, #8]
 8005510:	0211      	lsls	r1, r2, #8
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6912      	ldr	r2, [r2, #16]
 8005516:	0852      	lsrs	r2, r2, #1
 8005518:	3a01      	subs	r2, #1
 800551a:	0652      	lsls	r2, r2, #25
 800551c:	430a      	orrs	r2, r1
 800551e:	4916      	ldr	r1, [pc, #88]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005520:	4313      	orrs	r3, r2
 8005522:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005524:	4b14      	ldr	r3, [pc, #80]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a13      	ldr	r2, [pc, #76]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 800552a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc fa64 	bl	80019fc <HAL_GetTick>
 8005534:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005536:	e009      	b.n	800554c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005538:	f7fc fa60 	bl	80019fc <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d902      	bls.n	800554c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	73fb      	strb	r3, [r7, #15]
          break;
 800554a:	e005      	b.n	8005558 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800554c:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800555e:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	4904      	ldr	r1, [pc, #16]	@ (8005578 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005568:	4313      	orrs	r3, r2
 800556a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e049      	b.n	8005622 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb ffb0 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f000 fc42 	bl	8005e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d001      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e04f      	b.n	80056e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a23      	ldr	r2, [pc, #140]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01d      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x76>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566e:	d018      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x76>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1f      	ldr	r2, [pc, #124]	@ (80056f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x76>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1e      	ldr	r2, [pc, #120]	@ (80056f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x76>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1c      	ldr	r2, [pc, #112]	@ (80056fc <HAL_TIM_Base_Start_IT+0xd0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x76>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1b      	ldr	r2, [pc, #108]	@ (8005700 <HAL_TIM_Base_Start_IT+0xd4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIM_Base_Start_IT+0x76>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a19      	ldr	r2, [pc, #100]	@ (8005704 <HAL_TIM_Base_Start_IT+0xd8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d115      	bne.n	80056ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <HAL_TIM_Base_Start_IT+0xdc>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b06      	cmp	r3, #6
 80056b2:	d015      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0xb4>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ba:	d011      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0201 	orr.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056cc:	e008      	b.n	80056e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0201 	orr.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e000      	b.n	80056e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40013400 	.word	0x40013400
 8005704:	40014000 	.word	0x40014000
 8005708:	00010007 	.word	0x00010007

0800570c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e049      	b.n	80057b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fb feca 	bl	80014cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f000 fb7a 	bl	8005e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <HAL_TIM_PWM_Start+0x24>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	e03c      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d109      	bne.n	80057fa <HAL_TIM_PWM_Start+0x3e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	bf14      	ite	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	2300      	moveq	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e02f      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d109      	bne.n	8005814 <HAL_TIM_PWM_Start+0x58>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e022      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d109      	bne.n	800582e <HAL_TIM_PWM_Start+0x72>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	e015      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b10      	cmp	r3, #16
 8005832:	d109      	bne.n	8005848 <HAL_TIM_PWM_Start+0x8c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e008      	b.n	800585a <HAL_TIM_PWM_Start+0x9e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e09c      	b.n	800599c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_TIM_PWM_Start+0xb6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005870:	e023      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b04      	cmp	r3, #4
 8005876:	d104      	bne.n	8005882 <HAL_TIM_PWM_Start+0xc6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005880:	e01b      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d104      	bne.n	8005892 <HAL_TIM_PWM_Start+0xd6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005890:	e013      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_Start+0xe6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a0:	e00b      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_PWM_Start+0xf6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b0:	e003      	b.n	80058ba <HAL_TIM_PWM_Start+0xfe>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fe2e 	bl	8006524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a35      	ldr	r2, [pc, #212]	@ (80059a4 <HAL_TIM_PWM_Start+0x1e8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a34      	ldr	r2, [pc, #208]	@ (80059a8 <HAL_TIM_PWM_Start+0x1ec>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a32      	ldr	r2, [pc, #200]	@ (80059ac <HAL_TIM_PWM_Start+0x1f0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a31      	ldr	r2, [pc, #196]	@ (80059b0 <HAL_TIM_PWM_Start+0x1f4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIM_PWM_Start+0x13e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a2f      	ldr	r2, [pc, #188]	@ (80059b4 <HAL_TIM_PWM_Start+0x1f8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_PWM_Start+0x142>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_TIM_PWM_Start+0x144>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005912:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a22      	ldr	r2, [pc, #136]	@ (80059a4 <HAL_TIM_PWM_Start+0x1e8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01d      	beq.n	800595a <HAL_TIM_PWM_Start+0x19e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005926:	d018      	beq.n	800595a <HAL_TIM_PWM_Start+0x19e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a22      	ldr	r2, [pc, #136]	@ (80059b8 <HAL_TIM_PWM_Start+0x1fc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <HAL_TIM_PWM_Start+0x19e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a21      	ldr	r2, [pc, #132]	@ (80059bc <HAL_TIM_PWM_Start+0x200>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_TIM_PWM_Start+0x19e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1f      	ldr	r2, [pc, #124]	@ (80059c0 <HAL_TIM_PWM_Start+0x204>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_TIM_PWM_Start+0x19e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <HAL_TIM_PWM_Start+0x1ec>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_TIM_PWM_Start+0x19e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a15      	ldr	r2, [pc, #84]	@ (80059ac <HAL_TIM_PWM_Start+0x1f0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d115      	bne.n	8005986 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <HAL_TIM_PWM_Start+0x208>)
 8005962:	4013      	ands	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b06      	cmp	r3, #6
 800596a:	d015      	beq.n	8005998 <HAL_TIM_PWM_Start+0x1dc>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005972:	d011      	beq.n	8005998 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005984:	e008      	b.n	8005998 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e000      	b.n	800599a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	00010007 	.word	0x00010007

080059c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d020      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0202 	mvn.w	r2, #2
 80059fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9f8 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9ea 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f9fb 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d020      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01b      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0204 	mvn.w	r2, #4
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9d2 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f9c4 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9d5 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0208 	mvn.w	r2, #8
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9ac 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f99e 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f9af 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0210 	mvn.w	r2, #16
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f986 	bl	8005e08 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f978 	bl	8005df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f989 	bl	8005e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0201 	mvn.w	r2, #1
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb f9d8 	bl	8000ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fd9e 	bl	8006694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fd96 	bl	80066a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f948 	bl	8005e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0220 	mvn.w	r2, #32
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fd5e 	bl	8006680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e0ff      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b14      	cmp	r3, #20
 8005bf6:	f200 80f0 	bhi.w	8005dda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005ddb 	.word	0x08005ddb
 8005c08:	08005ddb 	.word	0x08005ddb
 8005c0c:	08005ddb 	.word	0x08005ddb
 8005c10:	08005c95 	.word	0x08005c95
 8005c14:	08005ddb 	.word	0x08005ddb
 8005c18:	08005ddb 	.word	0x08005ddb
 8005c1c:	08005ddb 	.word	0x08005ddb
 8005c20:	08005cd7 	.word	0x08005cd7
 8005c24:	08005ddb 	.word	0x08005ddb
 8005c28:	08005ddb 	.word	0x08005ddb
 8005c2c:	08005ddb 	.word	0x08005ddb
 8005c30:	08005d17 	.word	0x08005d17
 8005c34:	08005ddb 	.word	0x08005ddb
 8005c38:	08005ddb 	.word	0x08005ddb
 8005c3c:	08005ddb 	.word	0x08005ddb
 8005c40:	08005d59 	.word	0x08005d59
 8005c44:	08005ddb 	.word	0x08005ddb
 8005c48:	08005ddb 	.word	0x08005ddb
 8005c4c:	08005ddb 	.word	0x08005ddb
 8005c50:	08005d99 	.word	0x08005d99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f98c 	bl	8005f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0208 	orr.w	r2, r2, #8
 8005c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0204 	bic.w	r2, r2, #4
 8005c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6999      	ldr	r1, [r3, #24]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	619a      	str	r2, [r3, #24]
      break;
 8005c92:	e0a5      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f9fc 	bl	8006098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6999      	ldr	r1, [r3, #24]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	021a      	lsls	r2, r3, #8
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	619a      	str	r2, [r3, #24]
      break;
 8005cd4:	e084      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fa65 	bl	80061ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0208 	orr.w	r2, r2, #8
 8005cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0204 	bic.w	r2, r2, #4
 8005d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69d9      	ldr	r1, [r3, #28]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	61da      	str	r2, [r3, #28]
      break;
 8005d14:	e064      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 facd 	bl	80062bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69d9      	ldr	r1, [r3, #28]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	021a      	lsls	r2, r3, #8
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	61da      	str	r2, [r3, #28]
      break;
 8005d56:	e043      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fb16 	bl	8006390 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0204 	bic.w	r2, r2, #4
 8005d82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d96:	e023      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb5a 	bl	8006458 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005db2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	021a      	lsls	r2, r3, #8
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005dd8:	e002      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop

08005df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a40      	ldr	r2, [pc, #256]	@ (8005f58 <TIM_Base_SetConfig+0x114>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e62:	d00f      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a3d      	ldr	r2, [pc, #244]	@ (8005f5c <TIM_Base_SetConfig+0x118>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00b      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005f60 <TIM_Base_SetConfig+0x11c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d007      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a3b      	ldr	r2, [pc, #236]	@ (8005f64 <TIM_Base_SetConfig+0x120>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f68 <TIM_Base_SetConfig+0x124>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2f      	ldr	r2, [pc, #188]	@ (8005f58 <TIM_Base_SetConfig+0x114>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01f      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea4:	d01b      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8005f5c <TIM_Base_SetConfig+0x118>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d017      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005f60 <TIM_Base_SetConfig+0x11c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005f64 <TIM_Base_SetConfig+0x120>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00f      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a29      	ldr	r2, [pc, #164]	@ (8005f68 <TIM_Base_SetConfig+0x124>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a28      	ldr	r2, [pc, #160]	@ (8005f6c <TIM_Base_SetConfig+0x128>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a27      	ldr	r2, [pc, #156]	@ (8005f70 <TIM_Base_SetConfig+0x12c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_Base_SetConfig+0x9a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	@ (8005f74 <TIM_Base_SetConfig+0x130>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a10      	ldr	r2, [pc, #64]	@ (8005f58 <TIM_Base_SetConfig+0x114>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00f      	beq.n	8005f3c <TIM_Base_SetConfig+0xf8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a12      	ldr	r2, [pc, #72]	@ (8005f68 <TIM_Base_SetConfig+0x124>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_Base_SetConfig+0xf8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a11      	ldr	r2, [pc, #68]	@ (8005f6c <TIM_Base_SetConfig+0x128>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_Base_SetConfig+0xf8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a10      	ldr	r2, [pc, #64]	@ (8005f70 <TIM_Base_SetConfig+0x12c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0xf8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0f      	ldr	r2, [pc, #60]	@ (8005f74 <TIM_Base_SetConfig+0x130>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d103      	bne.n	8005f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	615a      	str	r2, [r3, #20]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800

08005f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f023 0201 	bic.w	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 0302 	bic.w	r3, r3, #2
 8005fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8006084 <TIM_OC1_SetConfig+0x10c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00f      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x80>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a2b      	ldr	r2, [pc, #172]	@ (8006088 <TIM_OC1_SetConfig+0x110>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00b      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x80>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800608c <TIM_OC1_SetConfig+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x80>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a29      	ldr	r2, [pc, #164]	@ (8006090 <TIM_OC1_SetConfig+0x118>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_OC1_SetConfig+0x80>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a28      	ldr	r2, [pc, #160]	@ (8006094 <TIM_OC1_SetConfig+0x11c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d10c      	bne.n	8006012 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f023 0308 	bic.w	r3, r3, #8
 8005ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f023 0304 	bic.w	r3, r3, #4
 8006010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1b      	ldr	r2, [pc, #108]	@ (8006084 <TIM_OC1_SetConfig+0x10c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_OC1_SetConfig+0xc2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1a      	ldr	r2, [pc, #104]	@ (8006088 <TIM_OC1_SetConfig+0x110>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_OC1_SetConfig+0xc2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a19      	ldr	r2, [pc, #100]	@ (800608c <TIM_OC1_SetConfig+0x114>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_OC1_SetConfig+0xc2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a18      	ldr	r2, [pc, #96]	@ (8006090 <TIM_OC1_SetConfig+0x118>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC1_SetConfig+0xc2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a17      	ldr	r2, [pc, #92]	@ (8006094 <TIM_OC1_SetConfig+0x11c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d111      	bne.n	800605e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	621a      	str	r2, [r3, #32]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800

08006098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 0210 	bic.w	r2, r3, #16
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a28      	ldr	r2, [pc, #160]	@ (8006198 <TIM_OC2_SetConfig+0x100>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC2_SetConfig+0x6c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a27      	ldr	r2, [pc, #156]	@ (800619c <TIM_OC2_SetConfig+0x104>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10d      	bne.n	8006120 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800610a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800611e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a1d      	ldr	r2, [pc, #116]	@ (8006198 <TIM_OC2_SetConfig+0x100>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00f      	beq.n	8006148 <TIM_OC2_SetConfig+0xb0>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a1c      	ldr	r2, [pc, #112]	@ (800619c <TIM_OC2_SetConfig+0x104>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00b      	beq.n	8006148 <TIM_OC2_SetConfig+0xb0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a1b      	ldr	r2, [pc, #108]	@ (80061a0 <TIM_OC2_SetConfig+0x108>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_OC2_SetConfig+0xb0>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a1a      	ldr	r2, [pc, #104]	@ (80061a4 <TIM_OC2_SetConfig+0x10c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC2_SetConfig+0xb0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <TIM_OC2_SetConfig+0x110>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d113      	bne.n	8006170 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800614e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800

080061ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0303 	bic.w	r3, r3, #3
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a27      	ldr	r2, [pc, #156]	@ (80062a8 <TIM_OC3_SetConfig+0xfc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC3_SetConfig+0x6a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a26      	ldr	r2, [pc, #152]	@ (80062ac <TIM_OC3_SetConfig+0x100>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d10d      	bne.n	8006232 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800621c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a1c      	ldr	r2, [pc, #112]	@ (80062a8 <TIM_OC3_SetConfig+0xfc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00f      	beq.n	800625a <TIM_OC3_SetConfig+0xae>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a1b      	ldr	r2, [pc, #108]	@ (80062ac <TIM_OC3_SetConfig+0x100>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_OC3_SetConfig+0xae>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1a      	ldr	r2, [pc, #104]	@ (80062b0 <TIM_OC3_SetConfig+0x104>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_OC3_SetConfig+0xae>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <TIM_OC3_SetConfig+0x108>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_OC3_SetConfig+0xae>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <TIM_OC3_SetConfig+0x10c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d113      	bne.n	8006282 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	621a      	str	r2, [r3, #32]
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40012c00 	.word	0x40012c00
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800

080062bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800630a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	031b      	lsls	r3, r3, #12
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a18      	ldr	r2, [pc, #96]	@ (800637c <TIM_OC4_SetConfig+0xc0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00f      	beq.n	8006340 <TIM_OC4_SetConfig+0x84>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <TIM_OC4_SetConfig+0xc4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00b      	beq.n	8006340 <TIM_OC4_SetConfig+0x84>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a16      	ldr	r2, [pc, #88]	@ (8006384 <TIM_OC4_SetConfig+0xc8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_OC4_SetConfig+0x84>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a15      	ldr	r2, [pc, #84]	@ (8006388 <TIM_OC4_SetConfig+0xcc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC4_SetConfig+0x84>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a14      	ldr	r2, [pc, #80]	@ (800638c <TIM_OC4_SetConfig+0xd0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d109      	bne.n	8006354 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	019b      	lsls	r3, r3, #6
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40013400 	.word	0x40013400
 8006384:	40014000 	.word	0x40014000
 8006388:	40014400 	.word	0x40014400
 800638c:	40014800 	.word	0x40014800

08006390 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	041b      	lsls	r3, r3, #16
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a17      	ldr	r2, [pc, #92]	@ (8006444 <TIM_OC5_SetConfig+0xb4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00f      	beq.n	800640a <TIM_OC5_SetConfig+0x7a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <TIM_OC5_SetConfig+0xb8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_OC5_SetConfig+0x7a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a15      	ldr	r2, [pc, #84]	@ (800644c <TIM_OC5_SetConfig+0xbc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <TIM_OC5_SetConfig+0x7a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a14      	ldr	r2, [pc, #80]	@ (8006450 <TIM_OC5_SetConfig+0xc0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_OC5_SetConfig+0x7a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a13      	ldr	r2, [pc, #76]	@ (8006454 <TIM_OC5_SetConfig+0xc4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d109      	bne.n	800641e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	621a      	str	r2, [r3, #32]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40013400 	.word	0x40013400
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800

08006458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800649e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	051b      	lsls	r3, r3, #20
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <TIM_OC6_SetConfig+0xb8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00f      	beq.n	80064d4 <TIM_OC6_SetConfig+0x7c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a17      	ldr	r2, [pc, #92]	@ (8006514 <TIM_OC6_SetConfig+0xbc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_OC6_SetConfig+0x7c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a16      	ldr	r2, [pc, #88]	@ (8006518 <TIM_OC6_SetConfig+0xc0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_OC6_SetConfig+0x7c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a15      	ldr	r2, [pc, #84]	@ (800651c <TIM_OC6_SetConfig+0xc4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC6_SetConfig+0x7c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a14      	ldr	r2, [pc, #80]	@ (8006520 <TIM_OC6_SetConfig+0xc8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d109      	bne.n	80064e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	029b      	lsls	r3, r3, #10
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	2201      	movs	r2, #1
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	43db      	mvns	r3, r3
 8006546:	401a      	ands	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	fa01 f303 	lsl.w	r3, r1, r3
 800655c:	431a      	orrs	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	621a      	str	r2, [r3, #32]
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006584:	2302      	movs	r3, #2
 8006586:	e068      	b.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a2d      	ldr	r2, [pc, #180]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d108      	bne.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01d      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fa:	d018      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1a      	ldr	r2, [pc, #104]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a18      	ldr	r2, [pc, #96]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a13      	ldr	r2, [pc, #76]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a14      	ldr	r2, [pc, #80]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10c      	bne.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4313      	orrs	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40014000 	.word	0x40014000

08006680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e040      	b.n	8006750 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fa ffa8 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2224      	movs	r2, #36	@ 0x24
 80066e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fe36 	bl	8007374 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb7b 	bl	8006e04 <UART_SetConfig>
 800670e:	4603      	mov	r3, r0
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e01b      	b.n	8006750 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006726:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 feb5 	bl	80074b8 <UART_CheckIdleState>
 800674e:	4603      	mov	r3, r0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	@ 0x28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800676c:	2b20      	cmp	r3, #32
 800676e:	d137      	bne.n	80067e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_UART_Receive_IT+0x24>
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e030      	b.n	80067e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a18      	ldr	r2, [pc, #96]	@ (80067ec <HAL_UART_Receive_IT+0x94>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d01f      	beq.n	80067d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d018      	beq.n	80067d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	613b      	str	r3, [r7, #16]
   return(result);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	69f9      	ldr	r1, [r7, #28]
 80067c2:	6a3a      	ldr	r2, [r7, #32]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 ff7e 	bl	80076d8 <UART_Start_Receive_IT>
 80067dc:	4603      	mov	r3, r0
 80067de:	e000      	b.n	80067e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
  }
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3728      	adds	r7, #40	@ 0x28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40008000 	.word	0x40008000

080067f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b0ba      	sub	sp, #232	@ 0xe8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006816:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800681a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800681e:	4013      	ands	r3, r2
 8006820:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d115      	bne.n	8006858 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800682c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00f      	beq.n	8006858 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 82ae 	beq.w	8006daa <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      }
      return;
 8006856:	e2a8      	b.n	8006daa <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8117 	beq.w	8006a90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800686e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006872:	4b85      	ldr	r3, [pc, #532]	@ (8006a88 <HAL_UART_IRQHandler+0x298>)
 8006874:	4013      	ands	r3, r2
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 810a 	beq.w	8006a90 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d011      	beq.n	80068ac <HAL_UART_IRQHandler+0xbc>
 8006888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2201      	movs	r2, #1
 800689a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a2:	f043 0201 	orr.w	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d011      	beq.n	80068dc <HAL_UART_IRQHandler+0xec>
 80068b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2202      	movs	r2, #2
 80068ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068d2:	f043 0204 	orr.w	r2, r3, #4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d011      	beq.n	800690c <HAL_UART_IRQHandler+0x11c>
 80068e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2204      	movs	r2, #4
 80068fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006902:	f043 0202 	orr.w	r2, r3, #2
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b00      	cmp	r3, #0
 8006916:	d017      	beq.n	8006948 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006928:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2208      	movs	r2, #8
 8006936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800693e:	f043 0208 	orr.w	r2, r3, #8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006950:	2b00      	cmp	r3, #0
 8006952:	d012      	beq.n	800697a <HAL_UART_IRQHandler+0x18a>
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006958:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006970:	f043 0220 	orr.w	r2, r3, #32
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8214 	beq.w	8006dae <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00d      	beq.n	80069ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c2:	2b40      	cmp	r3, #64	@ 0x40
 80069c4:	d005      	beq.n	80069d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04f      	beq.n	8006a72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 ff46 	bl	8007864 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e2:	2b40      	cmp	r3, #64	@ 0x40
 80069e4:	d141      	bne.n	8006a6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3308      	adds	r3, #8
 80069ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1d9      	bne.n	80069e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d013      	beq.n	8006a62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	4a13      	ldr	r2, [pc, #76]	@ (8006a8c <HAL_UART_IRQHandler+0x29c>)
 8006a40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fd f83d 	bl	8003ac6 <HAL_DMA_Abort_IT>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d017      	beq.n	8006a82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	e00f      	b.n	8006a82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9b8 	bl	8006dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	e00b      	b.n	8006a82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f9b4 	bl	8006dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	e007      	b.n	8006a82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9b0 	bl	8006dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a80:	e195      	b.n	8006dae <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a82:	bf00      	nop
    return;
 8006a84:	e193      	b.n	8006dae <HAL_UART_IRQHandler+0x5be>
 8006a86:	bf00      	nop
 8006a88:	04000120 	.word	0x04000120
 8006a8c:	0800792d 	.word	0x0800792d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	f040 814e 	bne.w	8006d36 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 8147 	beq.w	8006d36 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8140 	beq.w	8006d36 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2210      	movs	r2, #16
 8006abc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b40      	cmp	r3, #64	@ 0x40
 8006aca:	f040 80b8 	bne.w	8006c3e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ada:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8167 	beq.w	8006db2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aee:	429a      	cmp	r2, r3
 8006af0:	f080 815f 	bcs.w	8006db2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006afa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 8086 	bne.w	8006c1c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1da      	bne.n	8006b10 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e1      	bne.n	8006b5a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e3      	bne.n	8006b96 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bec:	f023 0310 	bic.w	r3, r3, #16
 8006bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e4      	bne.n	8006bdc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fc ff17 	bl	8003a4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f8d8 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c3c:	e0b9      	b.n	8006db2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80ab 	beq.w	8006db6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80a6 	beq.w	8006db6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e4      	bne.n	8006c6a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e3      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 0310 	bic.w	r3, r3, #16
 8006d00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	69b9      	ldr	r1, [r7, #24]
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e4      	bne.n	8006cec <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f85c 	bl	8006dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d34:	e03f      	b.n	8006db6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <HAL_UART_IRQHandler+0x570>
 8006d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 ffe3 	bl	8007d24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d5e:	e02d      	b.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00e      	beq.n	8006d8a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01c      	beq.n	8006dba <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
    }
    return;
 8006d88:	e017      	b.n	8006dba <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d012      	beq.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
 8006d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fdd8 	bl	8007958 <UART_EndTransmit_IT>
    return;
 8006da8:	e008      	b.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
      return;
 8006daa:	bf00      	nop
 8006dac:	e006      	b.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
    return;
 8006dae:	bf00      	nop
 8006db0:	e004      	b.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
      return;
 8006db2:	bf00      	nop
 8006db4:	e002      	b.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
      return;
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <HAL_UART_IRQHandler+0x5cc>
    return;
 8006dba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006dbc:	37e8      	adds	r7, #232	@ 0xe8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop

08006dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e08:	b08a      	sub	sp, #40	@ 0x28
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	431a      	orrs	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4ba4      	ldr	r3, [pc, #656]	@ (80070c4 <UART_SetConfig+0x2c0>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a99      	ldr	r2, [pc, #612]	@ (80070c8 <UART_SetConfig+0x2c4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d004      	beq.n	8006e70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e80:	430a      	orrs	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a90      	ldr	r2, [pc, #576]	@ (80070cc <UART_SetConfig+0x2c8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d126      	bne.n	8006edc <UART_SetConfig+0xd8>
 8006e8e:	4b90      	ldr	r3, [pc, #576]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d81b      	bhi.n	8006ed4 <UART_SetConfig+0xd0>
 8006e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea4 <UART_SetConfig+0xa0>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ec5 	.word	0x08006ec5
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eba:	e116      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec2:	e112      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eca:	e10e      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ed2:	e10a      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eda:	e106      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a7c      	ldr	r2, [pc, #496]	@ (80070d4 <UART_SetConfig+0x2d0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d138      	bne.n	8006f58 <UART_SetConfig+0x154>
 8006ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eec:	f003 030c 	and.w	r3, r3, #12
 8006ef0:	2b0c      	cmp	r3, #12
 8006ef2:	d82d      	bhi.n	8006f50 <UART_SetConfig+0x14c>
 8006ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8006efc <UART_SetConfig+0xf8>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08006f51 	.word	0x08006f51
 8006f04:	08006f51 	.word	0x08006f51
 8006f08:	08006f51 	.word	0x08006f51
 8006f0c:	08006f41 	.word	0x08006f41
 8006f10:	08006f51 	.word	0x08006f51
 8006f14:	08006f51 	.word	0x08006f51
 8006f18:	08006f51 	.word	0x08006f51
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f51 	.word	0x08006f51
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f49 	.word	0x08006f49
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f36:	e0d8      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f3e:	e0d4      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f46:	e0d0      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f4e:	e0cc      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f56:	e0c8      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80070d8 <UART_SetConfig+0x2d4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d125      	bne.n	8006fae <UART_SetConfig+0x1aa>
 8006f62:	4b5b      	ldr	r3, [pc, #364]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f6c:	2b30      	cmp	r3, #48	@ 0x30
 8006f6e:	d016      	beq.n	8006f9e <UART_SetConfig+0x19a>
 8006f70:	2b30      	cmp	r3, #48	@ 0x30
 8006f72:	d818      	bhi.n	8006fa6 <UART_SetConfig+0x1a2>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d00a      	beq.n	8006f8e <UART_SetConfig+0x18a>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d814      	bhi.n	8006fa6 <UART_SetConfig+0x1a2>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <UART_SetConfig+0x182>
 8006f80:	2b10      	cmp	r3, #16
 8006f82:	d008      	beq.n	8006f96 <UART_SetConfig+0x192>
 8006f84:	e00f      	b.n	8006fa6 <UART_SetConfig+0x1a2>
 8006f86:	2300      	movs	r3, #0
 8006f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f8c:	e0ad      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f94:	e0a9      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f96:	2304      	movs	r3, #4
 8006f98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f9c:	e0a5      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fa4:	e0a1      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006fa6:	2310      	movs	r3, #16
 8006fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fac:	e09d      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80070dc <UART_SetConfig+0x2d8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d125      	bne.n	8007004 <UART_SetConfig+0x200>
 8006fb8:	4b45      	ldr	r3, [pc, #276]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fc4:	d016      	beq.n	8006ff4 <UART_SetConfig+0x1f0>
 8006fc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fc8:	d818      	bhi.n	8006ffc <UART_SetConfig+0x1f8>
 8006fca:	2b80      	cmp	r3, #128	@ 0x80
 8006fcc:	d00a      	beq.n	8006fe4 <UART_SetConfig+0x1e0>
 8006fce:	2b80      	cmp	r3, #128	@ 0x80
 8006fd0:	d814      	bhi.n	8006ffc <UART_SetConfig+0x1f8>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <UART_SetConfig+0x1d8>
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d008      	beq.n	8006fec <UART_SetConfig+0x1e8>
 8006fda:	e00f      	b.n	8006ffc <UART_SetConfig+0x1f8>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe2:	e082      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fea:	e07e      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff2:	e07a      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffa:	e076      	b.n	80070ea <UART_SetConfig+0x2e6>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007002:	e072      	b.n	80070ea <UART_SetConfig+0x2e6>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a35      	ldr	r2, [pc, #212]	@ (80070e0 <UART_SetConfig+0x2dc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d12a      	bne.n	8007064 <UART_SetConfig+0x260>
 800700e:	4b30      	ldr	r3, [pc, #192]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800701c:	d01a      	beq.n	8007054 <UART_SetConfig+0x250>
 800701e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007022:	d81b      	bhi.n	800705c <UART_SetConfig+0x258>
 8007024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007028:	d00c      	beq.n	8007044 <UART_SetConfig+0x240>
 800702a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800702e:	d815      	bhi.n	800705c <UART_SetConfig+0x258>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <UART_SetConfig+0x238>
 8007034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007038:	d008      	beq.n	800704c <UART_SetConfig+0x248>
 800703a:	e00f      	b.n	800705c <UART_SetConfig+0x258>
 800703c:	2300      	movs	r3, #0
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007042:	e052      	b.n	80070ea <UART_SetConfig+0x2e6>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704a:	e04e      	b.n	80070ea <UART_SetConfig+0x2e6>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007052:	e04a      	b.n	80070ea <UART_SetConfig+0x2e6>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705a:	e046      	b.n	80070ea <UART_SetConfig+0x2e6>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007062:	e042      	b.n	80070ea <UART_SetConfig+0x2e6>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a17      	ldr	r2, [pc, #92]	@ (80070c8 <UART_SetConfig+0x2c4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d13a      	bne.n	80070e4 <UART_SetConfig+0x2e0>
 800706e:	4b18      	ldr	r3, [pc, #96]	@ (80070d0 <UART_SetConfig+0x2cc>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800707c:	d01a      	beq.n	80070b4 <UART_SetConfig+0x2b0>
 800707e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007082:	d81b      	bhi.n	80070bc <UART_SetConfig+0x2b8>
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007088:	d00c      	beq.n	80070a4 <UART_SetConfig+0x2a0>
 800708a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708e:	d815      	bhi.n	80070bc <UART_SetConfig+0x2b8>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <UART_SetConfig+0x298>
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007098:	d008      	beq.n	80070ac <UART_SetConfig+0x2a8>
 800709a:	e00f      	b.n	80070bc <UART_SetConfig+0x2b8>
 800709c:	2300      	movs	r3, #0
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070a2:	e022      	b.n	80070ea <UART_SetConfig+0x2e6>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070aa:	e01e      	b.n	80070ea <UART_SetConfig+0x2e6>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b2:	e01a      	b.n	80070ea <UART_SetConfig+0x2e6>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ba:	e016      	b.n	80070ea <UART_SetConfig+0x2e6>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e012      	b.n	80070ea <UART_SetConfig+0x2e6>
 80070c4:	efff69f3 	.word	0xefff69f3
 80070c8:	40008000 	.word	0x40008000
 80070cc:	40013800 	.word	0x40013800
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40004400 	.word	0x40004400
 80070d8:	40004800 	.word	0x40004800
 80070dc:	40004c00 	.word	0x40004c00
 80070e0:	40005000 	.word	0x40005000
 80070e4:	2310      	movs	r3, #16
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a9f      	ldr	r2, [pc, #636]	@ (800736c <UART_SetConfig+0x568>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d17a      	bne.n	80071ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d824      	bhi.n	8007146 <UART_SetConfig+0x342>
 80070fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <UART_SetConfig+0x300>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007129 	.word	0x08007129
 8007108:	08007147 	.word	0x08007147
 800710c:	08007131 	.word	0x08007131
 8007110:	08007147 	.word	0x08007147
 8007114:	08007137 	.word	0x08007137
 8007118:	08007147 	.word	0x08007147
 800711c:	08007147 	.word	0x08007147
 8007120:	08007147 	.word	0x08007147
 8007124:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007128:	f7fd fcd0 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 800712c:	61f8      	str	r0, [r7, #28]
        break;
 800712e:	e010      	b.n	8007152 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b8f      	ldr	r3, [pc, #572]	@ (8007370 <UART_SetConfig+0x56c>)
 8007132:	61fb      	str	r3, [r7, #28]
        break;
 8007134:	e00d      	b.n	8007152 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7fd fc31 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800713a:	61f8      	str	r0, [r7, #28]
        break;
 800713c:	e009      	b.n	8007152 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007142:	61fb      	str	r3, [r7, #28]
        break;
 8007144:	e005      	b.n	8007152 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80fb 	beq.w	8007350 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	4413      	add	r3, r2
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	429a      	cmp	r2, r3
 8007168:	d305      	bcc.n	8007176 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	429a      	cmp	r2, r3
 8007174:	d903      	bls.n	800717e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800717c:	e0e8      	b.n	8007350 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	2200      	movs	r2, #0
 8007182:	461c      	mov	r4, r3
 8007184:	4615      	mov	r5, r2
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	022b      	lsls	r3, r5, #8
 8007190:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007194:	0222      	lsls	r2, r4, #8
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6849      	ldr	r1, [r1, #4]
 800719a:	0849      	lsrs	r1, r1, #1
 800719c:	2000      	movs	r0, #0
 800719e:	4688      	mov	r8, r1
 80071a0:	4681      	mov	r9, r0
 80071a2:	eb12 0a08 	adds.w	sl, r2, r8
 80071a6:	eb43 0b09 	adc.w	fp, r3, r9
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b8:	4650      	mov	r0, sl
 80071ba:	4659      	mov	r1, fp
 80071bc:	f7f9 f860 	bl	8000280 <__aeabi_uldivmod>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4613      	mov	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ce:	d308      	bcc.n	80071e2 <UART_SetConfig+0x3de>
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071d6:	d204      	bcs.n	80071e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	60da      	str	r2, [r3, #12]
 80071e0:	e0b6      	b.n	8007350 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071e8:	e0b2      	b.n	8007350 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f2:	d15e      	bne.n	80072b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d828      	bhi.n	800724e <UART_SetConfig+0x44a>
 80071fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007204 <UART_SetConfig+0x400>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007229 	.word	0x08007229
 8007208:	08007231 	.word	0x08007231
 800720c:	08007239 	.word	0x08007239
 8007210:	0800724f 	.word	0x0800724f
 8007214:	0800723f 	.word	0x0800723f
 8007218:	0800724f 	.word	0x0800724f
 800721c:	0800724f 	.word	0x0800724f
 8007220:	0800724f 	.word	0x0800724f
 8007224:	08007247 	.word	0x08007247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fd fc50 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 800722c:	61f8      	str	r0, [r7, #28]
        break;
 800722e:	e014      	b.n	800725a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007230:	f7fd fc62 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 8007234:	61f8      	str	r0, [r7, #28]
        break;
 8007236:	e010      	b.n	800725a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007238:	4b4d      	ldr	r3, [pc, #308]	@ (8007370 <UART_SetConfig+0x56c>)
 800723a:	61fb      	str	r3, [r7, #28]
        break;
 800723c:	e00d      	b.n	800725a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723e:	f7fd fbad 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8007242:	61f8      	str	r0, [r7, #28]
        break;
 8007244:	e009      	b.n	800725a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800724a:	61fb      	str	r3, [r7, #28]
        break;
 800724c:	e005      	b.n	800725a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d077      	beq.n	8007350 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	005a      	lsls	r2, r3, #1
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	441a      	add	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b0f      	cmp	r3, #15
 800727a:	d916      	bls.n	80072aa <UART_SetConfig+0x4a6>
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007282:	d212      	bcs.n	80072aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f023 030f 	bic.w	r3, r3, #15
 800728c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	b29b      	uxth	r3, r3
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	b29a      	uxth	r2, r3
 800729a:	8afb      	ldrh	r3, [r7, #22]
 800729c:	4313      	orrs	r3, r2
 800729e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	8afa      	ldrh	r2, [r7, #22]
 80072a6:	60da      	str	r2, [r3, #12]
 80072a8:	e052      	b.n	8007350 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072b0:	e04e      	b.n	8007350 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d827      	bhi.n	800730a <UART_SetConfig+0x506>
 80072ba:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <UART_SetConfig+0x4bc>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	0800730b 	.word	0x0800730b
 80072d0:	080072fb 	.word	0x080072fb
 80072d4:	0800730b 	.word	0x0800730b
 80072d8:	0800730b 	.word	0x0800730b
 80072dc:	0800730b 	.word	0x0800730b
 80072e0:	08007303 	.word	0x08007303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e4:	f7fd fbf2 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 80072e8:	61f8      	str	r0, [r7, #28]
        break;
 80072ea:	e014      	b.n	8007316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ec:	f7fd fc04 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 80072f0:	61f8      	str	r0, [r7, #28]
        break;
 80072f2:	e010      	b.n	8007316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007370 <UART_SetConfig+0x56c>)
 80072f6:	61fb      	str	r3, [r7, #28]
        break;
 80072f8:	e00d      	b.n	8007316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072fa:	f7fd fb4f 	bl	800499c <HAL_RCC_GetSysClockFreq>
 80072fe:	61f8      	str	r0, [r7, #28]
        break;
 8007300:	e009      	b.n	8007316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007306:	61fb      	str	r3, [r7, #28]
        break;
 8007308:	e005      	b.n	8007316 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007314:	bf00      	nop
    }

    if (pclk != 0U)
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d019      	beq.n	8007350 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	085a      	lsrs	r2, r3, #1
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	441a      	add	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	d909      	bls.n	800734a <UART_SetConfig+0x546>
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800733c:	d205      	bcs.n	800734a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60da      	str	r2, [r3, #12]
 8007348:	e002      	b.n	8007350 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800735c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007360:	4618      	mov	r0, r3
 8007362:	3728      	adds	r7, #40	@ 0x28
 8007364:	46bd      	mov	sp, r7
 8007366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800736a:	bf00      	nop
 800736c:	40008000 	.word	0x40008000
 8007370:	00f42400 	.word	0x00f42400

08007374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01a      	beq.n	800748a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007472:	d10a      	bne.n	800748a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	605a      	str	r2, [r3, #4]
  }
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b098      	sub	sp, #96	@ 0x60
 80074bc:	af02      	add	r7, sp, #8
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074c8:	f7fa fa98 	bl	80019fc <HAL_GetTick>
 80074cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b08      	cmp	r3, #8
 80074da:	d12e      	bne.n	800753a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e4:	2200      	movs	r2, #0
 80074e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f88c 	bl	8007608 <UART_WaitOnFlagUntilTimeout>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d021      	beq.n	800753a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800750a:	653b      	str	r3, [r7, #80]	@ 0x50
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007514:	647b      	str	r3, [r7, #68]	@ 0x44
 8007516:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800751a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e6      	bne.n	80074f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e062      	b.n	8007600 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b04      	cmp	r3, #4
 8007546:	d149      	bne.n	80075dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007548:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007550:	2200      	movs	r2, #0
 8007552:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f856 	bl	8007608 <UART_WaitOnFlagUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d03c      	beq.n	80075dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	623b      	str	r3, [r7, #32]
   return(result);
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007580:	633b      	str	r3, [r7, #48]	@ 0x30
 8007582:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e6      	bne.n	8007562 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3308      	adds	r3, #8
 800759a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3308      	adds	r3, #8
 80075b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075b4:	61fa      	str	r2, [r7, #28]
 80075b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	69b9      	ldr	r1, [r7, #24]
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	617b      	str	r3, [r7, #20]
   return(result);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e5      	bne.n	8007594 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e011      	b.n	8007600 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3758      	adds	r7, #88	@ 0x58
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	4613      	mov	r3, r2
 8007616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007618:	e049      	b.n	80076ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d045      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007622:	f7fa f9eb 	bl	80019fc <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <UART_WaitOnFlagUntilTimeout+0x30>
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e048      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d031      	beq.n	80076ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b08      	cmp	r3, #8
 8007656:	d110      	bne.n	800767a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2208      	movs	r2, #8
 800765e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f8ff 	bl	8007864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2208      	movs	r2, #8
 800766a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e029      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007688:	d111      	bne.n	80076ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f8e5 	bl	8007864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e00f      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69da      	ldr	r2, [r3, #28]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d0a6      	beq.n	800761a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d8:	b480      	push	{r7}
 80076da:	b097      	sub	sp, #92	@ 0x5c
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	88fa      	ldrh	r2, [r7, #6]
 80076f8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800770a:	d10e      	bne.n	800772a <UART_Start_Receive_IT+0x52>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <UART_Start_Receive_IT+0x48>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800771a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800771e:	e02d      	b.n	800777c <UART_Start_Receive_IT+0xa4>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	22ff      	movs	r2, #255	@ 0xff
 8007724:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007728:	e028      	b.n	800777c <UART_Start_Receive_IT+0xa4>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10d      	bne.n	800774e <UART_Start_Receive_IT+0x76>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <UART_Start_Receive_IT+0x6c>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	22ff      	movs	r2, #255	@ 0xff
 800773e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007742:	e01b      	b.n	800777c <UART_Start_Receive_IT+0xa4>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	227f      	movs	r2, #127	@ 0x7f
 8007748:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800774c:	e016      	b.n	800777c <UART_Start_Receive_IT+0xa4>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007756:	d10d      	bne.n	8007774 <UART_Start_Receive_IT+0x9c>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <UART_Start_Receive_IT+0x92>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	227f      	movs	r2, #127	@ 0x7f
 8007764:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007768:	e008      	b.n	800777c <UART_Start_Receive_IT+0xa4>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	223f      	movs	r2, #63	@ 0x3f
 800776e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007772:	e003      	b.n	800777c <UART_Start_Receive_IT+0xa4>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2222      	movs	r2, #34	@ 0x22
 8007788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3308      	adds	r3, #8
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007796:	e853 3f00 	ldrex	r3, [r3]
 800779a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	f043 0301 	orr.w	r3, r3, #1
 80077a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077b4:	e841 2300 	strex	r3, r2, [r1]
 80077b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80077ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e5      	bne.n	800778c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c8:	d107      	bne.n	80077da <UART_Start_Receive_IT+0x102>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d103      	bne.n	80077da <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a21      	ldr	r2, [pc, #132]	@ (800785c <UART_Start_Receive_IT+0x184>)
 80077d6:	669a      	str	r2, [r3, #104]	@ 0x68
 80077d8:	e002      	b.n	80077e0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4a20      	ldr	r2, [pc, #128]	@ (8007860 <UART_Start_Receive_IT+0x188>)
 80077de:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d019      	beq.n	800781c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80077fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
 8007808:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800780c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e6      	bne.n	80077e8 <UART_Start_Receive_IT+0x110>
 800781a:	e018      	b.n	800784e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f043 0320 	orr.w	r3, r3, #32
 8007830:	653b      	str	r3, [r7, #80]	@ 0x50
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	69f9      	ldr	r1, [r7, #28]
 8007840:	6a3a      	ldr	r2, [r7, #32]
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	61bb      	str	r3, [r7, #24]
   return(result);
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	375c      	adds	r7, #92	@ 0x5c
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	08007b69 	.word	0x08007b69
 8007860:	080079ad 	.word	0x080079ad

08007864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b095      	sub	sp, #84	@ 0x54
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800788a:	643b      	str	r3, [r7, #64]	@ 0x40
 800788c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007890:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e6      	bne.n	800786c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d118      	bne.n	800790c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f023 0310 	bic.w	r3, r3, #16
 80078ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6979      	ldr	r1, [r7, #20]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	613b      	str	r3, [r7, #16]
   return(result);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e6      	bne.n	80078da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007920:	bf00      	nop
 8007922:	3754      	adds	r7, #84	@ 0x54
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fa44 	bl	8006dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	60bb      	str	r3, [r7, #8]
   return(result);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	613b      	str	r3, [r7, #16]
   return(result);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e6      	bne.n	8007960 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff fa10 	bl	8006dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079a4:	bf00      	nop
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b09c      	sub	sp, #112	@ 0x70
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c4:	2b22      	cmp	r3, #34	@ 0x22
 80079c6:	f040 80be 	bne.w	8007b46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80079d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80079d8:	b2d9      	uxtb	r1, r3
 80079da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e4:	400a      	ands	r2, r1
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 80a3 	bne.w	8007b5a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e6      	bne.n	8007a14 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e5      	bne.n	8007a46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a34      	ldr	r2, [pc, #208]	@ (8007b64 <UART_RxISR_8BIT+0x1b8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01f      	beq.n	8007ad8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d018      	beq.n	8007ad8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aba:	663b      	str	r3, [r7, #96]	@ 0x60
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e6      	bne.n	8007aa6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d12e      	bne.n	8007b3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0310 	bic.w	r3, r3, #16
 8007afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b04:	61fb      	str	r3, [r7, #28]
 8007b06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	69b9      	ldr	r1, [r7, #24]
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	617b      	str	r3, [r7, #20]
   return(result);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e6      	bne.n	8007ae6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b10      	cmp	r3, #16
 8007b24:	d103      	bne.n	8007b2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff f958 	bl	8006dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b3c:	e00d      	b.n	8007b5a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7f9 fb4a 	bl	80011d8 <HAL_UART_RxCpltCallback>
}
 8007b44:	e009      	b.n	8007b5a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	8b1b      	ldrh	r3, [r3, #24]
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0208 	orr.w	r2, r2, #8
 8007b56:	b292      	uxth	r2, r2
 8007b58:	831a      	strh	r2, [r3, #24]
}
 8007b5a:	bf00      	nop
 8007b5c:	3770      	adds	r7, #112	@ 0x70
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	40008000 	.word	0x40008000

08007b68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b09c      	sub	sp, #112	@ 0x70
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b80:	2b22      	cmp	r3, #34	@ 0x22
 8007b82:	f040 80be 	bne.w	8007d02 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007b8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b94:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007b9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ba4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007baa:	1c9a      	adds	r2, r3, #2
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f040 80a3 	bne.w	8007d16 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bee:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bf0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007bf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c22:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e5      	bne.n	8007c02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a34      	ldr	r2, [pc, #208]	@ (8007d20 <UART_RxISR_16BIT+0x1b8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d01f      	beq.n	8007c94 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d018      	beq.n	8007c94 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c82:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e6      	bne.n	8007c62 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d12e      	bne.n	8007cfa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e6      	bne.n	8007ca2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d103      	bne.n	8007cea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff f87a 	bl	8006dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cf8:	e00d      	b.n	8007d16 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7f9 fa6c 	bl	80011d8 <HAL_UART_RxCpltCallback>
}
 8007d00:	e009      	b.n	8007d16 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	8b1b      	ldrh	r3, [r3, #24]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0208 	orr.w	r2, r2, #8
 8007d12:	b292      	uxth	r2, r2
 8007d14:	831a      	strh	r2, [r3, #24]
}
 8007d16:	bf00      	nop
 8007d18:	3770      	adds	r7, #112	@ 0x70
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40008000 	.word	0x40008000

08007d24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <siscanf>:
 8007d38:	b40e      	push	{r1, r2, r3}
 8007d3a:	b530      	push	{r4, r5, lr}
 8007d3c:	b09c      	sub	sp, #112	@ 0x70
 8007d3e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007d40:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007d44:	f854 5b04 	ldr.w	r5, [r4], #4
 8007d48:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	9006      	str	r0, [sp, #24]
 8007d50:	f7f8 fa3e 	bl	80001d0 <strlen>
 8007d54:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <siscanf+0x4c>)
 8007d56:	9003      	str	r0, [sp, #12]
 8007d58:	9007      	str	r0, [sp, #28]
 8007d5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d5c:	480a      	ldr	r0, [pc, #40]	@ (8007d88 <siscanf+0x50>)
 8007d5e:	9401      	str	r4, [sp, #4]
 8007d60:	2300      	movs	r3, #0
 8007d62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d64:	9314      	str	r3, [sp, #80]	@ 0x50
 8007d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d6e:	462a      	mov	r2, r5
 8007d70:	4623      	mov	r3, r4
 8007d72:	a902      	add	r1, sp, #8
 8007d74:	6800      	ldr	r0, [r0, #0]
 8007d76:	f000 f98f 	bl	8008098 <__ssvfiscanf_r>
 8007d7a:	b01c      	add	sp, #112	@ 0x70
 8007d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d80:	b003      	add	sp, #12
 8007d82:	4770      	bx	lr
 8007d84:	08007d8d 	.word	0x08007d8d
 8007d88:	20000010 	.word	0x20000010

08007d8c <__seofread>:
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	4770      	bx	lr

08007d90 <memset>:
 8007d90:	4402      	add	r2, r0
 8007d92:	4603      	mov	r3, r0
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d100      	bne.n	8007d9a <memset+0xa>
 8007d98:	4770      	bx	lr
 8007d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9e:	e7f9      	b.n	8007d94 <memset+0x4>

08007da0 <__errno>:
 8007da0:	4b01      	ldr	r3, [pc, #4]	@ (8007da8 <__errno+0x8>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000010 	.word	0x20000010

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4d0d      	ldr	r5, [pc, #52]	@ (8007de4 <__libc_init_array+0x38>)
 8007db0:	4c0d      	ldr	r4, [pc, #52]	@ (8007de8 <__libc_init_array+0x3c>)
 8007db2:	1b64      	subs	r4, r4, r5
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	2600      	movs	r6, #0
 8007db8:	42a6      	cmp	r6, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007dec <__libc_init_array+0x40>)
 8007dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007df0 <__libc_init_array+0x44>)
 8007dc0:	f001 f9aa 	bl	8009118 <_init>
 8007dc4:	1b64      	subs	r4, r4, r5
 8007dc6:	10a4      	asrs	r4, r4, #2
 8007dc8:	2600      	movs	r6, #0
 8007dca:	42a6      	cmp	r6, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd4:	4798      	blx	r3
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dde:	4798      	blx	r3
 8007de0:	3601      	adds	r6, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	080092c8 	.word	0x080092c8
 8007de8:	080092c8 	.word	0x080092c8
 8007dec:	080092c8 	.word	0x080092c8
 8007df0:	080092cc 	.word	0x080092cc

08007df4 <__retarget_lock_acquire_recursive>:
 8007df4:	4770      	bx	lr

08007df6 <__retarget_lock_release_recursive>:
 8007df6:	4770      	bx	lr

08007df8 <_free_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	2900      	cmp	r1, #0
 8007dfe:	d041      	beq.n	8007e84 <_free_r+0x8c>
 8007e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e04:	1f0c      	subs	r4, r1, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfb8      	it	lt
 8007e0a:	18e4      	addlt	r4, r4, r3
 8007e0c:	f000 f8e0 	bl	8007fd0 <__malloc_lock>
 8007e10:	4a1d      	ldr	r2, [pc, #116]	@ (8007e88 <_free_r+0x90>)
 8007e12:	6813      	ldr	r3, [r2, #0]
 8007e14:	b933      	cbnz	r3, 8007e24 <_free_r+0x2c>
 8007e16:	6063      	str	r3, [r4, #4]
 8007e18:	6014      	str	r4, [r2, #0]
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e20:	f000 b8dc 	b.w	8007fdc <__malloc_unlock>
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	d908      	bls.n	8007e3a <_free_r+0x42>
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	1821      	adds	r1, r4, r0
 8007e2c:	428b      	cmp	r3, r1
 8007e2e:	bf01      	itttt	eq
 8007e30:	6819      	ldreq	r1, [r3, #0]
 8007e32:	685b      	ldreq	r3, [r3, #4]
 8007e34:	1809      	addeq	r1, r1, r0
 8007e36:	6021      	streq	r1, [r4, #0]
 8007e38:	e7ed      	b.n	8007e16 <_free_r+0x1e>
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	b10b      	cbz	r3, 8007e44 <_free_r+0x4c>
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d9fa      	bls.n	8007e3a <_free_r+0x42>
 8007e44:	6811      	ldr	r1, [r2, #0]
 8007e46:	1850      	adds	r0, r2, r1
 8007e48:	42a0      	cmp	r0, r4
 8007e4a:	d10b      	bne.n	8007e64 <_free_r+0x6c>
 8007e4c:	6820      	ldr	r0, [r4, #0]
 8007e4e:	4401      	add	r1, r0
 8007e50:	1850      	adds	r0, r2, r1
 8007e52:	4283      	cmp	r3, r0
 8007e54:	6011      	str	r1, [r2, #0]
 8007e56:	d1e0      	bne.n	8007e1a <_free_r+0x22>
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	6053      	str	r3, [r2, #4]
 8007e5e:	4408      	add	r0, r1
 8007e60:	6010      	str	r0, [r2, #0]
 8007e62:	e7da      	b.n	8007e1a <_free_r+0x22>
 8007e64:	d902      	bls.n	8007e6c <_free_r+0x74>
 8007e66:	230c      	movs	r3, #12
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	e7d6      	b.n	8007e1a <_free_r+0x22>
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	1821      	adds	r1, r4, r0
 8007e70:	428b      	cmp	r3, r1
 8007e72:	bf04      	itt	eq
 8007e74:	6819      	ldreq	r1, [r3, #0]
 8007e76:	685b      	ldreq	r3, [r3, #4]
 8007e78:	6063      	str	r3, [r4, #4]
 8007e7a:	bf04      	itt	eq
 8007e7c:	1809      	addeq	r1, r1, r0
 8007e7e:	6021      	streq	r1, [r4, #0]
 8007e80:	6054      	str	r4, [r2, #4]
 8007e82:	e7ca      	b.n	8007e1a <_free_r+0x22>
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
 8007e86:	bf00      	nop
 8007e88:	20000458 	.word	0x20000458

08007e8c <sbrk_aligned>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007ecc <sbrk_aligned+0x40>)
 8007e90:	460c      	mov	r4, r1
 8007e92:	6831      	ldr	r1, [r6, #0]
 8007e94:	4605      	mov	r5, r0
 8007e96:	b911      	cbnz	r1, 8007e9e <sbrk_aligned+0x12>
 8007e98:	f000 fc34 	bl	8008704 <_sbrk_r>
 8007e9c:	6030      	str	r0, [r6, #0]
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f000 fc2f 	bl	8008704 <_sbrk_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d103      	bne.n	8007eb2 <sbrk_aligned+0x26>
 8007eaa:	f04f 34ff 	mov.w	r4, #4294967295
 8007eae:	4620      	mov	r0, r4
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
 8007eb2:	1cc4      	adds	r4, r0, #3
 8007eb4:	f024 0403 	bic.w	r4, r4, #3
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	d0f8      	beq.n	8007eae <sbrk_aligned+0x22>
 8007ebc:	1a21      	subs	r1, r4, r0
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f000 fc20 	bl	8008704 <_sbrk_r>
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d1f2      	bne.n	8007eae <sbrk_aligned+0x22>
 8007ec8:	e7ef      	b.n	8007eaa <sbrk_aligned+0x1e>
 8007eca:	bf00      	nop
 8007ecc:	20000454 	.word	0x20000454

08007ed0 <_malloc_r>:
 8007ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed4:	1ccd      	adds	r5, r1, #3
 8007ed6:	f025 0503 	bic.w	r5, r5, #3
 8007eda:	3508      	adds	r5, #8
 8007edc:	2d0c      	cmp	r5, #12
 8007ede:	bf38      	it	cc
 8007ee0:	250c      	movcc	r5, #12
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	db01      	blt.n	8007eec <_malloc_r+0x1c>
 8007ee8:	42a9      	cmp	r1, r5
 8007eea:	d904      	bls.n	8007ef6 <_malloc_r+0x26>
 8007eec:	230c      	movs	r3, #12
 8007eee:	6033      	str	r3, [r6, #0]
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fcc <_malloc_r+0xfc>
 8007efa:	f000 f869 	bl	8007fd0 <__malloc_lock>
 8007efe:	f8d8 3000 	ldr.w	r3, [r8]
 8007f02:	461c      	mov	r4, r3
 8007f04:	bb44      	cbnz	r4, 8007f58 <_malloc_r+0x88>
 8007f06:	4629      	mov	r1, r5
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff ffbf 	bl	8007e8c <sbrk_aligned>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	4604      	mov	r4, r0
 8007f12:	d158      	bne.n	8007fc6 <_malloc_r+0xf6>
 8007f14:	f8d8 4000 	ldr.w	r4, [r8]
 8007f18:	4627      	mov	r7, r4
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	d143      	bne.n	8007fa6 <_malloc_r+0xd6>
 8007f1e:	2c00      	cmp	r4, #0
 8007f20:	d04b      	beq.n	8007fba <_malloc_r+0xea>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	4639      	mov	r1, r7
 8007f26:	4630      	mov	r0, r6
 8007f28:	eb04 0903 	add.w	r9, r4, r3
 8007f2c:	f000 fbea 	bl	8008704 <_sbrk_r>
 8007f30:	4581      	cmp	r9, r0
 8007f32:	d142      	bne.n	8007fba <_malloc_r+0xea>
 8007f34:	6821      	ldr	r1, [r4, #0]
 8007f36:	1a6d      	subs	r5, r5, r1
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff ffa6 	bl	8007e8c <sbrk_aligned>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d03a      	beq.n	8007fba <_malloc_r+0xea>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	442b      	add	r3, r5
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	bb62      	cbnz	r2, 8007fac <_malloc_r+0xdc>
 8007f52:	f8c8 7000 	str.w	r7, [r8]
 8007f56:	e00f      	b.n	8007f78 <_malloc_r+0xa8>
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	1b52      	subs	r2, r2, r5
 8007f5c:	d420      	bmi.n	8007fa0 <_malloc_r+0xd0>
 8007f5e:	2a0b      	cmp	r2, #11
 8007f60:	d917      	bls.n	8007f92 <_malloc_r+0xc2>
 8007f62:	1961      	adds	r1, r4, r5
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	6025      	str	r5, [r4, #0]
 8007f68:	bf18      	it	ne
 8007f6a:	6059      	strne	r1, [r3, #4]
 8007f6c:	6863      	ldr	r3, [r4, #4]
 8007f6e:	bf08      	it	eq
 8007f70:	f8c8 1000 	streq.w	r1, [r8]
 8007f74:	5162      	str	r2, [r4, r5]
 8007f76:	604b      	str	r3, [r1, #4]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f82f 	bl	8007fdc <__malloc_unlock>
 8007f7e:	f104 000b 	add.w	r0, r4, #11
 8007f82:	1d23      	adds	r3, r4, #4
 8007f84:	f020 0007 	bic.w	r0, r0, #7
 8007f88:	1ac2      	subs	r2, r0, r3
 8007f8a:	bf1c      	itt	ne
 8007f8c:	1a1b      	subne	r3, r3, r0
 8007f8e:	50a3      	strne	r3, [r4, r2]
 8007f90:	e7af      	b.n	8007ef2 <_malloc_r+0x22>
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	bf0c      	ite	eq
 8007f98:	f8c8 2000 	streq.w	r2, [r8]
 8007f9c:	605a      	strne	r2, [r3, #4]
 8007f9e:	e7eb      	b.n	8007f78 <_malloc_r+0xa8>
 8007fa0:	4623      	mov	r3, r4
 8007fa2:	6864      	ldr	r4, [r4, #4]
 8007fa4:	e7ae      	b.n	8007f04 <_malloc_r+0x34>
 8007fa6:	463c      	mov	r4, r7
 8007fa8:	687f      	ldr	r7, [r7, #4]
 8007faa:	e7b6      	b.n	8007f1a <_malloc_r+0x4a>
 8007fac:	461a      	mov	r2, r3
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d1fb      	bne.n	8007fac <_malloc_r+0xdc>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6053      	str	r3, [r2, #4]
 8007fb8:	e7de      	b.n	8007f78 <_malloc_r+0xa8>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f000 f80c 	bl	8007fdc <__malloc_unlock>
 8007fc4:	e794      	b.n	8007ef0 <_malloc_r+0x20>
 8007fc6:	6005      	str	r5, [r0, #0]
 8007fc8:	e7d6      	b.n	8007f78 <_malloc_r+0xa8>
 8007fca:	bf00      	nop
 8007fcc:	20000458 	.word	0x20000458

08007fd0 <__malloc_lock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	@ (8007fd8 <__malloc_lock+0x8>)
 8007fd2:	f7ff bf0f 	b.w	8007df4 <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	20000450 	.word	0x20000450

08007fdc <__malloc_unlock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <__malloc_unlock+0x8>)
 8007fde:	f7ff bf0a 	b.w	8007df6 <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20000450 	.word	0x20000450

08007fe8 <_sungetc_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	1c4b      	adds	r3, r1, #1
 8007fec:	4614      	mov	r4, r2
 8007fee:	d103      	bne.n	8007ff8 <_sungetc_r+0x10>
 8007ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	8993      	ldrh	r3, [r2, #12]
 8007ffa:	f023 0320 	bic.w	r3, r3, #32
 8007ffe:	8193      	strh	r3, [r2, #12]
 8008000:	6853      	ldr	r3, [r2, #4]
 8008002:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008004:	b2cd      	uxtb	r5, r1
 8008006:	b18a      	cbz	r2, 800802c <_sungetc_r+0x44>
 8008008:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800800a:	429a      	cmp	r2, r3
 800800c:	dd08      	ble.n	8008020 <_sungetc_r+0x38>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	1e5a      	subs	r2, r3, #1
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	3301      	adds	r3, #1
 800801c:	6063      	str	r3, [r4, #4]
 800801e:	e7e9      	b.n	8007ff4 <_sungetc_r+0xc>
 8008020:	4621      	mov	r1, r4
 8008022:	f000 fb34 	bl	800868e <__submore>
 8008026:	2800      	cmp	r0, #0
 8008028:	d0f1      	beq.n	800800e <_sungetc_r+0x26>
 800802a:	e7e1      	b.n	8007ff0 <_sungetc_r+0x8>
 800802c:	6921      	ldr	r1, [r4, #16]
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	b141      	cbz	r1, 8008044 <_sungetc_r+0x5c>
 8008032:	4291      	cmp	r1, r2
 8008034:	d206      	bcs.n	8008044 <_sungetc_r+0x5c>
 8008036:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800803a:	42a9      	cmp	r1, r5
 800803c:	d102      	bne.n	8008044 <_sungetc_r+0x5c>
 800803e:	3a01      	subs	r2, #1
 8008040:	6022      	str	r2, [r4, #0]
 8008042:	e7ea      	b.n	800801a <_sungetc_r+0x32>
 8008044:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800804c:	6363      	str	r3, [r4, #52]	@ 0x34
 800804e:	2303      	movs	r3, #3
 8008050:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008052:	4623      	mov	r3, r4
 8008054:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	2301      	movs	r3, #1
 800805c:	e7de      	b.n	800801c <_sungetc_r+0x34>

0800805e <__ssrefill_r>:
 800805e:	b510      	push	{r4, lr}
 8008060:	460c      	mov	r4, r1
 8008062:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008064:	b169      	cbz	r1, 8008082 <__ssrefill_r+0x24>
 8008066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800806a:	4299      	cmp	r1, r3
 800806c:	d001      	beq.n	8008072 <__ssrefill_r+0x14>
 800806e:	f7ff fec3 	bl	8007df8 <_free_r>
 8008072:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	2000      	movs	r0, #0
 8008078:	6360      	str	r0, [r4, #52]	@ 0x34
 800807a:	b113      	cbz	r3, 8008082 <__ssrefill_r+0x24>
 800807c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd10      	pop	{r4, pc}
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	2300      	movs	r3, #0
 8008088:	6063      	str	r3, [r4, #4]
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f043 0320 	orr.w	r3, r3, #32
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	f04f 30ff 	mov.w	r0, #4294967295
 8008096:	e7f3      	b.n	8008080 <__ssrefill_r+0x22>

08008098 <__ssvfiscanf_r>:
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	460c      	mov	r4, r1
 800809e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80080a2:	2100      	movs	r1, #0
 80080a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80080a8:	49a5      	ldr	r1, [pc, #660]	@ (8008340 <__ssvfiscanf_r+0x2a8>)
 80080aa:	91a0      	str	r1, [sp, #640]	@ 0x280
 80080ac:	f10d 0804 	add.w	r8, sp, #4
 80080b0:	49a4      	ldr	r1, [pc, #656]	@ (8008344 <__ssvfiscanf_r+0x2ac>)
 80080b2:	4fa5      	ldr	r7, [pc, #660]	@ (8008348 <__ssvfiscanf_r+0x2b0>)
 80080b4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80080b8:	4606      	mov	r6, r0
 80080ba:	91a1      	str	r1, [sp, #644]	@ 0x284
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	7813      	ldrb	r3, [r2, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8158 	beq.w	8008376 <__ssvfiscanf_r+0x2de>
 80080c6:	5cf9      	ldrb	r1, [r7, r3]
 80080c8:	f011 0108 	ands.w	r1, r1, #8
 80080cc:	f102 0501 	add.w	r5, r2, #1
 80080d0:	d019      	beq.n	8008106 <__ssvfiscanf_r+0x6e>
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dd0f      	ble.n	80080f8 <__ssvfiscanf_r+0x60>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	5cba      	ldrb	r2, [r7, r2]
 80080de:	0712      	lsls	r2, r2, #28
 80080e0:	d401      	bmi.n	80080e6 <__ssvfiscanf_r+0x4e>
 80080e2:	462a      	mov	r2, r5
 80080e4:	e7eb      	b.n	80080be <__ssvfiscanf_r+0x26>
 80080e6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80080e8:	3201      	adds	r2, #1
 80080ea:	9245      	str	r2, [sp, #276]	@ 0x114
 80080ec:	6862      	ldr	r2, [r4, #4]
 80080ee:	3301      	adds	r3, #1
 80080f0:	3a01      	subs	r2, #1
 80080f2:	6062      	str	r2, [r4, #4]
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	e7ec      	b.n	80080d2 <__ssvfiscanf_r+0x3a>
 80080f8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80080fa:	4621      	mov	r1, r4
 80080fc:	4630      	mov	r0, r6
 80080fe:	4798      	blx	r3
 8008100:	2800      	cmp	r0, #0
 8008102:	d0e9      	beq.n	80080d8 <__ssvfiscanf_r+0x40>
 8008104:	e7ed      	b.n	80080e2 <__ssvfiscanf_r+0x4a>
 8008106:	2b25      	cmp	r3, #37	@ 0x25
 8008108:	d012      	beq.n	8008130 <__ssvfiscanf_r+0x98>
 800810a:	4699      	mov	r9, r3
 800810c:	6863      	ldr	r3, [r4, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f340 8093 	ble.w	800823a <__ssvfiscanf_r+0x1a2>
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	7813      	ldrb	r3, [r2, #0]
 8008118:	454b      	cmp	r3, r9
 800811a:	f040 812c 	bne.w	8008376 <__ssvfiscanf_r+0x2de>
 800811e:	6863      	ldr	r3, [r4, #4]
 8008120:	3b01      	subs	r3, #1
 8008122:	6063      	str	r3, [r4, #4]
 8008124:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008126:	3201      	adds	r2, #1
 8008128:	3301      	adds	r3, #1
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	9345      	str	r3, [sp, #276]	@ 0x114
 800812e:	e7d8      	b.n	80080e2 <__ssvfiscanf_r+0x4a>
 8008130:	9141      	str	r1, [sp, #260]	@ 0x104
 8008132:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008134:	7853      	ldrb	r3, [r2, #1]
 8008136:	2b2a      	cmp	r3, #42	@ 0x2a
 8008138:	bf02      	ittt	eq
 800813a:	2310      	moveq	r3, #16
 800813c:	1c95      	addeq	r5, r2, #2
 800813e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008140:	220a      	movs	r2, #10
 8008142:	46a9      	mov	r9, r5
 8008144:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008148:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800814c:	2b09      	cmp	r3, #9
 800814e:	d91e      	bls.n	800818e <__ssvfiscanf_r+0xf6>
 8008150:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800834c <__ssvfiscanf_r+0x2b4>
 8008154:	2203      	movs	r2, #3
 8008156:	4650      	mov	r0, sl
 8008158:	f7f8 f842 	bl	80001e0 <memchr>
 800815c:	b138      	cbz	r0, 800816e <__ssvfiscanf_r+0xd6>
 800815e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008160:	eba0 000a 	sub.w	r0, r0, sl
 8008164:	2301      	movs	r3, #1
 8008166:	4083      	lsls	r3, r0
 8008168:	4313      	orrs	r3, r2
 800816a:	9341      	str	r3, [sp, #260]	@ 0x104
 800816c:	464d      	mov	r5, r9
 800816e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008172:	2b78      	cmp	r3, #120	@ 0x78
 8008174:	d806      	bhi.n	8008184 <__ssvfiscanf_r+0xec>
 8008176:	2b57      	cmp	r3, #87	@ 0x57
 8008178:	d810      	bhi.n	800819c <__ssvfiscanf_r+0x104>
 800817a:	2b25      	cmp	r3, #37	@ 0x25
 800817c:	d0c5      	beq.n	800810a <__ssvfiscanf_r+0x72>
 800817e:	d857      	bhi.n	8008230 <__ssvfiscanf_r+0x198>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d065      	beq.n	8008250 <__ssvfiscanf_r+0x1b8>
 8008184:	2303      	movs	r3, #3
 8008186:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008188:	230a      	movs	r3, #10
 800818a:	9342      	str	r3, [sp, #264]	@ 0x108
 800818c:	e078      	b.n	8008280 <__ssvfiscanf_r+0x1e8>
 800818e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008190:	fb02 1103 	mla	r1, r2, r3, r1
 8008194:	3930      	subs	r1, #48	@ 0x30
 8008196:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008198:	464d      	mov	r5, r9
 800819a:	e7d2      	b.n	8008142 <__ssvfiscanf_r+0xaa>
 800819c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80081a0:	2a20      	cmp	r2, #32
 80081a2:	d8ef      	bhi.n	8008184 <__ssvfiscanf_r+0xec>
 80081a4:	a101      	add	r1, pc, #4	@ (adr r1, 80081ac <__ssvfiscanf_r+0x114>)
 80081a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	0800825f 	.word	0x0800825f
 80081b0:	08008185 	.word	0x08008185
 80081b4:	08008185 	.word	0x08008185
 80081b8:	080082b9 	.word	0x080082b9
 80081bc:	08008185 	.word	0x08008185
 80081c0:	08008185 	.word	0x08008185
 80081c4:	08008185 	.word	0x08008185
 80081c8:	08008185 	.word	0x08008185
 80081cc:	08008185 	.word	0x08008185
 80081d0:	08008185 	.word	0x08008185
 80081d4:	08008185 	.word	0x08008185
 80081d8:	080082cf 	.word	0x080082cf
 80081dc:	080082b5 	.word	0x080082b5
 80081e0:	08008237 	.word	0x08008237
 80081e4:	08008237 	.word	0x08008237
 80081e8:	08008237 	.word	0x08008237
 80081ec:	08008185 	.word	0x08008185
 80081f0:	08008271 	.word	0x08008271
 80081f4:	08008185 	.word	0x08008185
 80081f8:	08008185 	.word	0x08008185
 80081fc:	08008185 	.word	0x08008185
 8008200:	08008185 	.word	0x08008185
 8008204:	080082df 	.word	0x080082df
 8008208:	08008279 	.word	0x08008279
 800820c:	08008257 	.word	0x08008257
 8008210:	08008185 	.word	0x08008185
 8008214:	08008185 	.word	0x08008185
 8008218:	080082db 	.word	0x080082db
 800821c:	08008185 	.word	0x08008185
 8008220:	080082b5 	.word	0x080082b5
 8008224:	08008185 	.word	0x08008185
 8008228:	08008185 	.word	0x08008185
 800822c:	0800825f 	.word	0x0800825f
 8008230:	3b45      	subs	r3, #69	@ 0x45
 8008232:	2b02      	cmp	r3, #2
 8008234:	d8a6      	bhi.n	8008184 <__ssvfiscanf_r+0xec>
 8008236:	2305      	movs	r3, #5
 8008238:	e021      	b.n	800827e <__ssvfiscanf_r+0x1e6>
 800823a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800823c:	4621      	mov	r1, r4
 800823e:	4630      	mov	r0, r6
 8008240:	4798      	blx	r3
 8008242:	2800      	cmp	r0, #0
 8008244:	f43f af66 	beq.w	8008114 <__ssvfiscanf_r+0x7c>
 8008248:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800824a:	2800      	cmp	r0, #0
 800824c:	f040 808b 	bne.w	8008366 <__ssvfiscanf_r+0x2ce>
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
 8008254:	e08b      	b.n	800836e <__ssvfiscanf_r+0x2d6>
 8008256:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008258:	f042 0220 	orr.w	r2, r2, #32
 800825c:	9241      	str	r2, [sp, #260]	@ 0x104
 800825e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008264:	9241      	str	r2, [sp, #260]	@ 0x104
 8008266:	2210      	movs	r2, #16
 8008268:	2b6e      	cmp	r3, #110	@ 0x6e
 800826a:	9242      	str	r2, [sp, #264]	@ 0x108
 800826c:	d902      	bls.n	8008274 <__ssvfiscanf_r+0x1dc>
 800826e:	e005      	b.n	800827c <__ssvfiscanf_r+0x1e4>
 8008270:	2300      	movs	r3, #0
 8008272:	9342      	str	r3, [sp, #264]	@ 0x108
 8008274:	2303      	movs	r3, #3
 8008276:	e002      	b.n	800827e <__ssvfiscanf_r+0x1e6>
 8008278:	2308      	movs	r3, #8
 800827a:	9342      	str	r3, [sp, #264]	@ 0x108
 800827c:	2304      	movs	r3, #4
 800827e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	dd39      	ble.n	80082fa <__ssvfiscanf_r+0x262>
 8008286:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008288:	0659      	lsls	r1, r3, #25
 800828a:	d404      	bmi.n	8008296 <__ssvfiscanf_r+0x1fe>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	5cba      	ldrb	r2, [r7, r2]
 8008292:	0712      	lsls	r2, r2, #28
 8008294:	d438      	bmi.n	8008308 <__ssvfiscanf_r+0x270>
 8008296:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008298:	2b02      	cmp	r3, #2
 800829a:	dc47      	bgt.n	800832c <__ssvfiscanf_r+0x294>
 800829c:	466b      	mov	r3, sp
 800829e:	4622      	mov	r2, r4
 80082a0:	a941      	add	r1, sp, #260	@ 0x104
 80082a2:	4630      	mov	r0, r6
 80082a4:	f000 f86c 	bl	8008380 <_scanf_chars>
 80082a8:	2801      	cmp	r0, #1
 80082aa:	d064      	beq.n	8008376 <__ssvfiscanf_r+0x2de>
 80082ac:	2802      	cmp	r0, #2
 80082ae:	f47f af18 	bne.w	80080e2 <__ssvfiscanf_r+0x4a>
 80082b2:	e7c9      	b.n	8008248 <__ssvfiscanf_r+0x1b0>
 80082b4:	220a      	movs	r2, #10
 80082b6:	e7d7      	b.n	8008268 <__ssvfiscanf_r+0x1d0>
 80082b8:	4629      	mov	r1, r5
 80082ba:	4640      	mov	r0, r8
 80082bc:	f000 f9ae 	bl	800861c <__sccl>
 80082c0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80082c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082c6:	9341      	str	r3, [sp, #260]	@ 0x104
 80082c8:	4605      	mov	r5, r0
 80082ca:	2301      	movs	r3, #1
 80082cc:	e7d7      	b.n	800827e <__ssvfiscanf_r+0x1e6>
 80082ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80082d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d4:	9341      	str	r3, [sp, #260]	@ 0x104
 80082d6:	2300      	movs	r3, #0
 80082d8:	e7d1      	b.n	800827e <__ssvfiscanf_r+0x1e6>
 80082da:	2302      	movs	r3, #2
 80082dc:	e7cf      	b.n	800827e <__ssvfiscanf_r+0x1e6>
 80082de:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80082e0:	06c3      	lsls	r3, r0, #27
 80082e2:	f53f aefe 	bmi.w	80080e2 <__ssvfiscanf_r+0x4a>
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80082ea:	1d19      	adds	r1, r3, #4
 80082ec:	9100      	str	r1, [sp, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	07c0      	lsls	r0, r0, #31
 80082f2:	bf4c      	ite	mi
 80082f4:	801a      	strhmi	r2, [r3, #0]
 80082f6:	601a      	strpl	r2, [r3, #0]
 80082f8:	e6f3      	b.n	80080e2 <__ssvfiscanf_r+0x4a>
 80082fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80082fc:	4621      	mov	r1, r4
 80082fe:	4630      	mov	r0, r6
 8008300:	4798      	blx	r3
 8008302:	2800      	cmp	r0, #0
 8008304:	d0bf      	beq.n	8008286 <__ssvfiscanf_r+0x1ee>
 8008306:	e79f      	b.n	8008248 <__ssvfiscanf_r+0x1b0>
 8008308:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800830a:	3201      	adds	r2, #1
 800830c:	9245      	str	r2, [sp, #276]	@ 0x114
 800830e:	6862      	ldr	r2, [r4, #4]
 8008310:	3a01      	subs	r2, #1
 8008312:	2a00      	cmp	r2, #0
 8008314:	6062      	str	r2, [r4, #4]
 8008316:	dd02      	ble.n	800831e <__ssvfiscanf_r+0x286>
 8008318:	3301      	adds	r3, #1
 800831a:	6023      	str	r3, [r4, #0]
 800831c:	e7b6      	b.n	800828c <__ssvfiscanf_r+0x1f4>
 800831e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008320:	4621      	mov	r1, r4
 8008322:	4630      	mov	r0, r6
 8008324:	4798      	blx	r3
 8008326:	2800      	cmp	r0, #0
 8008328:	d0b0      	beq.n	800828c <__ssvfiscanf_r+0x1f4>
 800832a:	e78d      	b.n	8008248 <__ssvfiscanf_r+0x1b0>
 800832c:	2b04      	cmp	r3, #4
 800832e:	dc0f      	bgt.n	8008350 <__ssvfiscanf_r+0x2b8>
 8008330:	466b      	mov	r3, sp
 8008332:	4622      	mov	r2, r4
 8008334:	a941      	add	r1, sp, #260	@ 0x104
 8008336:	4630      	mov	r0, r6
 8008338:	f000 f87c 	bl	8008434 <_scanf_i>
 800833c:	e7b4      	b.n	80082a8 <__ssvfiscanf_r+0x210>
 800833e:	bf00      	nop
 8008340:	08007fe9 	.word	0x08007fe9
 8008344:	0800805f 	.word	0x0800805f
 8008348:	080091a8 	.word	0x080091a8
 800834c:	08009188 	.word	0x08009188
 8008350:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <__ssvfiscanf_r+0x2e4>)
 8008352:	2b00      	cmp	r3, #0
 8008354:	f43f aec5 	beq.w	80080e2 <__ssvfiscanf_r+0x4a>
 8008358:	466b      	mov	r3, sp
 800835a:	4622      	mov	r2, r4
 800835c:	a941      	add	r1, sp, #260	@ 0x104
 800835e:	4630      	mov	r0, r6
 8008360:	f3af 8000 	nop.w
 8008364:	e7a0      	b.n	80082a8 <__ssvfiscanf_r+0x210>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	065b      	lsls	r3, r3, #25
 800836a:	f53f af71 	bmi.w	8008250 <__ssvfiscanf_r+0x1b8>
 800836e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008376:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008378:	e7f9      	b.n	800836e <__ssvfiscanf_r+0x2d6>
 800837a:	bf00      	nop
 800837c:	00000000 	.word	0x00000000

08008380 <_scanf_chars>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4615      	mov	r5, r2
 8008386:	688a      	ldr	r2, [r1, #8]
 8008388:	4680      	mov	r8, r0
 800838a:	460c      	mov	r4, r1
 800838c:	b932      	cbnz	r2, 800839c <_scanf_chars+0x1c>
 800838e:	698a      	ldr	r2, [r1, #24]
 8008390:	2a00      	cmp	r2, #0
 8008392:	bf14      	ite	ne
 8008394:	f04f 32ff 	movne.w	r2, #4294967295
 8008398:	2201      	moveq	r2, #1
 800839a:	608a      	str	r2, [r1, #8]
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008430 <_scanf_chars+0xb0>
 80083a2:	06d1      	lsls	r1, r2, #27
 80083a4:	bf5f      	itttt	pl
 80083a6:	681a      	ldrpl	r2, [r3, #0]
 80083a8:	1d11      	addpl	r1, r2, #4
 80083aa:	6019      	strpl	r1, [r3, #0]
 80083ac:	6816      	ldrpl	r6, [r2, #0]
 80083ae:	2700      	movs	r7, #0
 80083b0:	69a0      	ldr	r0, [r4, #24]
 80083b2:	b188      	cbz	r0, 80083d8 <_scanf_chars+0x58>
 80083b4:	2801      	cmp	r0, #1
 80083b6:	d107      	bne.n	80083c8 <_scanf_chars+0x48>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	6963      	ldr	r3, [r4, #20]
 80083be:	5c9b      	ldrb	r3, [r3, r2]
 80083c0:	b953      	cbnz	r3, 80083d8 <_scanf_chars+0x58>
 80083c2:	2f00      	cmp	r7, #0
 80083c4:	d031      	beq.n	800842a <_scanf_chars+0xaa>
 80083c6:	e022      	b.n	800840e <_scanf_chars+0x8e>
 80083c8:	2802      	cmp	r0, #2
 80083ca:	d120      	bne.n	800840e <_scanf_chars+0x8e>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80083d4:	071b      	lsls	r3, r3, #28
 80083d6:	d41a      	bmi.n	800840e <_scanf_chars+0x8e>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	06da      	lsls	r2, r3, #27
 80083dc:	bf5e      	ittt	pl
 80083de:	682b      	ldrpl	r3, [r5, #0]
 80083e0:	781b      	ldrbpl	r3, [r3, #0]
 80083e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80083e6:	682a      	ldr	r2, [r5, #0]
 80083e8:	686b      	ldr	r3, [r5, #4]
 80083ea:	3201      	adds	r2, #1
 80083ec:	602a      	str	r2, [r5, #0]
 80083ee:	68a2      	ldr	r2, [r4, #8]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	3a01      	subs	r2, #1
 80083f4:	606b      	str	r3, [r5, #4]
 80083f6:	3701      	adds	r7, #1
 80083f8:	60a2      	str	r2, [r4, #8]
 80083fa:	b142      	cbz	r2, 800840e <_scanf_chars+0x8e>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dcd7      	bgt.n	80083b0 <_scanf_chars+0x30>
 8008400:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008404:	4629      	mov	r1, r5
 8008406:	4640      	mov	r0, r8
 8008408:	4798      	blx	r3
 800840a:	2800      	cmp	r0, #0
 800840c:	d0d0      	beq.n	80083b0 <_scanf_chars+0x30>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	f013 0310 	ands.w	r3, r3, #16
 8008414:	d105      	bne.n	8008422 <_scanf_chars+0xa2>
 8008416:	68e2      	ldr	r2, [r4, #12]
 8008418:	3201      	adds	r2, #1
 800841a:	60e2      	str	r2, [r4, #12]
 800841c:	69a2      	ldr	r2, [r4, #24]
 800841e:	b102      	cbz	r2, 8008422 <_scanf_chars+0xa2>
 8008420:	7033      	strb	r3, [r6, #0]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	443b      	add	r3, r7
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	2000      	movs	r0, #0
 800842a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842e:	bf00      	nop
 8008430:	080091a8 	.word	0x080091a8

08008434 <_scanf_i>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	4698      	mov	r8, r3
 800843a:	4b74      	ldr	r3, [pc, #464]	@ (800860c <_scanf_i+0x1d8>)
 800843c:	460c      	mov	r4, r1
 800843e:	4682      	mov	sl, r0
 8008440:	4616      	mov	r6, r2
 8008442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008446:	b087      	sub	sp, #28
 8008448:	ab03      	add	r3, sp, #12
 800844a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800844e:	4b70      	ldr	r3, [pc, #448]	@ (8008610 <_scanf_i+0x1dc>)
 8008450:	69a1      	ldr	r1, [r4, #24]
 8008452:	4a70      	ldr	r2, [pc, #448]	@ (8008614 <_scanf_i+0x1e0>)
 8008454:	2903      	cmp	r1, #3
 8008456:	bf08      	it	eq
 8008458:	461a      	moveq	r2, r3
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	9201      	str	r2, [sp, #4]
 800845e:	1e5a      	subs	r2, r3, #1
 8008460:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008464:	bf88      	it	hi
 8008466:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800846a:	4627      	mov	r7, r4
 800846c:	bf82      	ittt	hi
 800846e:	eb03 0905 	addhi.w	r9, r3, r5
 8008472:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008476:	60a3      	strhi	r3, [r4, #8]
 8008478:	f857 3b1c 	ldr.w	r3, [r7], #28
 800847c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008480:	bf98      	it	ls
 8008482:	f04f 0900 	movls.w	r9, #0
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	463d      	mov	r5, r7
 800848a:	f04f 0b00 	mov.w	fp, #0
 800848e:	6831      	ldr	r1, [r6, #0]
 8008490:	ab03      	add	r3, sp, #12
 8008492:	7809      	ldrb	r1, [r1, #0]
 8008494:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008498:	2202      	movs	r2, #2
 800849a:	f7f7 fea1 	bl	80001e0 <memchr>
 800849e:	b328      	cbz	r0, 80084ec <_scanf_i+0xb8>
 80084a0:	f1bb 0f01 	cmp.w	fp, #1
 80084a4:	d159      	bne.n	800855a <_scanf_i+0x126>
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	b92a      	cbnz	r2, 80084b6 <_scanf_i+0x82>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	2108      	movs	r1, #8
 80084ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084b2:	6061      	str	r1, [r4, #4]
 80084b4:	6022      	str	r2, [r4, #0]
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80084bc:	6022      	str	r2, [r4, #0]
 80084be:	68a2      	ldr	r2, [r4, #8]
 80084c0:	1e51      	subs	r1, r2, #1
 80084c2:	60a1      	str	r1, [r4, #8]
 80084c4:	b192      	cbz	r2, 80084ec <_scanf_i+0xb8>
 80084c6:	6832      	ldr	r2, [r6, #0]
 80084c8:	1c51      	adds	r1, r2, #1
 80084ca:	6031      	str	r1, [r6, #0]
 80084cc:	7812      	ldrb	r2, [r2, #0]
 80084ce:	f805 2b01 	strb.w	r2, [r5], #1
 80084d2:	6872      	ldr	r2, [r6, #4]
 80084d4:	3a01      	subs	r2, #1
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	6072      	str	r2, [r6, #4]
 80084da:	dc07      	bgt.n	80084ec <_scanf_i+0xb8>
 80084dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80084e0:	4631      	mov	r1, r6
 80084e2:	4650      	mov	r0, sl
 80084e4:	4790      	blx	r2
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f040 8085 	bne.w	80085f6 <_scanf_i+0x1c2>
 80084ec:	f10b 0b01 	add.w	fp, fp, #1
 80084f0:	f1bb 0f03 	cmp.w	fp, #3
 80084f4:	d1cb      	bne.n	800848e <_scanf_i+0x5a>
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	b90b      	cbnz	r3, 80084fe <_scanf_i+0xca>
 80084fa:	230a      	movs	r3, #10
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	6863      	ldr	r3, [r4, #4]
 8008500:	4945      	ldr	r1, [pc, #276]	@ (8008618 <_scanf_i+0x1e4>)
 8008502:	6960      	ldr	r0, [r4, #20]
 8008504:	1ac9      	subs	r1, r1, r3
 8008506:	f000 f889 	bl	800861c <__sccl>
 800850a:	f04f 0b00 	mov.w	fp, #0
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d03d      	beq.n	8008592 <_scanf_i+0x15e>
 8008516:	6831      	ldr	r1, [r6, #0]
 8008518:	6960      	ldr	r0, [r4, #20]
 800851a:	f891 c000 	ldrb.w	ip, [r1]
 800851e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008522:	2800      	cmp	r0, #0
 8008524:	d035      	beq.n	8008592 <_scanf_i+0x15e>
 8008526:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800852a:	d124      	bne.n	8008576 <_scanf_i+0x142>
 800852c:	0510      	lsls	r0, r2, #20
 800852e:	d522      	bpl.n	8008576 <_scanf_i+0x142>
 8008530:	f10b 0b01 	add.w	fp, fp, #1
 8008534:	f1b9 0f00 	cmp.w	r9, #0
 8008538:	d003      	beq.n	8008542 <_scanf_i+0x10e>
 800853a:	3301      	adds	r3, #1
 800853c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008540:	60a3      	str	r3, [r4, #8]
 8008542:	6873      	ldr	r3, [r6, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	6073      	str	r3, [r6, #4]
 800854a:	dd1b      	ble.n	8008584 <_scanf_i+0x150>
 800854c:	6833      	ldr	r3, [r6, #0]
 800854e:	3301      	adds	r3, #1
 8008550:	6033      	str	r3, [r6, #0]
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	3b01      	subs	r3, #1
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	e7d9      	b.n	800850e <_scanf_i+0xda>
 800855a:	f1bb 0f02 	cmp.w	fp, #2
 800855e:	d1ae      	bne.n	80084be <_scanf_i+0x8a>
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008566:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800856a:	d1bf      	bne.n	80084ec <_scanf_i+0xb8>
 800856c:	2110      	movs	r1, #16
 800856e:	6061      	str	r1, [r4, #4]
 8008570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008574:	e7a2      	b.n	80084bc <_scanf_i+0x88>
 8008576:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	780b      	ldrb	r3, [r1, #0]
 800857e:	f805 3b01 	strb.w	r3, [r5], #1
 8008582:	e7de      	b.n	8008542 <_scanf_i+0x10e>
 8008584:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008588:	4631      	mov	r1, r6
 800858a:	4650      	mov	r0, sl
 800858c:	4798      	blx	r3
 800858e:	2800      	cmp	r0, #0
 8008590:	d0df      	beq.n	8008552 <_scanf_i+0x11e>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	05d9      	lsls	r1, r3, #23
 8008596:	d50d      	bpl.n	80085b4 <_scanf_i+0x180>
 8008598:	42bd      	cmp	r5, r7
 800859a:	d909      	bls.n	80085b0 <_scanf_i+0x17c>
 800859c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80085a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085a4:	4632      	mov	r2, r6
 80085a6:	4650      	mov	r0, sl
 80085a8:	4798      	blx	r3
 80085aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80085ae:	464d      	mov	r5, r9
 80085b0:	42bd      	cmp	r5, r7
 80085b2:	d028      	beq.n	8008606 <_scanf_i+0x1d2>
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	f012 0210 	ands.w	r2, r2, #16
 80085ba:	d113      	bne.n	80085e4 <_scanf_i+0x1b0>
 80085bc:	702a      	strb	r2, [r5, #0]
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	9e01      	ldr	r6, [sp, #4]
 80085c2:	4639      	mov	r1, r7
 80085c4:	4650      	mov	r0, sl
 80085c6:	47b0      	blx	r6
 80085c8:	f8d8 3000 	ldr.w	r3, [r8]
 80085cc:	6821      	ldr	r1, [r4, #0]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	f8c8 2000 	str.w	r2, [r8]
 80085d4:	f011 0f20 	tst.w	r1, #32
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	d00f      	beq.n	80085fc <_scanf_i+0x1c8>
 80085dc:	6018      	str	r0, [r3, #0]
 80085de:	68e3      	ldr	r3, [r4, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60e3      	str	r3, [r4, #12]
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	1bed      	subs	r5, r5, r7
 80085e8:	445d      	add	r5, fp
 80085ea:	442b      	add	r3, r5
 80085ec:	6123      	str	r3, [r4, #16]
 80085ee:	2000      	movs	r0, #0
 80085f0:	b007      	add	sp, #28
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	f04f 0b00 	mov.w	fp, #0
 80085fa:	e7ca      	b.n	8008592 <_scanf_i+0x15e>
 80085fc:	07ca      	lsls	r2, r1, #31
 80085fe:	bf4c      	ite	mi
 8008600:	8018      	strhmi	r0, [r3, #0]
 8008602:	6018      	strpl	r0, [r3, #0]
 8008604:	e7eb      	b.n	80085de <_scanf_i+0x1aa>
 8008606:	2001      	movs	r0, #1
 8008608:	e7f2      	b.n	80085f0 <_scanf_i+0x1bc>
 800860a:	bf00      	nop
 800860c:	08009134 	.word	0x08009134
 8008610:	08008891 	.word	0x08008891
 8008614:	08008971 	.word	0x08008971
 8008618:	0800919c 	.word	0x0800919c

0800861c <__sccl>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	780b      	ldrb	r3, [r1, #0]
 8008620:	4604      	mov	r4, r0
 8008622:	2b5e      	cmp	r3, #94	@ 0x5e
 8008624:	bf0b      	itete	eq
 8008626:	784b      	ldrbeq	r3, [r1, #1]
 8008628:	1c4a      	addne	r2, r1, #1
 800862a:	1c8a      	addeq	r2, r1, #2
 800862c:	2100      	movne	r1, #0
 800862e:	bf08      	it	eq
 8008630:	2101      	moveq	r1, #1
 8008632:	3801      	subs	r0, #1
 8008634:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008638:	f800 1f01 	strb.w	r1, [r0, #1]!
 800863c:	42a8      	cmp	r0, r5
 800863e:	d1fb      	bne.n	8008638 <__sccl+0x1c>
 8008640:	b90b      	cbnz	r3, 8008646 <__sccl+0x2a>
 8008642:	1e50      	subs	r0, r2, #1
 8008644:	bd70      	pop	{r4, r5, r6, pc}
 8008646:	f081 0101 	eor.w	r1, r1, #1
 800864a:	54e1      	strb	r1, [r4, r3]
 800864c:	4610      	mov	r0, r2
 800864e:	4602      	mov	r2, r0
 8008650:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008654:	2d2d      	cmp	r5, #45	@ 0x2d
 8008656:	d005      	beq.n	8008664 <__sccl+0x48>
 8008658:	2d5d      	cmp	r5, #93	@ 0x5d
 800865a:	d016      	beq.n	800868a <__sccl+0x6e>
 800865c:	2d00      	cmp	r5, #0
 800865e:	d0f1      	beq.n	8008644 <__sccl+0x28>
 8008660:	462b      	mov	r3, r5
 8008662:	e7f2      	b.n	800864a <__sccl+0x2e>
 8008664:	7846      	ldrb	r6, [r0, #1]
 8008666:	2e5d      	cmp	r6, #93	@ 0x5d
 8008668:	d0fa      	beq.n	8008660 <__sccl+0x44>
 800866a:	42b3      	cmp	r3, r6
 800866c:	dcf8      	bgt.n	8008660 <__sccl+0x44>
 800866e:	3002      	adds	r0, #2
 8008670:	461a      	mov	r2, r3
 8008672:	3201      	adds	r2, #1
 8008674:	4296      	cmp	r6, r2
 8008676:	54a1      	strb	r1, [r4, r2]
 8008678:	dcfb      	bgt.n	8008672 <__sccl+0x56>
 800867a:	1af2      	subs	r2, r6, r3
 800867c:	3a01      	subs	r2, #1
 800867e:	1c5d      	adds	r5, r3, #1
 8008680:	42b3      	cmp	r3, r6
 8008682:	bfa8      	it	ge
 8008684:	2200      	movge	r2, #0
 8008686:	18ab      	adds	r3, r5, r2
 8008688:	e7e1      	b.n	800864e <__sccl+0x32>
 800868a:	4610      	mov	r0, r2
 800868c:	e7da      	b.n	8008644 <__sccl+0x28>

0800868e <__submore>:
 800868e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008692:	460c      	mov	r4, r1
 8008694:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008696:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800869a:	4299      	cmp	r1, r3
 800869c:	d11d      	bne.n	80086da <__submore+0x4c>
 800869e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80086a2:	f7ff fc15 	bl	8007ed0 <_malloc_r>
 80086a6:	b918      	cbnz	r0, 80086b0 <__submore+0x22>
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80086b6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80086ba:	6360      	str	r0, [r4, #52]	@ 0x34
 80086bc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80086c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80086c4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80086c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80086cc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80086d0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80086d4:	6020      	str	r0, [r4, #0]
 80086d6:	2000      	movs	r0, #0
 80086d8:	e7e8      	b.n	80086ac <__submore+0x1e>
 80086da:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80086dc:	0077      	lsls	r7, r6, #1
 80086de:	463a      	mov	r2, r7
 80086e0:	f000 f82e 	bl	8008740 <_realloc_r>
 80086e4:	4605      	mov	r5, r0
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0de      	beq.n	80086a8 <__submore+0x1a>
 80086ea:	eb00 0806 	add.w	r8, r0, r6
 80086ee:	4601      	mov	r1, r0
 80086f0:	4632      	mov	r2, r6
 80086f2:	4640      	mov	r0, r8
 80086f4:	f000 f816 	bl	8008724 <memcpy>
 80086f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80086fc:	f8c4 8000 	str.w	r8, [r4]
 8008700:	e7e9      	b.n	80086d6 <__submore+0x48>
	...

08008704 <_sbrk_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4d06      	ldr	r5, [pc, #24]	@ (8008720 <_sbrk_r+0x1c>)
 8008708:	2300      	movs	r3, #0
 800870a:	4604      	mov	r4, r0
 800870c:	4608      	mov	r0, r1
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	f7f9 f89a 	bl	8001848 <_sbrk>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d102      	bne.n	800871e <_sbrk_r+0x1a>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	b103      	cbz	r3, 800871e <_sbrk_r+0x1a>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	2000044c 	.word	0x2000044c

08008724 <memcpy>:
 8008724:	440a      	add	r2, r1
 8008726:	4291      	cmp	r1, r2
 8008728:	f100 33ff 	add.w	r3, r0, #4294967295
 800872c:	d100      	bne.n	8008730 <memcpy+0xc>
 800872e:	4770      	bx	lr
 8008730:	b510      	push	{r4, lr}
 8008732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800873a:	4291      	cmp	r1, r2
 800873c:	d1f9      	bne.n	8008732 <memcpy+0xe>
 800873e:	bd10      	pop	{r4, pc}

08008740 <_realloc_r>:
 8008740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008744:	4680      	mov	r8, r0
 8008746:	4615      	mov	r5, r2
 8008748:	460c      	mov	r4, r1
 800874a:	b921      	cbnz	r1, 8008756 <_realloc_r+0x16>
 800874c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008750:	4611      	mov	r1, r2
 8008752:	f7ff bbbd 	b.w	8007ed0 <_malloc_r>
 8008756:	b92a      	cbnz	r2, 8008764 <_realloc_r+0x24>
 8008758:	f7ff fb4e 	bl	8007df8 <_free_r>
 800875c:	2400      	movs	r4, #0
 800875e:	4620      	mov	r0, r4
 8008760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008764:	f000 f906 	bl	8008974 <_malloc_usable_size_r>
 8008768:	4285      	cmp	r5, r0
 800876a:	4606      	mov	r6, r0
 800876c:	d802      	bhi.n	8008774 <_realloc_r+0x34>
 800876e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008772:	d8f4      	bhi.n	800875e <_realloc_r+0x1e>
 8008774:	4629      	mov	r1, r5
 8008776:	4640      	mov	r0, r8
 8008778:	f7ff fbaa 	bl	8007ed0 <_malloc_r>
 800877c:	4607      	mov	r7, r0
 800877e:	2800      	cmp	r0, #0
 8008780:	d0ec      	beq.n	800875c <_realloc_r+0x1c>
 8008782:	42b5      	cmp	r5, r6
 8008784:	462a      	mov	r2, r5
 8008786:	4621      	mov	r1, r4
 8008788:	bf28      	it	cs
 800878a:	4632      	movcs	r2, r6
 800878c:	f7ff ffca 	bl	8008724 <memcpy>
 8008790:	4621      	mov	r1, r4
 8008792:	4640      	mov	r0, r8
 8008794:	f7ff fb30 	bl	8007df8 <_free_r>
 8008798:	463c      	mov	r4, r7
 800879a:	e7e0      	b.n	800875e <_realloc_r+0x1e>

0800879c <_strtol_l.constprop.0>:
 800879c:	2b24      	cmp	r3, #36	@ 0x24
 800879e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a2:	4686      	mov	lr, r0
 80087a4:	4690      	mov	r8, r2
 80087a6:	d801      	bhi.n	80087ac <_strtol_l.constprop.0+0x10>
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d106      	bne.n	80087ba <_strtol_l.constprop.0+0x1e>
 80087ac:	f7ff faf8 	bl	8007da0 <__errno>
 80087b0:	2316      	movs	r3, #22
 80087b2:	6003      	str	r3, [r0, #0]
 80087b4:	2000      	movs	r0, #0
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	4834      	ldr	r0, [pc, #208]	@ (800888c <_strtol_l.constprop.0+0xf0>)
 80087bc:	460d      	mov	r5, r1
 80087be:	462a      	mov	r2, r5
 80087c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087c4:	5d06      	ldrb	r6, [r0, r4]
 80087c6:	f016 0608 	ands.w	r6, r6, #8
 80087ca:	d1f8      	bne.n	80087be <_strtol_l.constprop.0+0x22>
 80087cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80087ce:	d12d      	bne.n	800882c <_strtol_l.constprop.0+0x90>
 80087d0:	782c      	ldrb	r4, [r5, #0]
 80087d2:	2601      	movs	r6, #1
 80087d4:	1c95      	adds	r5, r2, #2
 80087d6:	f033 0210 	bics.w	r2, r3, #16
 80087da:	d109      	bne.n	80087f0 <_strtol_l.constprop.0+0x54>
 80087dc:	2c30      	cmp	r4, #48	@ 0x30
 80087de:	d12a      	bne.n	8008836 <_strtol_l.constprop.0+0x9a>
 80087e0:	782a      	ldrb	r2, [r5, #0]
 80087e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087e6:	2a58      	cmp	r2, #88	@ 0x58
 80087e8:	d125      	bne.n	8008836 <_strtol_l.constprop.0+0x9a>
 80087ea:	786c      	ldrb	r4, [r5, #1]
 80087ec:	2310      	movs	r3, #16
 80087ee:	3502      	adds	r5, #2
 80087f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80087f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087f8:	2200      	movs	r2, #0
 80087fa:	fbbc f9f3 	udiv	r9, ip, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	fb03 ca19 	mls	sl, r3, r9, ip
 8008804:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008808:	2f09      	cmp	r7, #9
 800880a:	d81b      	bhi.n	8008844 <_strtol_l.constprop.0+0xa8>
 800880c:	463c      	mov	r4, r7
 800880e:	42a3      	cmp	r3, r4
 8008810:	dd27      	ble.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008812:	1c57      	adds	r7, r2, #1
 8008814:	d007      	beq.n	8008826 <_strtol_l.constprop.0+0x8a>
 8008816:	4581      	cmp	r9, r0
 8008818:	d320      	bcc.n	800885c <_strtol_l.constprop.0+0xc0>
 800881a:	d101      	bne.n	8008820 <_strtol_l.constprop.0+0x84>
 800881c:	45a2      	cmp	sl, r4
 800881e:	db1d      	blt.n	800885c <_strtol_l.constprop.0+0xc0>
 8008820:	fb00 4003 	mla	r0, r0, r3, r4
 8008824:	2201      	movs	r2, #1
 8008826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800882a:	e7eb      	b.n	8008804 <_strtol_l.constprop.0+0x68>
 800882c:	2c2b      	cmp	r4, #43	@ 0x2b
 800882e:	bf04      	itt	eq
 8008830:	782c      	ldrbeq	r4, [r5, #0]
 8008832:	1c95      	addeq	r5, r2, #2
 8008834:	e7cf      	b.n	80087d6 <_strtol_l.constprop.0+0x3a>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1da      	bne.n	80087f0 <_strtol_l.constprop.0+0x54>
 800883a:	2c30      	cmp	r4, #48	@ 0x30
 800883c:	bf0c      	ite	eq
 800883e:	2308      	moveq	r3, #8
 8008840:	230a      	movne	r3, #10
 8008842:	e7d5      	b.n	80087f0 <_strtol_l.constprop.0+0x54>
 8008844:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008848:	2f19      	cmp	r7, #25
 800884a:	d801      	bhi.n	8008850 <_strtol_l.constprop.0+0xb4>
 800884c:	3c37      	subs	r4, #55	@ 0x37
 800884e:	e7de      	b.n	800880e <_strtol_l.constprop.0+0x72>
 8008850:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008854:	2f19      	cmp	r7, #25
 8008856:	d804      	bhi.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008858:	3c57      	subs	r4, #87	@ 0x57
 800885a:	e7d8      	b.n	800880e <_strtol_l.constprop.0+0x72>
 800885c:	f04f 32ff 	mov.w	r2, #4294967295
 8008860:	e7e1      	b.n	8008826 <_strtol_l.constprop.0+0x8a>
 8008862:	1c53      	adds	r3, r2, #1
 8008864:	d108      	bne.n	8008878 <_strtol_l.constprop.0+0xdc>
 8008866:	2322      	movs	r3, #34	@ 0x22
 8008868:	f8ce 3000 	str.w	r3, [lr]
 800886c:	4660      	mov	r0, ip
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	d0a0      	beq.n	80087b6 <_strtol_l.constprop.0+0x1a>
 8008874:	1e69      	subs	r1, r5, #1
 8008876:	e006      	b.n	8008886 <_strtol_l.constprop.0+0xea>
 8008878:	b106      	cbz	r6, 800887c <_strtol_l.constprop.0+0xe0>
 800887a:	4240      	negs	r0, r0
 800887c:	f1b8 0f00 	cmp.w	r8, #0
 8008880:	d099      	beq.n	80087b6 <_strtol_l.constprop.0+0x1a>
 8008882:	2a00      	cmp	r2, #0
 8008884:	d1f6      	bne.n	8008874 <_strtol_l.constprop.0+0xd8>
 8008886:	f8c8 1000 	str.w	r1, [r8]
 800888a:	e794      	b.n	80087b6 <_strtol_l.constprop.0+0x1a>
 800888c:	080091a8 	.word	0x080091a8

08008890 <_strtol_r>:
 8008890:	f7ff bf84 	b.w	800879c <_strtol_l.constprop.0>

08008894 <_strtoul_l.constprop.0>:
 8008894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008898:	4e34      	ldr	r6, [pc, #208]	@ (800896c <_strtoul_l.constprop.0+0xd8>)
 800889a:	4686      	mov	lr, r0
 800889c:	460d      	mov	r5, r1
 800889e:	4628      	mov	r0, r5
 80088a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088a4:	5d37      	ldrb	r7, [r6, r4]
 80088a6:	f017 0708 	ands.w	r7, r7, #8
 80088aa:	d1f8      	bne.n	800889e <_strtoul_l.constprop.0+0xa>
 80088ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80088ae:	d12f      	bne.n	8008910 <_strtoul_l.constprop.0+0x7c>
 80088b0:	782c      	ldrb	r4, [r5, #0]
 80088b2:	2701      	movs	r7, #1
 80088b4:	1c85      	adds	r5, r0, #2
 80088b6:	f033 0010 	bics.w	r0, r3, #16
 80088ba:	d109      	bne.n	80088d0 <_strtoul_l.constprop.0+0x3c>
 80088bc:	2c30      	cmp	r4, #48	@ 0x30
 80088be:	d12c      	bne.n	800891a <_strtoul_l.constprop.0+0x86>
 80088c0:	7828      	ldrb	r0, [r5, #0]
 80088c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80088c6:	2858      	cmp	r0, #88	@ 0x58
 80088c8:	d127      	bne.n	800891a <_strtoul_l.constprop.0+0x86>
 80088ca:	786c      	ldrb	r4, [r5, #1]
 80088cc:	2310      	movs	r3, #16
 80088ce:	3502      	adds	r5, #2
 80088d0:	f04f 38ff 	mov.w	r8, #4294967295
 80088d4:	2600      	movs	r6, #0
 80088d6:	fbb8 f8f3 	udiv	r8, r8, r3
 80088da:	fb03 f908 	mul.w	r9, r3, r8
 80088de:	ea6f 0909 	mvn.w	r9, r9
 80088e2:	4630      	mov	r0, r6
 80088e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80088e8:	f1bc 0f09 	cmp.w	ip, #9
 80088ec:	d81c      	bhi.n	8008928 <_strtoul_l.constprop.0+0x94>
 80088ee:	4664      	mov	r4, ip
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	dd2a      	ble.n	800894a <_strtoul_l.constprop.0+0xb6>
 80088f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80088f8:	d007      	beq.n	800890a <_strtoul_l.constprop.0+0x76>
 80088fa:	4580      	cmp	r8, r0
 80088fc:	d322      	bcc.n	8008944 <_strtoul_l.constprop.0+0xb0>
 80088fe:	d101      	bne.n	8008904 <_strtoul_l.constprop.0+0x70>
 8008900:	45a1      	cmp	r9, r4
 8008902:	db1f      	blt.n	8008944 <_strtoul_l.constprop.0+0xb0>
 8008904:	fb00 4003 	mla	r0, r0, r3, r4
 8008908:	2601      	movs	r6, #1
 800890a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800890e:	e7e9      	b.n	80088e4 <_strtoul_l.constprop.0+0x50>
 8008910:	2c2b      	cmp	r4, #43	@ 0x2b
 8008912:	bf04      	itt	eq
 8008914:	782c      	ldrbeq	r4, [r5, #0]
 8008916:	1c85      	addeq	r5, r0, #2
 8008918:	e7cd      	b.n	80088b6 <_strtoul_l.constprop.0+0x22>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1d8      	bne.n	80088d0 <_strtoul_l.constprop.0+0x3c>
 800891e:	2c30      	cmp	r4, #48	@ 0x30
 8008920:	bf0c      	ite	eq
 8008922:	2308      	moveq	r3, #8
 8008924:	230a      	movne	r3, #10
 8008926:	e7d3      	b.n	80088d0 <_strtoul_l.constprop.0+0x3c>
 8008928:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800892c:	f1bc 0f19 	cmp.w	ip, #25
 8008930:	d801      	bhi.n	8008936 <_strtoul_l.constprop.0+0xa2>
 8008932:	3c37      	subs	r4, #55	@ 0x37
 8008934:	e7dc      	b.n	80088f0 <_strtoul_l.constprop.0+0x5c>
 8008936:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800893a:	f1bc 0f19 	cmp.w	ip, #25
 800893e:	d804      	bhi.n	800894a <_strtoul_l.constprop.0+0xb6>
 8008940:	3c57      	subs	r4, #87	@ 0x57
 8008942:	e7d5      	b.n	80088f0 <_strtoul_l.constprop.0+0x5c>
 8008944:	f04f 36ff 	mov.w	r6, #4294967295
 8008948:	e7df      	b.n	800890a <_strtoul_l.constprop.0+0x76>
 800894a:	1c73      	adds	r3, r6, #1
 800894c:	d106      	bne.n	800895c <_strtoul_l.constprop.0+0xc8>
 800894e:	2322      	movs	r3, #34	@ 0x22
 8008950:	f8ce 3000 	str.w	r3, [lr]
 8008954:	4630      	mov	r0, r6
 8008956:	b932      	cbnz	r2, 8008966 <_strtoul_l.constprop.0+0xd2>
 8008958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895c:	b107      	cbz	r7, 8008960 <_strtoul_l.constprop.0+0xcc>
 800895e:	4240      	negs	r0, r0
 8008960:	2a00      	cmp	r2, #0
 8008962:	d0f9      	beq.n	8008958 <_strtoul_l.constprop.0+0xc4>
 8008964:	b106      	cbz	r6, 8008968 <_strtoul_l.constprop.0+0xd4>
 8008966:	1e69      	subs	r1, r5, #1
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	e7f5      	b.n	8008958 <_strtoul_l.constprop.0+0xc4>
 800896c:	080091a8 	.word	0x080091a8

08008970 <_strtoul_r>:
 8008970:	f7ff bf90 	b.w	8008894 <_strtoul_l.constprop.0>

08008974 <_malloc_usable_size_r>:
 8008974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008978:	1f18      	subs	r0, r3, #4
 800897a:	2b00      	cmp	r3, #0
 800897c:	bfbc      	itt	lt
 800897e:	580b      	ldrlt	r3, [r1, r0]
 8008980:	18c0      	addlt	r0, r0, r3
 8008982:	4770      	bx	lr

08008984 <powf>:
 8008984:	b508      	push	{r3, lr}
 8008986:	ed2d 8b04 	vpush	{d8-d9}
 800898a:	eeb0 8a60 	vmov.f32	s16, s1
 800898e:	eeb0 9a40 	vmov.f32	s18, s0
 8008992:	f000 f859 	bl	8008a48 <__ieee754_powf>
 8008996:	eeb4 8a48 	vcmp.f32	s16, s16
 800899a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899e:	eef0 8a40 	vmov.f32	s17, s0
 80089a2:	d63e      	bvs.n	8008a22 <powf+0x9e>
 80089a4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80089a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ac:	d112      	bne.n	80089d4 <powf+0x50>
 80089ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80089b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b6:	d039      	beq.n	8008a2c <powf+0xa8>
 80089b8:	eeb0 0a48 	vmov.f32	s0, s16
 80089bc:	f000 f839 	bl	8008a32 <finitef>
 80089c0:	b378      	cbz	r0, 8008a22 <powf+0x9e>
 80089c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80089c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ca:	d52a      	bpl.n	8008a22 <powf+0x9e>
 80089cc:	f7ff f9e8 	bl	8007da0 <__errno>
 80089d0:	2322      	movs	r3, #34	@ 0x22
 80089d2:	e014      	b.n	80089fe <powf+0x7a>
 80089d4:	f000 f82d 	bl	8008a32 <finitef>
 80089d8:	b998      	cbnz	r0, 8008a02 <powf+0x7e>
 80089da:	eeb0 0a49 	vmov.f32	s0, s18
 80089de:	f000 f828 	bl	8008a32 <finitef>
 80089e2:	b170      	cbz	r0, 8008a02 <powf+0x7e>
 80089e4:	eeb0 0a48 	vmov.f32	s0, s16
 80089e8:	f000 f823 	bl	8008a32 <finitef>
 80089ec:	b148      	cbz	r0, 8008a02 <powf+0x7e>
 80089ee:	eef4 8a68 	vcmp.f32	s17, s17
 80089f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f6:	d7e9      	bvc.n	80089cc <powf+0x48>
 80089f8:	f7ff f9d2 	bl	8007da0 <__errno>
 80089fc:	2321      	movs	r3, #33	@ 0x21
 80089fe:	6003      	str	r3, [r0, #0]
 8008a00:	e00f      	b.n	8008a22 <powf+0x9e>
 8008a02:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0a:	d10a      	bne.n	8008a22 <powf+0x9e>
 8008a0c:	eeb0 0a49 	vmov.f32	s0, s18
 8008a10:	f000 f80f 	bl	8008a32 <finitef>
 8008a14:	b128      	cbz	r0, 8008a22 <powf+0x9e>
 8008a16:	eeb0 0a48 	vmov.f32	s0, s16
 8008a1a:	f000 f80a 	bl	8008a32 <finitef>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d1d4      	bne.n	80089cc <powf+0x48>
 8008a22:	eeb0 0a68 	vmov.f32	s0, s17
 8008a26:	ecbd 8b04 	vpop	{d8-d9}
 8008a2a:	bd08      	pop	{r3, pc}
 8008a2c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8008a30:	e7f7      	b.n	8008a22 <powf+0x9e>

08008a32 <finitef>:
 8008a32:	ee10 3a10 	vmov	r3, s0
 8008a36:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008a3a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008a3e:	bfac      	ite	ge
 8008a40:	2000      	movge	r0, #0
 8008a42:	2001      	movlt	r0, #1
 8008a44:	4770      	bx	lr
	...

08008a48 <__ieee754_powf>:
 8008a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	ee10 4a90 	vmov	r4, s1
 8008a50:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8008a54:	ed2d 8b02 	vpush	{d8}
 8008a58:	ee10 6a10 	vmov	r6, s0
 8008a5c:	eeb0 8a40 	vmov.f32	s16, s0
 8008a60:	eef0 8a60 	vmov.f32	s17, s1
 8008a64:	d10c      	bne.n	8008a80 <__ieee754_powf+0x38>
 8008a66:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8008a6a:	0076      	lsls	r6, r6, #1
 8008a6c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8008a70:	f240 829c 	bls.w	8008fac <__ieee754_powf+0x564>
 8008a74:	ee38 0a28 	vadd.f32	s0, s16, s17
 8008a78:	ecbd 8b02 	vpop	{d8}
 8008a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a80:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8008a84:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8008a88:	d802      	bhi.n	8008a90 <__ieee754_powf+0x48>
 8008a8a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008a8e:	d908      	bls.n	8008aa2 <__ieee754_powf+0x5a>
 8008a90:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8008a94:	d1ee      	bne.n	8008a74 <__ieee754_powf+0x2c>
 8008a96:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8008a9a:	0064      	lsls	r4, r4, #1
 8008a9c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8008aa0:	e7e6      	b.n	8008a70 <__ieee754_powf+0x28>
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	da1e      	bge.n	8008ae4 <__ieee754_powf+0x9c>
 8008aa6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8008aaa:	d22b      	bcs.n	8008b04 <__ieee754_powf+0xbc>
 8008aac:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008ab0:	d332      	bcc.n	8008b18 <__ieee754_powf+0xd0>
 8008ab2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8008ab6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008aba:	fa49 f503 	asr.w	r5, r9, r3
 8008abe:	fa05 f303 	lsl.w	r3, r5, r3
 8008ac2:	454b      	cmp	r3, r9
 8008ac4:	d126      	bne.n	8008b14 <__ieee754_powf+0xcc>
 8008ac6:	f005 0501 	and.w	r5, r5, #1
 8008aca:	f1c5 0502 	rsb	r5, r5, #2
 8008ace:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008ad2:	d122      	bne.n	8008b1a <__ieee754_powf+0xd2>
 8008ad4:	2c00      	cmp	r4, #0
 8008ad6:	f280 826f 	bge.w	8008fb8 <__ieee754_powf+0x570>
 8008ada:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008ade:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008ae2:	e7c9      	b.n	8008a78 <__ieee754_powf+0x30>
 8008ae4:	2500      	movs	r5, #0
 8008ae6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008aea:	d1f0      	bne.n	8008ace <__ieee754_powf+0x86>
 8008aec:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8008af0:	f000 825c 	beq.w	8008fac <__ieee754_powf+0x564>
 8008af4:	d908      	bls.n	8008b08 <__ieee754_powf+0xc0>
 8008af6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8008e58 <__ieee754_powf+0x410>
 8008afa:	2c00      	cmp	r4, #0
 8008afc:	bfa8      	it	ge
 8008afe:	eeb0 0a68 	vmovge.f32	s0, s17
 8008b02:	e7b9      	b.n	8008a78 <__ieee754_powf+0x30>
 8008b04:	2502      	movs	r5, #2
 8008b06:	e7ee      	b.n	8008ae6 <__ieee754_powf+0x9e>
 8008b08:	2c00      	cmp	r4, #0
 8008b0a:	f280 8252 	bge.w	8008fb2 <__ieee754_powf+0x56a>
 8008b0e:	eeb1 0a68 	vneg.f32	s0, s17
 8008b12:	e7b1      	b.n	8008a78 <__ieee754_powf+0x30>
 8008b14:	2500      	movs	r5, #0
 8008b16:	e7da      	b.n	8008ace <__ieee754_powf+0x86>
 8008b18:	2500      	movs	r5, #0
 8008b1a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8008b1e:	d102      	bne.n	8008b26 <__ieee754_powf+0xde>
 8008b20:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008b24:	e7a8      	b.n	8008a78 <__ieee754_powf+0x30>
 8008b26:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8008b2a:	d109      	bne.n	8008b40 <__ieee754_powf+0xf8>
 8008b2c:	2e00      	cmp	r6, #0
 8008b2e:	db07      	blt.n	8008b40 <__ieee754_powf+0xf8>
 8008b30:	eeb0 0a48 	vmov.f32	s0, s16
 8008b34:	ecbd 8b02 	vpop	{d8}
 8008b38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	f000 bae8 	b.w	8009110 <__ieee754_sqrtf>
 8008b40:	eeb0 0a48 	vmov.f32	s0, s16
 8008b44:	f000 fa50 	bl	8008fe8 <fabsf>
 8008b48:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008b4c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008b50:	4647      	mov	r7, r8
 8008b52:	d002      	beq.n	8008b5a <__ieee754_powf+0x112>
 8008b54:	f1b8 0f00 	cmp.w	r8, #0
 8008b58:	d117      	bne.n	8008b8a <__ieee754_powf+0x142>
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	bfbc      	itt	lt
 8008b5e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8008b62:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008b66:	2e00      	cmp	r6, #0
 8008b68:	da86      	bge.n	8008a78 <__ieee754_powf+0x30>
 8008b6a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008b6e:	ea58 0805 	orrs.w	r8, r8, r5
 8008b72:	d104      	bne.n	8008b7e <__ieee754_powf+0x136>
 8008b74:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008b78:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008b7c:	e77c      	b.n	8008a78 <__ieee754_powf+0x30>
 8008b7e:	2d01      	cmp	r5, #1
 8008b80:	f47f af7a 	bne.w	8008a78 <__ieee754_powf+0x30>
 8008b84:	eeb1 0a40 	vneg.f32	s0, s0
 8008b88:	e776      	b.n	8008a78 <__ieee754_powf+0x30>
 8008b8a:	0ff0      	lsrs	r0, r6, #31
 8008b8c:	3801      	subs	r0, #1
 8008b8e:	ea55 0300 	orrs.w	r3, r5, r0
 8008b92:	d104      	bne.n	8008b9e <__ieee754_powf+0x156>
 8008b94:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008b98:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008b9c:	e76c      	b.n	8008a78 <__ieee754_powf+0x30>
 8008b9e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8008ba2:	d973      	bls.n	8008c8c <__ieee754_powf+0x244>
 8008ba4:	4bad      	ldr	r3, [pc, #692]	@ (8008e5c <__ieee754_powf+0x414>)
 8008ba6:	4598      	cmp	r8, r3
 8008ba8:	d808      	bhi.n	8008bbc <__ieee754_powf+0x174>
 8008baa:	2c00      	cmp	r4, #0
 8008bac:	da0b      	bge.n	8008bc6 <__ieee754_powf+0x17e>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	ecbd 8b02 	vpop	{d8}
 8008bb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb8:	f000 baa4 	b.w	8009104 <__math_oflowf>
 8008bbc:	4ba8      	ldr	r3, [pc, #672]	@ (8008e60 <__ieee754_powf+0x418>)
 8008bbe:	4598      	cmp	r8, r3
 8008bc0:	d908      	bls.n	8008bd4 <__ieee754_powf+0x18c>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	dcf3      	bgt.n	8008bae <__ieee754_powf+0x166>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	ecbd 8b02 	vpop	{d8}
 8008bcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	f000 ba92 	b.w	80090f8 <__math_uflowf>
 8008bd4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008bd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008bdc:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8008e64 <__ieee754_powf+0x41c>
 8008be0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8008be4:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008be8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008bec:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008bf0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008bf8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8008e68 <__ieee754_powf+0x420>
 8008bfc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8008c00:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8008e6c <__ieee754_powf+0x424>
 8008c04:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008c08:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8008e70 <__ieee754_powf+0x428>
 8008c0c:	eef0 6a67 	vmov.f32	s13, s15
 8008c10:	eee0 6a07 	vfma.f32	s13, s0, s14
 8008c14:	ee16 3a90 	vmov	r3, s13
 8008c18:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008c1c:	f023 030f 	bic.w	r3, r3, #15
 8008c20:	ee06 3a90 	vmov	s13, r3
 8008c24:	eee0 6a47 	vfms.f32	s13, s0, s14
 8008c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c2c:	3d01      	subs	r5, #1
 8008c2e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8008c32:	4305      	orrs	r5, r0
 8008c34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c38:	f024 040f 	bic.w	r4, r4, #15
 8008c3c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8008c40:	bf18      	it	ne
 8008c42:	eeb0 8a47 	vmovne.f32	s16, s14
 8008c46:	ee07 4a10 	vmov	s14, r4
 8008c4a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8008c4e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008c5a:	ee07 4a10 	vmov	s14, r4
 8008c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c62:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8008c66:	ee17 1a10 	vmov	r1, s14
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c70:	f340 80dd 	ble.w	8008e2e <__ieee754_powf+0x3e6>
 8008c74:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8008c78:	f240 80ca 	bls.w	8008e10 <__ieee754_powf+0x3c8>
 8008c7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c84:	bf4c      	ite	mi
 8008c86:	2001      	movmi	r0, #1
 8008c88:	2000      	movpl	r0, #0
 8008c8a:	e791      	b.n	8008bb0 <__ieee754_powf+0x168>
 8008c8c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8008c90:	bf01      	itttt	eq
 8008c92:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8008e74 <__ieee754_powf+0x42c>
 8008c96:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008c9a:	f06f 0317 	mvneq.w	r3, #23
 8008c9e:	ee17 7a90 	vmoveq	r7, s15
 8008ca2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8008ca6:	bf18      	it	ne
 8008ca8:	2300      	movne	r3, #0
 8008caa:	3a7f      	subs	r2, #127	@ 0x7f
 8008cac:	441a      	add	r2, r3
 8008cae:	4b72      	ldr	r3, [pc, #456]	@ (8008e78 <__ieee754_powf+0x430>)
 8008cb0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8008cb4:	429f      	cmp	r7, r3
 8008cb6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8008cba:	dd06      	ble.n	8008cca <__ieee754_powf+0x282>
 8008cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8008e7c <__ieee754_powf+0x434>)
 8008cbe:	429f      	cmp	r7, r3
 8008cc0:	f340 80a4 	ble.w	8008e0c <__ieee754_powf+0x3c4>
 8008cc4:	3201      	adds	r2, #1
 8008cc6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8008cca:	2600      	movs	r6, #0
 8008ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8008e80 <__ieee754_powf+0x438>)
 8008cce:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8008cd2:	ee07 1a10 	vmov	s14, r1
 8008cd6:	edd3 5a00 	vldr	s11, [r3]
 8008cda:	4b6a      	ldr	r3, [pc, #424]	@ (8008e84 <__ieee754_powf+0x43c>)
 8008cdc:	ee75 7a87 	vadd.f32	s15, s11, s14
 8008ce0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ce4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8008ce8:	1049      	asrs	r1, r1, #1
 8008cea:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8008cee:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8008cf2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8008cf6:	ee37 6a65 	vsub.f32	s12, s14, s11
 8008cfa:	ee07 1a90 	vmov	s15, r1
 8008cfe:	ee26 5a24 	vmul.f32	s10, s12, s9
 8008d02:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8008d06:	ee15 7a10 	vmov	r7, s10
 8008d0a:	401f      	ands	r7, r3
 8008d0c:	ee06 7a90 	vmov	s13, r7
 8008d10:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8008d14:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008d18:	ee65 7a05 	vmul.f32	s15, s10, s10
 8008d1c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008d20:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008e88 <__ieee754_powf+0x440>
 8008d24:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8008e8c <__ieee754_powf+0x444>
 8008d28:	eee7 5a87 	vfma.f32	s11, s15, s14
 8008d2c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8008e90 <__ieee754_powf+0x448>
 8008d30:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008d34:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8008e64 <__ieee754_powf+0x41c>
 8008d38:	eee7 5a27 	vfma.f32	s11, s14, s15
 8008d3c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8008e94 <__ieee754_powf+0x44c>
 8008d40:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008d44:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8008e98 <__ieee754_powf+0x450>
 8008d48:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008d4c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8008d50:	ee35 7a26 	vadd.f32	s14, s10, s13
 8008d54:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8008d58:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008d5c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8008d60:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8008d64:	eef0 5a67 	vmov.f32	s11, s15
 8008d68:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8008d6c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8008d70:	ee15 1a90 	vmov	r1, s11
 8008d74:	4019      	ands	r1, r3
 8008d76:	ee05 1a90 	vmov	s11, r1
 8008d7a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008d7e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8008d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d86:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008d8a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008d8e:	eeb0 6a67 	vmov.f32	s12, s15
 8008d92:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008d96:	ee16 1a10 	vmov	r1, s12
 8008d9a:	4019      	ands	r1, r3
 8008d9c:	ee06 1a10 	vmov	s12, r1
 8008da0:	eeb0 7a46 	vmov.f32	s14, s12
 8008da4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8008da8:	493c      	ldr	r1, [pc, #240]	@ (8008e9c <__ieee754_powf+0x454>)
 8008daa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8008dae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008db2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8008ea0 <__ieee754_powf+0x458>
 8008db6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8008ea4 <__ieee754_powf+0x45c>
 8008dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dbe:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8008ea8 <__ieee754_powf+0x460>
 8008dc2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008dc6:	ed91 7a00 	vldr	s14, [r1]
 8008dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008dce:	ee07 2a10 	vmov	s14, r2
 8008dd2:	eef0 6a67 	vmov.f32	s13, s15
 8008dd6:	4a35      	ldr	r2, [pc, #212]	@ (8008eac <__ieee754_powf+0x464>)
 8008dd8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008ddc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8008de0:	ed92 5a00 	vldr	s10, [r2]
 8008de4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008de8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008dec:	ee76 6a87 	vadd.f32	s13, s13, s14
 8008df0:	ee16 2a90 	vmov	r2, s13
 8008df4:	4013      	ands	r3, r2
 8008df6:	ee06 3a90 	vmov	s13, r3
 8008dfa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008dfe:	ee37 7a45 	vsub.f32	s14, s14, s10
 8008e02:	eea6 7a65 	vfms.f32	s14, s12, s11
 8008e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e0a:	e70f      	b.n	8008c2c <__ieee754_powf+0x1e4>
 8008e0c:	2601      	movs	r6, #1
 8008e0e:	e75d      	b.n	8008ccc <__ieee754_powf+0x284>
 8008e10:	d152      	bne.n	8008eb8 <__ieee754_powf+0x470>
 8008e12:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8008eb0 <__ieee754_powf+0x468>
 8008e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e1a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008e1e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e26:	f73f af29 	bgt.w	8008c7c <__ieee754_powf+0x234>
 8008e2a:	2386      	movs	r3, #134	@ 0x86
 8008e2c:	e048      	b.n	8008ec0 <__ieee754_powf+0x478>
 8008e2e:	4a21      	ldr	r2, [pc, #132]	@ (8008eb4 <__ieee754_powf+0x46c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d907      	bls.n	8008e44 <__ieee754_powf+0x3fc>
 8008e34:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	bf4c      	ite	mi
 8008e3e:	2001      	movmi	r0, #1
 8008e40:	2000      	movpl	r0, #0
 8008e42:	e6c1      	b.n	8008bc8 <__ieee754_powf+0x180>
 8008e44:	d138      	bne.n	8008eb8 <__ieee754_powf+0x470>
 8008e46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e4a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e52:	dbea      	blt.n	8008e2a <__ieee754_powf+0x3e2>
 8008e54:	e7ee      	b.n	8008e34 <__ieee754_powf+0x3ec>
 8008e56:	bf00      	nop
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	3f7ffff3 	.word	0x3f7ffff3
 8008e60:	3f800007 	.word	0x3f800007
 8008e64:	3eaaaaab 	.word	0x3eaaaaab
 8008e68:	3fb8aa3b 	.word	0x3fb8aa3b
 8008e6c:	36eca570 	.word	0x36eca570
 8008e70:	3fb8aa00 	.word	0x3fb8aa00
 8008e74:	4b800000 	.word	0x4b800000
 8008e78:	001cc471 	.word	0x001cc471
 8008e7c:	005db3d6 	.word	0x005db3d6
 8008e80:	080092b8 	.word	0x080092b8
 8008e84:	fffff000 	.word	0xfffff000
 8008e88:	3e6c3255 	.word	0x3e6c3255
 8008e8c:	3e53f142 	.word	0x3e53f142
 8008e90:	3e8ba305 	.word	0x3e8ba305
 8008e94:	3edb6db7 	.word	0x3edb6db7
 8008e98:	3f19999a 	.word	0x3f19999a
 8008e9c:	080092a8 	.word	0x080092a8
 8008ea0:	3f76384f 	.word	0x3f76384f
 8008ea4:	3f763800 	.word	0x3f763800
 8008ea8:	369dc3a0 	.word	0x369dc3a0
 8008eac:	080092b0 	.word	0x080092b0
 8008eb0:	3338aa3c 	.word	0x3338aa3c
 8008eb4:	43160000 	.word	0x43160000
 8008eb8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8008ebc:	d971      	bls.n	8008fa2 <__ieee754_powf+0x55a>
 8008ebe:	15db      	asrs	r3, r3, #23
 8008ec0:	3b7e      	subs	r3, #126	@ 0x7e
 8008ec2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008ec6:	4118      	asrs	r0, r3
 8008ec8:	4408      	add	r0, r1
 8008eca:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008ece:	4a3c      	ldr	r2, [pc, #240]	@ (8008fc0 <__ieee754_powf+0x578>)
 8008ed0:	3b7f      	subs	r3, #127	@ 0x7f
 8008ed2:	411a      	asrs	r2, r3
 8008ed4:	4002      	ands	r2, r0
 8008ed6:	ee07 2a10 	vmov	s14, r2
 8008eda:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008ede:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008ee2:	f1c3 0317 	rsb	r3, r3, #23
 8008ee6:	4118      	asrs	r0, r3
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008eee:	bfb8      	it	lt
 8008ef0:	4240      	neglt	r0, r0
 8008ef2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008ef6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8008fc4 <__ieee754_powf+0x57c>
 8008efa:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8008fc8 <__ieee754_powf+0x580>
 8008efe:	ee17 3a10 	vmov	r3, s14
 8008f02:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008f06:	f023 030f 	bic.w	r3, r3, #15
 8008f0a:	ee07 3a10 	vmov	s14, r3
 8008f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f12:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008f16:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008f1a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8008fcc <__ieee754_powf+0x584>
 8008f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f22:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008f26:	eef0 6a67 	vmov.f32	s13, s15
 8008f2a:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008f2e:	eef0 5a66 	vmov.f32	s11, s13
 8008f32:	eee7 5a46 	vfms.f32	s11, s14, s12
 8008f36:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008f3a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008f3e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8008fd0 <__ieee754_powf+0x588>
 8008f42:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8008fd4 <__ieee754_powf+0x58c>
 8008f46:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008f4a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8008fd8 <__ieee754_powf+0x590>
 8008f4e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008f52:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8008fdc <__ieee754_powf+0x594>
 8008f56:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008f5a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8008fe0 <__ieee754_powf+0x598>
 8008f5e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008f62:	eeb0 6a66 	vmov.f32	s12, s13
 8008f66:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8008f6a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8008f6e:	ee66 5a86 	vmul.f32	s11, s13, s12
 8008f72:	ee36 6a47 	vsub.f32	s12, s12, s14
 8008f76:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8008f7a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8008f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f8a:	ee10 3a10 	vmov	r3, s0
 8008f8e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f96:	da06      	bge.n	8008fa6 <__ieee754_powf+0x55e>
 8008f98:	f000 f82e 	bl	8008ff8 <scalbnf>
 8008f9c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008fa0:	e56a      	b.n	8008a78 <__ieee754_powf+0x30>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e7a5      	b.n	8008ef2 <__ieee754_powf+0x4aa>
 8008fa6:	ee00 3a10 	vmov	s0, r3
 8008faa:	e7f7      	b.n	8008f9c <__ieee754_powf+0x554>
 8008fac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008fb0:	e562      	b.n	8008a78 <__ieee754_powf+0x30>
 8008fb2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8008fe4 <__ieee754_powf+0x59c>
 8008fb6:	e55f      	b.n	8008a78 <__ieee754_powf+0x30>
 8008fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8008fbc:	e55c      	b.n	8008a78 <__ieee754_powf+0x30>
 8008fbe:	bf00      	nop
 8008fc0:	ff800000 	.word	0xff800000
 8008fc4:	3f317218 	.word	0x3f317218
 8008fc8:	3f317200 	.word	0x3f317200
 8008fcc:	35bfbe8c 	.word	0x35bfbe8c
 8008fd0:	b5ddea0e 	.word	0xb5ddea0e
 8008fd4:	3331bb4c 	.word	0x3331bb4c
 8008fd8:	388ab355 	.word	0x388ab355
 8008fdc:	bb360b61 	.word	0xbb360b61
 8008fe0:	3e2aaaab 	.word	0x3e2aaaab
 8008fe4:	00000000 	.word	0x00000000

08008fe8 <fabsf>:
 8008fe8:	ee10 3a10 	vmov	r3, s0
 8008fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ff0:	ee00 3a10 	vmov	s0, r3
 8008ff4:	4770      	bx	lr
	...

08008ff8 <scalbnf>:
 8008ff8:	ee10 3a10 	vmov	r3, s0
 8008ffc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009000:	d02b      	beq.n	800905a <scalbnf+0x62>
 8009002:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009006:	d302      	bcc.n	800900e <scalbnf+0x16>
 8009008:	ee30 0a00 	vadd.f32	s0, s0, s0
 800900c:	4770      	bx	lr
 800900e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009012:	d123      	bne.n	800905c <scalbnf+0x64>
 8009014:	4b24      	ldr	r3, [pc, #144]	@ (80090a8 <scalbnf+0xb0>)
 8009016:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80090ac <scalbnf+0xb4>
 800901a:	4298      	cmp	r0, r3
 800901c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009020:	db17      	blt.n	8009052 <scalbnf+0x5a>
 8009022:	ee10 3a10 	vmov	r3, s0
 8009026:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800902a:	3a19      	subs	r2, #25
 800902c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009030:	4288      	cmp	r0, r1
 8009032:	dd15      	ble.n	8009060 <scalbnf+0x68>
 8009034:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80090b0 <scalbnf+0xb8>
 8009038:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80090b4 <scalbnf+0xbc>
 800903c:	ee10 3a10 	vmov	r3, s0
 8009040:	eeb0 7a67 	vmov.f32	s14, s15
 8009044:	2b00      	cmp	r3, #0
 8009046:	bfb8      	it	lt
 8009048:	eef0 7a66 	vmovlt.f32	s15, s13
 800904c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009050:	4770      	bx	lr
 8009052:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80090b8 <scalbnf+0xc0>
 8009056:	ee27 0a80 	vmul.f32	s0, s15, s0
 800905a:	4770      	bx	lr
 800905c:	0dd2      	lsrs	r2, r2, #23
 800905e:	e7e5      	b.n	800902c <scalbnf+0x34>
 8009060:	4410      	add	r0, r2
 8009062:	28fe      	cmp	r0, #254	@ 0xfe
 8009064:	dce6      	bgt.n	8009034 <scalbnf+0x3c>
 8009066:	2800      	cmp	r0, #0
 8009068:	dd06      	ble.n	8009078 <scalbnf+0x80>
 800906a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800906e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009072:	ee00 3a10 	vmov	s0, r3
 8009076:	4770      	bx	lr
 8009078:	f110 0f16 	cmn.w	r0, #22
 800907c:	da09      	bge.n	8009092 <scalbnf+0x9a>
 800907e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80090b8 <scalbnf+0xc0>
 8009082:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80090bc <scalbnf+0xc4>
 8009086:	ee10 3a10 	vmov	r3, s0
 800908a:	eeb0 7a67 	vmov.f32	s14, s15
 800908e:	2b00      	cmp	r3, #0
 8009090:	e7d9      	b.n	8009046 <scalbnf+0x4e>
 8009092:	3019      	adds	r0, #25
 8009094:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009098:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800909c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80090c0 <scalbnf+0xc8>
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	e7d7      	b.n	8009056 <scalbnf+0x5e>
 80090a6:	bf00      	nop
 80090a8:	ffff3cb0 	.word	0xffff3cb0
 80090ac:	4c000000 	.word	0x4c000000
 80090b0:	7149f2ca 	.word	0x7149f2ca
 80090b4:	f149f2ca 	.word	0xf149f2ca
 80090b8:	0da24260 	.word	0x0da24260
 80090bc:	8da24260 	.word	0x8da24260
 80090c0:	33000000 	.word	0x33000000

080090c4 <with_errnof>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	ed2d 8b02 	vpush	{d8}
 80090ca:	eeb0 8a40 	vmov.f32	s16, s0
 80090ce:	4604      	mov	r4, r0
 80090d0:	f7fe fe66 	bl	8007da0 <__errno>
 80090d4:	eeb0 0a48 	vmov.f32	s0, s16
 80090d8:	ecbd 8b02 	vpop	{d8}
 80090dc:	6004      	str	r4, [r0, #0]
 80090de:	bd10      	pop	{r4, pc}

080090e0 <xflowf>:
 80090e0:	b130      	cbz	r0, 80090f0 <xflowf+0x10>
 80090e2:	eef1 7a40 	vneg.f32	s15, s0
 80090e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80090ea:	2022      	movs	r0, #34	@ 0x22
 80090ec:	f7ff bfea 	b.w	80090c4 <with_errnof>
 80090f0:	eef0 7a40 	vmov.f32	s15, s0
 80090f4:	e7f7      	b.n	80090e6 <xflowf+0x6>
	...

080090f8 <__math_uflowf>:
 80090f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009100 <__math_uflowf+0x8>
 80090fc:	f7ff bff0 	b.w	80090e0 <xflowf>
 8009100:	10000000 	.word	0x10000000

08009104 <__math_oflowf>:
 8009104:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800910c <__math_oflowf+0x8>
 8009108:	f7ff bfea 	b.w	80090e0 <xflowf>
 800910c:	70000000 	.word	0x70000000

08009110 <__ieee754_sqrtf>:
 8009110:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009114:	4770      	bx	lr
	...

08009118 <_init>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr

08009124 <_fini>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr
